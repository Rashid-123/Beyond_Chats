/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("middleware",{

/***/ "(middleware)/./node_modules/@clerk/backend/dist/jwt/index.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@clerk/backend/dist/jwt/index.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeJwt: () => (/* binding */ decodeJwt2),\n/* harmony export */   hasValidSignature: () => (/* binding */ hasValidSignature2),\n/* harmony export */   signJwt: () => (/* binding */ signJwt2),\n/* harmony export */   verifyJwt: () => (/* binding */ verifyJwt2)\n/* harmony export */ });\n/* harmony import */ var _chunk_P263NW7Z_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chunk-P263NW7Z.mjs */ \"(middleware)/./node_modules/@clerk/backend/dist/chunk-P263NW7Z.mjs\");\n/* harmony import */ var _chunk_AR5UB427_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chunk-AR5UB427.mjs */ \"(middleware)/./node_modules/@clerk/backend/dist/chunk-AR5UB427.mjs\");\n/* harmony import */ var _chunk_HNJNM32R_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../chunk-HNJNM32R.mjs */ \"(middleware)/./node_modules/@clerk/backend/dist/chunk-HNJNM32R.mjs\");\n/* harmony import */ var _chunk_RPS7XK5K_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../chunk-RPS7XK5K.mjs */ \"(middleware)/./node_modules/@clerk/backend/dist/chunk-RPS7XK5K.mjs\");\n\n\n\n\n\n// src/jwt/signJwt.ts\nfunction encodeJwtData(value) {\n  const stringified = JSON.stringify(value);\n  const encoder = new TextEncoder();\n  const encoded = encoder.encode(stringified);\n  return _chunk_AR5UB427_mjs__WEBPACK_IMPORTED_MODULE_1__.base64url.stringify(encoded, { pad: false });\n}\nasync function signJwt(payload, key, options) {\n  if (!options.algorithm) {\n    throw new Error(\"No algorithm specified\");\n  }\n  const encoder = new TextEncoder();\n  const algorithm = (0,_chunk_AR5UB427_mjs__WEBPACK_IMPORTED_MODULE_1__.getCryptoAlgorithm)(options.algorithm);\n  if (!algorithm) {\n    return {\n      errors: [new _chunk_HNJNM32R_mjs__WEBPACK_IMPORTED_MODULE_2__.SignJWTError(`Unsupported algorithm ${options.algorithm}`)]\n    };\n  }\n  const cryptoKey = await (0,_chunk_AR5UB427_mjs__WEBPACK_IMPORTED_MODULE_1__.importKey)(key, algorithm, \"sign\");\n  const header = options.header || { typ: \"JWT\" };\n  header.alg = options.algorithm;\n  payload.iat = Math.floor(Date.now() / 1e3);\n  const encodedHeader = encodeJwtData(header);\n  const encodedPayload = encodeJwtData(payload);\n  const firstPart = `${encodedHeader}.${encodedPayload}`;\n  try {\n    const signature = await _chunk_AR5UB427_mjs__WEBPACK_IMPORTED_MODULE_1__.runtime.crypto.subtle.sign(algorithm, cryptoKey, encoder.encode(firstPart));\n    const encodedSignature = `${firstPart}.${_chunk_AR5UB427_mjs__WEBPACK_IMPORTED_MODULE_1__.base64url.stringify(new Uint8Array(signature), { pad: false })}`;\n    return { data: encodedSignature };\n  } catch (error) {\n    return { errors: [new _chunk_HNJNM32R_mjs__WEBPACK_IMPORTED_MODULE_2__.SignJWTError(error?.message)] };\n  }\n}\n\n// src/jwt/index.ts\nvar verifyJwt2 = (0,_chunk_P263NW7Z_mjs__WEBPACK_IMPORTED_MODULE_0__.withLegacyReturn)(_chunk_AR5UB427_mjs__WEBPACK_IMPORTED_MODULE_1__.verifyJwt);\nvar decodeJwt2 = (0,_chunk_P263NW7Z_mjs__WEBPACK_IMPORTED_MODULE_0__.withLegacySyncReturn)(_chunk_AR5UB427_mjs__WEBPACK_IMPORTED_MODULE_1__.decodeJwt);\nvar signJwt2 = (0,_chunk_P263NW7Z_mjs__WEBPACK_IMPORTED_MODULE_0__.withLegacyReturn)(signJwt);\nvar hasValidSignature2 = (0,_chunk_P263NW7Z_mjs__WEBPACK_IMPORTED_MODULE_0__.withLegacyReturn)(_chunk_AR5UB427_mjs__WEBPACK_IMPORTED_MODULE_1__.hasValidSignature);\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9iYWNrZW5kL2Rpc3Qvand0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUcrQjtBQVNBO0FBR0E7QUFDQTs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsMERBQVMsc0JBQXNCLFlBQVk7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHVFQUFrQjtBQUN0QztBQUNBO0FBQ0EsbUJBQW1CLDZEQUFZLDBCQUEwQixrQkFBa0I7QUFDM0U7QUFDQTtBQUNBLDBCQUEwQiw4REFBUztBQUNuQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsY0FBYyxHQUFHLGVBQWU7QUFDdkQ7QUFDQSw0QkFBNEIsd0RBQU87QUFDbkMsZ0NBQWdDLFVBQVUsR0FBRywwREFBUyx3Q0FBd0MsWUFBWSxFQUFFO0FBQzVHLGFBQWE7QUFDYixJQUFJO0FBQ0osYUFBYSxhQUFhLDZEQUFZO0FBQ3RDO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIscUVBQWdCLENBQUMsMERBQVM7QUFDM0MsaUJBQWlCLHlFQUFvQixDQUFDLDBEQUFTO0FBQy9DLGVBQWUscUVBQWdCO0FBQy9CLHlCQUF5QixxRUFBZ0IsQ0FBQyxrRUFBaUI7QUFNekQ7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxIUFxcRGVza3RvcFxcQmV5b25kX2NoYXRcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAY2xlcmtcXGJhY2tlbmRcXGRpc3RcXGp3dFxcaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHdpdGhMZWdhY3lSZXR1cm4sXG4gIHdpdGhMZWdhY3lTeW5jUmV0dXJuXG59IGZyb20gXCIuLi9jaHVuay1QMjYzTlc3Wi5tanNcIjtcbmltcG9ydCB7XG4gIGJhc2U2NHVybCxcbiAgZGVjb2RlSnd0LFxuICBnZXRDcnlwdG9BbGdvcml0aG0sXG4gIGhhc1ZhbGlkU2lnbmF0dXJlLFxuICBpbXBvcnRLZXksXG4gIHJ1bnRpbWUsXG4gIHZlcmlmeUp3dFxufSBmcm9tIFwiLi4vY2h1bmstQVI1VUI0MjcubWpzXCI7XG5pbXBvcnQge1xuICBTaWduSldURXJyb3Jcbn0gZnJvbSBcIi4uL2NodW5rLUhOSk5NMzJSLm1qc1wiO1xuaW1wb3J0IFwiLi4vY2h1bmstUlBTN1hLNUsubWpzXCI7XG5cbi8vIHNyYy9qd3Qvc2lnbkp3dC50c1xuZnVuY3Rpb24gZW5jb2RlSnd0RGF0YSh2YWx1ZSkge1xuICBjb25zdCBzdHJpbmdpZmllZCA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICBjb25zdCBlbmNvZGVkID0gZW5jb2Rlci5lbmNvZGUoc3RyaW5naWZpZWQpO1xuICByZXR1cm4gYmFzZTY0dXJsLnN0cmluZ2lmeShlbmNvZGVkLCB7IHBhZDogZmFsc2UgfSk7XG59XG5hc3luYyBmdW5jdGlvbiBzaWduSnd0KHBheWxvYWQsIGtleSwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMuYWxnb3JpdGhtKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gYWxnb3JpdGhtIHNwZWNpZmllZFwiKTtcbiAgfVxuICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gIGNvbnN0IGFsZ29yaXRobSA9IGdldENyeXB0b0FsZ29yaXRobShvcHRpb25zLmFsZ29yaXRobSk7XG4gIGlmICghYWxnb3JpdGhtKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yczogW25ldyBTaWduSldURXJyb3IoYFVuc3VwcG9ydGVkIGFsZ29yaXRobSAke29wdGlvbnMuYWxnb3JpdGhtfWApXVxuICAgIH07XG4gIH1cbiAgY29uc3QgY3J5cHRvS2V5ID0gYXdhaXQgaW1wb3J0S2V5KGtleSwgYWxnb3JpdGhtLCBcInNpZ25cIik7XG4gIGNvbnN0IGhlYWRlciA9IG9wdGlvbnMuaGVhZGVyIHx8IHsgdHlwOiBcIkpXVFwiIH07XG4gIGhlYWRlci5hbGcgPSBvcHRpb25zLmFsZ29yaXRobTtcbiAgcGF5bG9hZC5pYXQgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxZTMpO1xuICBjb25zdCBlbmNvZGVkSGVhZGVyID0gZW5jb2RlSnd0RGF0YShoZWFkZXIpO1xuICBjb25zdCBlbmNvZGVkUGF5bG9hZCA9IGVuY29kZUp3dERhdGEocGF5bG9hZCk7XG4gIGNvbnN0IGZpcnN0UGFydCA9IGAke2VuY29kZWRIZWFkZXJ9LiR7ZW5jb2RlZFBheWxvYWR9YDtcbiAgdHJ5IHtcbiAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCBydW50aW1lLmNyeXB0by5zdWJ0bGUuc2lnbihhbGdvcml0aG0sIGNyeXB0b0tleSwgZW5jb2Rlci5lbmNvZGUoZmlyc3RQYXJ0KSk7XG4gICAgY29uc3QgZW5jb2RlZFNpZ25hdHVyZSA9IGAke2ZpcnN0UGFydH0uJHtiYXNlNjR1cmwuc3RyaW5naWZ5KG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSksIHsgcGFkOiBmYWxzZSB9KX1gO1xuICAgIHJldHVybiB7IGRhdGE6IGVuY29kZWRTaWduYXR1cmUgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4geyBlcnJvcnM6IFtuZXcgU2lnbkpXVEVycm9yKGVycm9yPy5tZXNzYWdlKV0gfTtcbiAgfVxufVxuXG4vLyBzcmMvand0L2luZGV4LnRzXG52YXIgdmVyaWZ5Snd0MiA9IHdpdGhMZWdhY3lSZXR1cm4odmVyaWZ5Snd0KTtcbnZhciBkZWNvZGVKd3QyID0gd2l0aExlZ2FjeVN5bmNSZXR1cm4oZGVjb2RlSnd0KTtcbnZhciBzaWduSnd0MiA9IHdpdGhMZWdhY3lSZXR1cm4oc2lnbkp3dCk7XG52YXIgaGFzVmFsaWRTaWduYXR1cmUyID0gd2l0aExlZ2FjeVJldHVybihoYXNWYWxpZFNpZ25hdHVyZSk7XG5leHBvcnQge1xuICBkZWNvZGVKd3QyIGFzIGRlY29kZUp3dCxcbiAgaGFzVmFsaWRTaWduYXR1cmUyIGFzIGhhc1ZhbGlkU2lnbmF0dXJlLFxuICBzaWduSnd0MiBhcyBzaWduSnd0LFxuICB2ZXJpZnlKd3QyIGFzIHZlcmlmeUp3dFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/backend/dist/jwt/index.mjs\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/client/ClerkProvider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/app-router/client/ClerkProvider.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientClerkProvider: () => (/* binding */ ClientClerkProvider)\n/* harmony export */ });\n/* harmony import */ var react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-server-dom-webpack/server */ \"(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/server.edge.js\");\n// This file is generated by the Webpack next-flight-loader.\n\nconst ClientClerkProvider = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call ClientClerkProvider() from the server but ClientClerkProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\app-router\\\\client\\\\ClerkProvider.js\",\n\"ClientClerkProvider\",\n);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vYXBwLXJvdXRlci9jbGllbnQvQ2xlcmtQcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBIiwic291cmNlcyI6WyJfTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vYXBwLXJvdXRlci9jbGllbnQvQ2xlcmtQcm92aWRlci5qcy9fX25leHRqcy1pbnRlcm5hbC1wcm94eS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBieSB0aGUgV2VicGFjayBuZXh0LWZsaWdodC1sb2FkZXIuXG5pbXBvcnQgeyByZWdpc3RlckNsaWVudFJlZmVyZW5jZSB9IGZyb20gXCJyZWFjdC1zZXJ2ZXItZG9tLXdlYnBhY2svc2VydmVyXCI7XG5leHBvcnQgY29uc3QgQ2xpZW50Q2xlcmtQcm92aWRlciA9IHJlZ2lzdGVyQ2xpZW50UmVmZXJlbmNlKFxuZnVuY3Rpb24oKSB7IHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byBjYWxsIENsaWVudENsZXJrUHJvdmlkZXIoKSBmcm9tIHRoZSBzZXJ2ZXIgYnV0IENsaWVudENsZXJrUHJvdmlkZXIgaXMgb24gdGhlIGNsaWVudC4gSXQncyBub3QgcG9zc2libGUgdG8gaW52b2tlIGEgY2xpZW50IGZ1bmN0aW9uIGZyb20gdGhlIHNlcnZlciwgaXQgY2FuIG9ubHkgYmUgcmVuZGVyZWQgYXMgYSBDb21wb25lbnQgb3IgcGFzc2VkIHRvIHByb3BzIG9mIGEgQ2xpZW50IENvbXBvbmVudC5cIik7IH0sXG5cIkM6XFxcXFVzZXJzXFxcXEhQXFxcXERlc2t0b3BcXFxcQmV5b25kX2NoYXRcXFxcY2xpZW50XFxcXG5vZGVfbW9kdWxlc1xcXFxAY2xlcmtcXFxcbmV4dGpzXFxcXGRpc3RcXFxcZXNtXFxcXGFwcC1yb3V0ZXJcXFxcY2xpZW50XFxcXENsZXJrUHJvdmlkZXIuanNcIixcblwiQ2xpZW50Q2xlcmtQcm92aWRlclwiLFxuKTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/client/ClerkProvider.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/client/keyless-cookie-sync.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/app-router/client/keyless-cookie-sync.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeylessCookieSync: () => (/* binding */ KeylessCookieSync)\n/* harmony export */ });\n/* harmony import */ var react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-server-dom-webpack/server */ \"(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/server.edge.js\");\n// This file is generated by the Webpack next-flight-loader.\n\nconst KeylessCookieSync = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call KeylessCookieSync() from the server but KeylessCookieSync is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\app-router\\\\client\\\\keyless-cookie-sync.js\",\n\"KeylessCookieSync\",\n);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vYXBwLXJvdXRlci9jbGllbnQva2V5bGVzcy1jb29raWUtc3luYy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBIiwic291cmNlcyI6WyJfTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vYXBwLXJvdXRlci9jbGllbnQva2V5bGVzcy1jb29raWUtc3luYy5qcy9fX25leHRqcy1pbnRlcm5hbC1wcm94eS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBieSB0aGUgV2VicGFjayBuZXh0LWZsaWdodC1sb2FkZXIuXG5pbXBvcnQgeyByZWdpc3RlckNsaWVudFJlZmVyZW5jZSB9IGZyb20gXCJyZWFjdC1zZXJ2ZXItZG9tLXdlYnBhY2svc2VydmVyXCI7XG5leHBvcnQgY29uc3QgS2V5bGVzc0Nvb2tpZVN5bmMgPSByZWdpc3RlckNsaWVudFJlZmVyZW5jZShcbmZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJBdHRlbXB0ZWQgdG8gY2FsbCBLZXlsZXNzQ29va2llU3luYygpIGZyb20gdGhlIHNlcnZlciBidXQgS2V5bGVzc0Nvb2tpZVN5bmMgaXMgb24gdGhlIGNsaWVudC4gSXQncyBub3QgcG9zc2libGUgdG8gaW52b2tlIGEgY2xpZW50IGZ1bmN0aW9uIGZyb20gdGhlIHNlcnZlciwgaXQgY2FuIG9ubHkgYmUgcmVuZGVyZWQgYXMgYSBDb21wb25lbnQgb3IgcGFzc2VkIHRvIHByb3BzIG9mIGEgQ2xpZW50IENvbXBvbmVudC5cIik7IH0sXG5cIkM6XFxcXFVzZXJzXFxcXEhQXFxcXERlc2t0b3BcXFxcQmV5b25kX2NoYXRcXFxcY2xpZW50XFxcXG5vZGVfbW9kdWxlc1xcXFxAY2xlcmtcXFxcbmV4dGpzXFxcXGRpc3RcXFxcZXNtXFxcXGFwcC1yb3V0ZXJcXFxcY2xpZW50XFxcXGtleWxlc3MtY29va2llLXN5bmMuanNcIixcblwiS2V5bGVzc0Nvb2tpZVN5bmNcIixcbik7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/client/keyless-cookie-sync.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/keyless-actions.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/app-router/keyless-actions.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOrReadKeylessAction: () => (/* binding */ createOrReadKeylessAction),\n/* harmony export */   deleteKeylessAction: () => (/* binding */ deleteKeylessAction),\n/* harmony export */   detectKeylessEnvDriftAction: () => (/* binding */ detectKeylessEnvDriftAction),\n/* harmony export */   syncKeylessConfigAction: () => (/* binding */ syncKeylessConfigAction)\n/* harmony export */ });\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/headers */ \"(middleware)/./node_modules/next/dist/esm/api/headers.js\");\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/navigation */ \"(middleware)/./node_modules/next/dist/esm/api/navigation.react-server.js\");\n/* harmony import */ var _server_errorThrower__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../server/errorThrower */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/errorThrower.js\");\n/* harmony import */ var _server_headers_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../server/headers-utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/headers-utils.js\");\n/* harmony import */ var _server_keyless__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../server/keyless */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless.js\");\n/* harmony import */ var _utils_feature_flags__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/feature-flags */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/feature-flags.js\");\n\"use server\";\n\n\n\n\n\n\nconst keylessCookieConfig = {\n    secure: false,\n    httpOnly: false,\n    sameSite: \"lax\"\n};\nasync function syncKeylessConfigAction(args) {\n    const { claimUrl, publishableKey, secretKey, returnUrl } = args;\n    const cookieStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.cookies)();\n    const request = new Request(\"https://placeholder.com\", {\n        headers: await (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.headers)()\n    });\n    const keyless = await (0,_server_keyless__WEBPACK_IMPORTED_MODULE_2__.getKeylessCookieValue)((name)=>{\n        var _a;\n        return (_a = cookieStore.get(name)) == null ? void 0 : _a.value;\n    });\n    const pksMatch = (keyless == null ? void 0 : keyless.publishableKey) === publishableKey;\n    const sksMatch = (keyless == null ? void 0 : keyless.secretKey) === secretKey;\n    if (pksMatch && sksMatch) {\n        return;\n    }\n    cookieStore.set(await (0,_server_keyless__WEBPACK_IMPORTED_MODULE_2__.getKeylessCookieName)(), JSON.stringify({\n        claimUrl,\n        publishableKey,\n        secretKey\n    }), keylessCookieConfig);\n    if ((0,_server_headers_utils__WEBPACK_IMPORTED_MODULE_3__.detectClerkMiddleware)(request)) {\n        (0,next_navigation__WEBPACK_IMPORTED_MODULE_1__.redirect)(`/clerk-sync-keyless?returnUrl=${returnUrl}`, next_navigation__WEBPACK_IMPORTED_MODULE_1__.RedirectType.replace);\n        return;\n    }\n    return;\n}\nasync function createOrReadKeylessAction() {\n    if (!_utils_feature_flags__WEBPACK_IMPORTED_MODULE_4__.canUseKeyless) {\n        return null;\n    }\n    const result = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../server/keyless-node.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-node.js\")).then((m)=>m.createOrReadKeyless()).catch(()=>null);\n    if (!result) {\n        _server_errorThrower__WEBPACK_IMPORTED_MODULE_5__.errorThrower.throwMissingPublishableKeyError();\n        return null;\n    }\n    const { clerkDevelopmentCache, createKeylessModeMessage } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../server/keyless-log-cache.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-log-cache.js\"));\n    clerkDevelopmentCache == null ? void 0 : clerkDevelopmentCache.log({\n        cacheKey: result.publishableKey,\n        msg: createKeylessModeMessage(result)\n    });\n    const { claimUrl, publishableKey, secretKey, apiKeysUrl } = result;\n    void (await (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.cookies)()).set(await (0,_server_keyless__WEBPACK_IMPORTED_MODULE_2__.getKeylessCookieName)(), JSON.stringify({\n        claimUrl,\n        publishableKey,\n        secretKey\n    }), keylessCookieConfig);\n    return {\n        claimUrl,\n        publishableKey,\n        apiKeysUrl\n    };\n}\nasync function deleteKeylessAction() {\n    if (!_utils_feature_flags__WEBPACK_IMPORTED_MODULE_4__.canUseKeyless) {\n        return;\n    }\n    await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../server/keyless-node.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-node.js\")).then((m)=>m.removeKeyless()).catch(()=>{});\n    return;\n}\nasync function detectKeylessEnvDriftAction() {\n    if (!_utils_feature_flags__WEBPACK_IMPORTED_MODULE_4__.canUseKeyless) {\n        return;\n    }\n    try {\n        const { detectKeylessEnvDrift } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../server/keyless-telemetry.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-telemetry.js\"));\n        await detectKeylessEnvDrift();\n    } catch  {}\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vYXBwLXJvdXRlci9rZXlsZXNzLWFjdGlvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ2dEO0FBQ1M7QUFDSDtBQUNVO0FBQ2dCO0FBQ3pCO0FBQ3ZELE1BQU1TLHNCQUFzQjtJQUMxQkMsUUFBUTtJQUNSQyxVQUFVO0lBQ1ZDLFVBQVU7QUFDWjtBQUNBLGVBQWVDLHdCQUF3QkMsSUFBSTtJQUN6QyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsY0FBYyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRSxHQUFHSjtJQUMzRCxNQUFNSyxjQUFjLE1BQU1uQixxREFBT0E7SUFDakMsTUFBTW9CLFVBQVUsSUFBSUMsUUFBUSwyQkFBMkI7UUFBRXBCLFNBQVMsTUFBTUEscURBQU9BO0lBQUc7SUFDbEYsTUFBTXFCLFVBQVUsTUFBTWYsc0VBQXFCQSxDQUFDLENBQUNnQjtRQUMzQyxJQUFJQztRQUNKLE9BQU8sQ0FBQ0EsS0FBS0wsWUFBWU0sR0FBRyxDQUFDRixLQUFJLEtBQU0sT0FBTyxLQUFLLElBQUlDLEdBQUdFLEtBQUs7SUFDakU7SUFDQSxNQUFNQyxXQUFXLENBQUNMLFdBQVcsT0FBTyxLQUFLLElBQUlBLFFBQVFOLGNBQWMsTUFBTUE7SUFDekUsTUFBTVksV0FBVyxDQUFDTixXQUFXLE9BQU8sS0FBSyxJQUFJQSxRQUFRTCxTQUFTLE1BQU1BO0lBQ3BFLElBQUlVLFlBQVlDLFVBQVU7UUFDeEI7SUFDRjtJQUNBVCxZQUFZVSxHQUFHLENBQ2IsTUFBTXZCLHFFQUFvQkEsSUFDMUJ3QixLQUFLQyxTQUFTLENBQUM7UUFBRWhCO1FBQVVDO1FBQWdCQztJQUFVLElBQ3JEUjtJQUVGLElBQUlKLDRFQUFxQkEsQ0FBQ2UsVUFBVTtRQUNsQ2xCLHlEQUFRQSxDQUFDLENBQUMsOEJBQThCLEVBQUVnQixXQUFXLEVBQUVmLHlEQUFZQSxDQUFDNkIsT0FBTztRQUMzRTtJQUNGO0lBQ0E7QUFDRjtBQUNBLGVBQWVDO0lBQ2IsSUFBSSxDQUFDekIsK0RBQWFBLEVBQUU7UUFDbEIsT0FBTztJQUNUO0lBQ0EsTUFBTTBCLFNBQVMsTUFBTSxrTUFBbUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUNDLElBQU1BLEVBQUVDLG1CQUFtQixJQUFJQyxLQUFLLENBQUMsSUFBTTtJQUMxRyxJQUFJLENBQUNKLFFBQVE7UUFDWDlCLDhEQUFZQSxDQUFDbUMsK0JBQStCO1FBQzVDLE9BQU87SUFDVDtJQUNBLE1BQU0sRUFBRUMscUJBQXFCLEVBQUVDLHdCQUF3QixFQUFFLEdBQUcsTUFBTSw0TUFBd0M7SUFDMUdELHlCQUF5QixPQUFPLEtBQUssSUFBSUEsc0JBQXNCRSxHQUFHLENBQUM7UUFDakVDLFVBQVVULE9BQU9sQixjQUFjO1FBQy9CNEIsS0FBS0gseUJBQXlCUDtJQUNoQztJQUNBLE1BQU0sRUFBRW5CLFFBQVEsRUFBRUMsY0FBYyxFQUFFQyxTQUFTLEVBQUU0QixVQUFVLEVBQUUsR0FBR1g7SUFDNUQsS0FBSyxDQUFDLE1BQU1sQyxxREFBT0EsRUFBQyxFQUFHNkIsR0FBRyxDQUN4QixNQUFNdkIscUVBQW9CQSxJQUMxQndCLEtBQUtDLFNBQVMsQ0FBQztRQUFFaEI7UUFBVUM7UUFBZ0JDO0lBQVUsSUFDckRSO0lBRUYsT0FBTztRQUNMTTtRQUNBQztRQUNBNkI7SUFDRjtBQUNGO0FBQ0EsZUFBZUM7SUFDYixJQUFJLENBQUN0QywrREFBYUEsRUFBRTtRQUNsQjtJQUNGO0lBQ0EsTUFBTSxrTUFBbUMsQ0FBQzJCLElBQUksQ0FBQyxDQUFDQyxJQUFNQSxFQUFFVyxhQUFhLElBQUlULEtBQUssQ0FBQyxLQUMvRTtJQUNBO0FBQ0Y7QUFDQSxlQUFlVTtJQUNiLElBQUksQ0FBQ3hDLCtEQUFhQSxFQUFFO1FBQ2xCO0lBQ0Y7SUFDQSxJQUFJO1FBQ0YsTUFBTSxFQUFFeUMscUJBQXFCLEVBQUUsR0FBRyxNQUFNLDRNQUF3QztRQUNoRixNQUFNQTtJQUNSLEVBQUUsT0FBTSxDQUNSO0FBQ0Y7QUFNRSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxIUFxcRGVza3RvcFxcQmV5b25kX2NoYXRcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAY2xlcmtcXG5leHRqc1xcZGlzdFxcZXNtXFxhcHAtcm91dGVyXFxrZXlsZXNzLWFjdGlvbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc2VydmVyXCI7XG5pbXBvcnQgeyBjb29raWVzLCBoZWFkZXJzIH0gZnJvbSBcIm5leHQvaGVhZGVyc1wiO1xuaW1wb3J0IHsgcmVkaXJlY3QsIFJlZGlyZWN0VHlwZSB9IGZyb20gXCJuZXh0L25hdmlnYXRpb25cIjtcbmltcG9ydCB7IGVycm9yVGhyb3dlciB9IGZyb20gXCIuLi9zZXJ2ZXIvZXJyb3JUaHJvd2VyXCI7XG5pbXBvcnQgeyBkZXRlY3RDbGVya01pZGRsZXdhcmUgfSBmcm9tIFwiLi4vc2VydmVyL2hlYWRlcnMtdXRpbHNcIjtcbmltcG9ydCB7IGdldEtleWxlc3NDb29raWVOYW1lLCBnZXRLZXlsZXNzQ29va2llVmFsdWUgfSBmcm9tIFwiLi4vc2VydmVyL2tleWxlc3NcIjtcbmltcG9ydCB7IGNhblVzZUtleWxlc3MgfSBmcm9tIFwiLi4vdXRpbHMvZmVhdHVyZS1mbGFnc1wiO1xuY29uc3Qga2V5bGVzc0Nvb2tpZUNvbmZpZyA9IHtcbiAgc2VjdXJlOiBmYWxzZSxcbiAgaHR0cE9ubHk6IGZhbHNlLFxuICBzYW1lU2l0ZTogXCJsYXhcIlxufTtcbmFzeW5jIGZ1bmN0aW9uIHN5bmNLZXlsZXNzQ29uZmlnQWN0aW9uKGFyZ3MpIHtcbiAgY29uc3QgeyBjbGFpbVVybCwgcHVibGlzaGFibGVLZXksIHNlY3JldEtleSwgcmV0dXJuVXJsIH0gPSBhcmdzO1xuICBjb25zdCBjb29raWVTdG9yZSA9IGF3YWl0IGNvb2tpZXMoKTtcbiAgY29uc3QgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KFwiaHR0cHM6Ly9wbGFjZWhvbGRlci5jb21cIiwgeyBoZWFkZXJzOiBhd2FpdCBoZWFkZXJzKCkgfSk7XG4gIGNvbnN0IGtleWxlc3MgPSBhd2FpdCBnZXRLZXlsZXNzQ29va2llVmFsdWUoKG5hbWUpID0+IHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIChfYSA9IGNvb2tpZVN0b3JlLmdldChuYW1lKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnZhbHVlO1xuICB9KTtcbiAgY29uc3QgcGtzTWF0Y2ggPSAoa2V5bGVzcyA9PSBudWxsID8gdm9pZCAwIDoga2V5bGVzcy5wdWJsaXNoYWJsZUtleSkgPT09IHB1Ymxpc2hhYmxlS2V5O1xuICBjb25zdCBza3NNYXRjaCA9IChrZXlsZXNzID09IG51bGwgPyB2b2lkIDAgOiBrZXlsZXNzLnNlY3JldEtleSkgPT09IHNlY3JldEtleTtcbiAgaWYgKHBrc01hdGNoICYmIHNrc01hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvb2tpZVN0b3JlLnNldChcbiAgICBhd2FpdCBnZXRLZXlsZXNzQ29va2llTmFtZSgpLFxuICAgIEpTT04uc3RyaW5naWZ5KHsgY2xhaW1VcmwsIHB1Ymxpc2hhYmxlS2V5LCBzZWNyZXRLZXkgfSksXG4gICAga2V5bGVzc0Nvb2tpZUNvbmZpZ1xuICApO1xuICBpZiAoZGV0ZWN0Q2xlcmtNaWRkbGV3YXJlKHJlcXVlc3QpKSB7XG4gICAgcmVkaXJlY3QoYC9jbGVyay1zeW5jLWtleWxlc3M/cmV0dXJuVXJsPSR7cmV0dXJuVXJsfWAsIFJlZGlyZWN0VHlwZS5yZXBsYWNlKTtcbiAgICByZXR1cm47XG4gIH1cbiAgcmV0dXJuO1xufVxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlT3JSZWFkS2V5bGVzc0FjdGlvbigpIHtcbiAgaWYgKCFjYW5Vc2VLZXlsZXNzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaW1wb3J0KFwiLi4vc2VydmVyL2tleWxlc3Mtbm9kZS5qc1wiKS50aGVuKChtKSA9PiBtLmNyZWF0ZU9yUmVhZEtleWxlc3MoKSkuY2F0Y2goKCkgPT4gbnVsbCk7XG4gIGlmICghcmVzdWx0KSB7XG4gICAgZXJyb3JUaHJvd2VyLnRocm93TWlzc2luZ1B1Ymxpc2hhYmxlS2V5RXJyb3IoKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCB7IGNsZXJrRGV2ZWxvcG1lbnRDYWNoZSwgY3JlYXRlS2V5bGVzc01vZGVNZXNzYWdlIH0gPSBhd2FpdCBpbXBvcnQoXCIuLi9zZXJ2ZXIva2V5bGVzcy1sb2ctY2FjaGUuanNcIik7XG4gIGNsZXJrRGV2ZWxvcG1lbnRDYWNoZSA9PSBudWxsID8gdm9pZCAwIDogY2xlcmtEZXZlbG9wbWVudENhY2hlLmxvZyh7XG4gICAgY2FjaGVLZXk6IHJlc3VsdC5wdWJsaXNoYWJsZUtleSxcbiAgICBtc2c6IGNyZWF0ZUtleWxlc3NNb2RlTWVzc2FnZShyZXN1bHQpXG4gIH0pO1xuICBjb25zdCB7IGNsYWltVXJsLCBwdWJsaXNoYWJsZUtleSwgc2VjcmV0S2V5LCBhcGlLZXlzVXJsIH0gPSByZXN1bHQ7XG4gIHZvaWQgKGF3YWl0IGNvb2tpZXMoKSkuc2V0KFxuICAgIGF3YWl0IGdldEtleWxlc3NDb29raWVOYW1lKCksXG4gICAgSlNPTi5zdHJpbmdpZnkoeyBjbGFpbVVybCwgcHVibGlzaGFibGVLZXksIHNlY3JldEtleSB9KSxcbiAgICBrZXlsZXNzQ29va2llQ29uZmlnXG4gICk7XG4gIHJldHVybiB7XG4gICAgY2xhaW1VcmwsXG4gICAgcHVibGlzaGFibGVLZXksXG4gICAgYXBpS2V5c1VybFxuICB9O1xufVxuYXN5bmMgZnVuY3Rpb24gZGVsZXRlS2V5bGVzc0FjdGlvbigpIHtcbiAgaWYgKCFjYW5Vc2VLZXlsZXNzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGF3YWl0IGltcG9ydChcIi4uL3NlcnZlci9rZXlsZXNzLW5vZGUuanNcIikudGhlbigobSkgPT4gbS5yZW1vdmVLZXlsZXNzKCkpLmNhdGNoKCgpID0+IHtcbiAgfSk7XG4gIHJldHVybjtcbn1cbmFzeW5jIGZ1bmN0aW9uIGRldGVjdEtleWxlc3NFbnZEcmlmdEFjdGlvbigpIHtcbiAgaWYgKCFjYW5Vc2VLZXlsZXNzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRyeSB7XG4gICAgY29uc3QgeyBkZXRlY3RLZXlsZXNzRW52RHJpZnQgfSA9IGF3YWl0IGltcG9ydChcIi4uL3NlcnZlci9rZXlsZXNzLXRlbGVtZXRyeS5qc1wiKTtcbiAgICBhd2FpdCBkZXRlY3RLZXlsZXNzRW52RHJpZnQoKTtcbiAgfSBjYXRjaCB7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIGNyZWF0ZU9yUmVhZEtleWxlc3NBY3Rpb24sXG4gIGRlbGV0ZUtleWxlc3NBY3Rpb24sXG4gIGRldGVjdEtleWxlc3NFbnZEcmlmdEFjdGlvbixcbiAgc3luY0tleWxlc3NDb25maWdBY3Rpb25cbn07XG4iXSwibmFtZXMiOlsiY29va2llcyIsImhlYWRlcnMiLCJyZWRpcmVjdCIsIlJlZGlyZWN0VHlwZSIsImVycm9yVGhyb3dlciIsImRldGVjdENsZXJrTWlkZGxld2FyZSIsImdldEtleWxlc3NDb29raWVOYW1lIiwiZ2V0S2V5bGVzc0Nvb2tpZVZhbHVlIiwiY2FuVXNlS2V5bGVzcyIsImtleWxlc3NDb29raWVDb25maWciLCJzZWN1cmUiLCJodHRwT25seSIsInNhbWVTaXRlIiwic3luY0tleWxlc3NDb25maWdBY3Rpb24iLCJhcmdzIiwiY2xhaW1VcmwiLCJwdWJsaXNoYWJsZUtleSIsInNlY3JldEtleSIsInJldHVyblVybCIsImNvb2tpZVN0b3JlIiwicmVxdWVzdCIsIlJlcXVlc3QiLCJrZXlsZXNzIiwibmFtZSIsIl9hIiwiZ2V0IiwidmFsdWUiLCJwa3NNYXRjaCIsInNrc01hdGNoIiwic2V0IiwiSlNPTiIsInN0cmluZ2lmeSIsInJlcGxhY2UiLCJjcmVhdGVPclJlYWRLZXlsZXNzQWN0aW9uIiwicmVzdWx0IiwidGhlbiIsIm0iLCJjcmVhdGVPclJlYWRLZXlsZXNzIiwiY2F0Y2giLCJ0aHJvd01pc3NpbmdQdWJsaXNoYWJsZUtleUVycm9yIiwiY2xlcmtEZXZlbG9wbWVudENhY2hlIiwiY3JlYXRlS2V5bGVzc01vZGVNZXNzYWdlIiwibG9nIiwiY2FjaGVLZXkiLCJtc2ciLCJhcGlLZXlzVXJsIiwiZGVsZXRlS2V5bGVzc0FjdGlvbiIsInJlbW92ZUtleWxlc3MiLCJkZXRlY3RLZXlsZXNzRW52RHJpZnRBY3Rpb24iLCJkZXRlY3RLZXlsZXNzRW52RHJpZnQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/keyless-actions.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/ClerkProvider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/app-router/server/ClerkProvider.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClerkProvider: () => (/* binding */ ClerkProvider)\n/* harmony export */ });\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/headers */ \"(middleware)/./node_modules/next/dist/esm/api/headers.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(middleware)/./node_modules/next/dist/compiled/react/react.react-server.js\");\n/* harmony import */ var _client_boundary_PromisifiedAuthProvider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../client-boundary/PromisifiedAuthProvider */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/PromisifiedAuthProvider.js\");\n/* harmony import */ var _server_buildClerkProps__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../server/buildClerkProps */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/buildClerkProps.js\");\n/* harmony import */ var _utils_mergeNextClerkPropsWithEnv__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/mergeNextClerkPropsWithEnv */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/mergeNextClerkPropsWithEnv.js\");\n/* harmony import */ var _utils_sdk_versions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/sdk-versions */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/sdk-versions.js\");\n/* harmony import */ var _client_ClerkProvider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../client/ClerkProvider */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/client/ClerkProvider.js\");\n/* harmony import */ var _keyless_provider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./keyless-provider */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/keyless-provider.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/utils.js\");\n\n\n\n\n\n\n\n\n\n\nconst getDynamicClerkState = react__WEBPACK_IMPORTED_MODULE_1__.cache(async function getDynamicClerkState2() {\n  const request = await (0,_utils__WEBPACK_IMPORTED_MODULE_2__.buildRequestLike)();\n  const data = (0,_server_buildClerkProps__WEBPACK_IMPORTED_MODULE_3__.getDynamicAuthData)(request);\n  return data;\n});\nconst getNonceHeaders = react__WEBPACK_IMPORTED_MODULE_1__.cache(async function getNonceHeaders2() {\n  const headersList = await (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.headers)();\n  const nonce = headersList.get(\"X-Nonce\");\n  return nonce ? nonce : (\n    // Fallback to extracting from CSP header\n    (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getScriptNonceFromHeader)(headersList.get(\"Content-Security-Policy\") || \"\") || \"\"\n  );\n});\nasync function ClerkProvider(props) {\n  const { children, dynamic, ...rest } = props;\n  async function generateStatePromise() {\n    if (!dynamic) {\n      return Promise.resolve(null);\n    }\n    if (_utils_sdk_versions__WEBPACK_IMPORTED_MODULE_4__.isNext13) {\n      return Promise.resolve(await getDynamicClerkState());\n    }\n    return getDynamicClerkState();\n  }\n  async function generateNonce() {\n    if (!dynamic) {\n      return Promise.resolve(\"\");\n    }\n    if (_utils_sdk_versions__WEBPACK_IMPORTED_MODULE_4__.isNext13) {\n      return Promise.resolve(await getNonceHeaders());\n    }\n    return getNonceHeaders();\n  }\n  const propsWithEnvs = (0,_utils_mergeNextClerkPropsWithEnv__WEBPACK_IMPORTED_MODULE_5__.mergeNextClerkPropsWithEnv)({\n    ...rest\n  });\n  const { shouldRunAsKeyless, runningWithClaimedKeys } = await (0,_keyless_provider__WEBPACK_IMPORTED_MODULE_6__.getKeylessStatus)(propsWithEnvs);\n  let output;\n  try {\n    const detectKeylessEnvDrift = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../server/keyless-telemetry.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-telemetry.js\")).then(\n      (mod) => mod.detectKeylessEnvDrift\n    );\n    await detectKeylessEnvDrift();\n  } catch {\n  }\n  if (shouldRunAsKeyless) {\n    output = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\n      _keyless_provider__WEBPACK_IMPORTED_MODULE_6__.KeylessProvider,\n      {\n        rest: propsWithEnvs,\n        generateNonce,\n        generateStatePromise,\n        runningWithClaimedKeys\n      },\n      children\n    );\n  } else {\n    output = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\n      _client_ClerkProvider__WEBPACK_IMPORTED_MODULE_7__.ClientClerkProvider,\n      {\n        ...propsWithEnvs,\n        nonce: await generateNonce(),\n        initialState: await generateStatePromise()\n      },\n      children\n    );\n  }\n  if (dynamic) {\n    return (\n      // TODO: fix types so AuthObject is compatible with InitialState\n      /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_client_boundary_PromisifiedAuthProvider__WEBPACK_IMPORTED_MODULE_8__.PromisifiedAuthProvider, { authPromise: generateStatePromise() }, output)\n    );\n  }\n  return output;\n}\n\n//# sourceMappingURL=ClerkProvider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vYXBwLXJvdXRlci9zZXJ2ZXIvQ2xlcmtQcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQWlDO0FBQ007QUFDYjtBQUM4RDtBQUN0QjtBQUNrQjtBQUNoQztBQUNVO0FBQ1M7QUFDRjtBQUNyRSw2QkFBNkIsd0NBQVc7QUFDeEMsd0JBQXdCLHdEQUFnQjtBQUN4QyxlQUFlLDJFQUFrQjtBQUNqQztBQUNBLENBQUM7QUFDRCx3QkFBd0Isd0NBQVc7QUFDbkMsNEJBQTRCLHFEQUFPO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLElBQUksZ0VBQXdCO0FBQzVCO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsVUFBVSw2QkFBNkI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHlEQUFRO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHlEQUFRO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDZGQUEwQjtBQUNsRDtBQUNBLEdBQUc7QUFDSCxVQUFVLDZDQUE2QyxRQUFRLG1FQUFnQjtBQUMvRTtBQUNBO0FBQ0Esd0NBQXdDLCtNQUEyQztBQUNuRjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLDZCQUE2QixnREFBbUI7QUFDaEQsTUFBTSw4REFBZTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxJQUFJO0FBQ0osNkJBQTZCLGdEQUFtQjtBQUNoRCxNQUFNLHNFQUFtQjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsZ0RBQW1CLENBQUMsNkZBQXVCLElBQUkscUNBQXFDO0FBQzFHO0FBQ0E7QUFDQTtBQUNBO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxIUFxcRGVza3RvcFxcQmV5b25kX2NoYXRcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAY2xlcmtcXG5leHRqc1xcZGlzdFxcZXNtXFxhcHAtcm91dGVyXFxzZXJ2ZXJcXENsZXJrUHJvdmlkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vLi4vY2h1bmstQlVTWUEyQjQuanNcIjtcbmltcG9ydCB7IGhlYWRlcnMgfSBmcm9tIFwibmV4dC9oZWFkZXJzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBQcm9taXNpZmllZEF1dGhQcm92aWRlciB9IGZyb20gXCIuLi8uLi9jbGllbnQtYm91bmRhcnkvUHJvbWlzaWZpZWRBdXRoUHJvdmlkZXJcIjtcbmltcG9ydCB7IGdldER5bmFtaWNBdXRoRGF0YSB9IGZyb20gXCIuLi8uLi9zZXJ2ZXIvYnVpbGRDbGVya1Byb3BzXCI7XG5pbXBvcnQgeyBtZXJnZU5leHRDbGVya1Byb3BzV2l0aEVudiB9IGZyb20gXCIuLi8uLi91dGlscy9tZXJnZU5leHRDbGVya1Byb3BzV2l0aEVudlwiO1xuaW1wb3J0IHsgaXNOZXh0MTMgfSBmcm9tIFwiLi4vLi4vdXRpbHMvc2RrLXZlcnNpb25zXCI7XG5pbXBvcnQgeyBDbGllbnRDbGVya1Byb3ZpZGVyIH0gZnJvbSBcIi4uL2NsaWVudC9DbGVya1Byb3ZpZGVyXCI7XG5pbXBvcnQgeyBnZXRLZXlsZXNzU3RhdHVzLCBLZXlsZXNzUHJvdmlkZXIgfSBmcm9tIFwiLi9rZXlsZXNzLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBidWlsZFJlcXVlc3RMaWtlLCBnZXRTY3JpcHROb25jZUZyb21IZWFkZXIgfSBmcm9tIFwiLi91dGlsc1wiO1xuY29uc3QgZ2V0RHluYW1pY0NsZXJrU3RhdGUgPSBSZWFjdC5jYWNoZShhc3luYyBmdW5jdGlvbiBnZXREeW5hbWljQ2xlcmtTdGF0ZTIoKSB7XG4gIGNvbnN0IHJlcXVlc3QgPSBhd2FpdCBidWlsZFJlcXVlc3RMaWtlKCk7XG4gIGNvbnN0IGRhdGEgPSBnZXREeW5hbWljQXV0aERhdGEocmVxdWVzdCk7XG4gIHJldHVybiBkYXRhO1xufSk7XG5jb25zdCBnZXROb25jZUhlYWRlcnMgPSBSZWFjdC5jYWNoZShhc3luYyBmdW5jdGlvbiBnZXROb25jZUhlYWRlcnMyKCkge1xuICBjb25zdCBoZWFkZXJzTGlzdCA9IGF3YWl0IGhlYWRlcnMoKTtcbiAgY29uc3Qgbm9uY2UgPSBoZWFkZXJzTGlzdC5nZXQoXCJYLU5vbmNlXCIpO1xuICByZXR1cm4gbm9uY2UgPyBub25jZSA6IChcbiAgICAvLyBGYWxsYmFjayB0byBleHRyYWN0aW5nIGZyb20gQ1NQIGhlYWRlclxuICAgIGdldFNjcmlwdE5vbmNlRnJvbUhlYWRlcihoZWFkZXJzTGlzdC5nZXQoXCJDb250ZW50LVNlY3VyaXR5LVBvbGljeVwiKSB8fCBcIlwiKSB8fCBcIlwiXG4gICk7XG59KTtcbmFzeW5jIGZ1bmN0aW9uIENsZXJrUHJvdmlkZXIocHJvcHMpIHtcbiAgY29uc3QgeyBjaGlsZHJlbiwgZHluYW1pYywgLi4ucmVzdCB9ID0gcHJvcHM7XG4gIGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlU3RhdGVQcm9taXNlKCkge1xuICAgIGlmICghZHluYW1pYykge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICB9XG4gICAgaWYgKGlzTmV4dDEzKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGF3YWl0IGdldER5bmFtaWNDbGVya1N0YXRlKCkpO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0RHluYW1pY0NsZXJrU3RhdGUoKTtcbiAgfVxuICBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZU5vbmNlKCkge1xuICAgIGlmICghZHluYW1pYykge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShcIlwiKTtcbiAgICB9XG4gICAgaWYgKGlzTmV4dDEzKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGF3YWl0IGdldE5vbmNlSGVhZGVycygpKTtcbiAgICB9XG4gICAgcmV0dXJuIGdldE5vbmNlSGVhZGVycygpO1xuICB9XG4gIGNvbnN0IHByb3BzV2l0aEVudnMgPSBtZXJnZU5leHRDbGVya1Byb3BzV2l0aEVudih7XG4gICAgLi4ucmVzdFxuICB9KTtcbiAgY29uc3QgeyBzaG91bGRSdW5Bc0tleWxlc3MsIHJ1bm5pbmdXaXRoQ2xhaW1lZEtleXMgfSA9IGF3YWl0IGdldEtleWxlc3NTdGF0dXMocHJvcHNXaXRoRW52cyk7XG4gIGxldCBvdXRwdXQ7XG4gIHRyeSB7XG4gICAgY29uc3QgZGV0ZWN0S2V5bGVzc0VudkRyaWZ0ID0gYXdhaXQgaW1wb3J0KFwiLi4vLi4vc2VydmVyL2tleWxlc3MtdGVsZW1ldHJ5LmpzXCIpLnRoZW4oXG4gICAgICAobW9kKSA9PiBtb2QuZGV0ZWN0S2V5bGVzc0VudkRyaWZ0XG4gICAgKTtcbiAgICBhd2FpdCBkZXRlY3RLZXlsZXNzRW52RHJpZnQoKTtcbiAgfSBjYXRjaCB7XG4gIH1cbiAgaWYgKHNob3VsZFJ1bkFzS2V5bGVzcykge1xuICAgIG91dHB1dCA9IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgS2V5bGVzc1Byb3ZpZGVyLFxuICAgICAge1xuICAgICAgICByZXN0OiBwcm9wc1dpdGhFbnZzLFxuICAgICAgICBnZW5lcmF0ZU5vbmNlLFxuICAgICAgICBnZW5lcmF0ZVN0YXRlUHJvbWlzZSxcbiAgICAgICAgcnVubmluZ1dpdGhDbGFpbWVkS2V5c1xuICAgICAgfSxcbiAgICAgIGNoaWxkcmVuXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIENsaWVudENsZXJrUHJvdmlkZXIsXG4gICAgICB7XG4gICAgICAgIC4uLnByb3BzV2l0aEVudnMsXG4gICAgICAgIG5vbmNlOiBhd2FpdCBnZW5lcmF0ZU5vbmNlKCksXG4gICAgICAgIGluaXRpYWxTdGF0ZTogYXdhaXQgZ2VuZXJhdGVTdGF0ZVByb21pc2UoKVxuICAgICAgfSxcbiAgICAgIGNoaWxkcmVuXG4gICAgKTtcbiAgfVxuICBpZiAoZHluYW1pYykge1xuICAgIHJldHVybiAoXG4gICAgICAvLyBUT0RPOiBmaXggdHlwZXMgc28gQXV0aE9iamVjdCBpcyBjb21wYXRpYmxlIHdpdGggSW5pdGlhbFN0YXRlXG4gICAgICAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChQcm9taXNpZmllZEF1dGhQcm92aWRlciwgeyBhdXRoUHJvbWlzZTogZ2VuZXJhdGVTdGF0ZVByb21pc2UoKSB9LCBvdXRwdXQpXG4gICAgKTtcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufVxuZXhwb3J0IHtcbiAgQ2xlcmtQcm92aWRlclxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNsZXJrUHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/ClerkProvider.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/auth.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/app-router/server/auth.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auth: () => (/* binding */ auth)\n/* harmony export */ });\n/* harmony import */ var _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/backend/internal */ \"(middleware)/./node_modules/@clerk/backend/dist/internal.mjs\");\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/navigation */ \"(middleware)/./node_modules/next/dist/esm/api/navigation.react-server.js\");\n/* harmony import */ var _server_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../server/constants */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/constants.js\");\n/* harmony import */ var _server_createGetAuth__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../server/createGetAuth */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/createGetAuth.js\");\n/* harmony import */ var _server_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../server/errors */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/errors.js\");\n/* harmony import */ var _server_headers_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../server/headers-utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/headers-utils.js\");\n/* harmony import */ var _server_nextErrors__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../server/nextErrors */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/nextErrors.js\");\n/* harmony import */ var _server_protect__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../server/protect */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/protect.js\");\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../server/utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/utils.js\");\n/* harmony import */ var _utils_sdk_versions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/sdk-versions */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/sdk-versions.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/utils.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nconst auth = async (options) => {\n  var _a;\n  __webpack_require__(/*! server-only */ \"(middleware)/./node_modules/next/dist/compiled/server-only/empty.js\");\n  const request = await (0,_utils__WEBPACK_IMPORTED_MODULE_2__.buildRequestLike)();\n  const stepsBasedOnSrcDirectory = async () => {\n    if (_utils_sdk_versions__WEBPACK_IMPORTED_MODULE_3__.isNextWithUnstableServerActions) {\n      return [];\n    }\n    try {\n      const isSrcAppDir = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../server/fs/middleware-location.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/fs/middleware-location.js\")).then((m) => m.hasSrcAppDir());\n      return [`Your Middleware exists at ./${isSrcAppDir ? \"src/\" : \"\"}middleware.(ts|js)`];\n    } catch {\n      return [];\n    }\n  };\n  const authObject = await (0,_server_createGetAuth__WEBPACK_IMPORTED_MODULE_4__.createAsyncGetAuth)({\n    debugLoggerName: \"auth()\",\n    noAuthStatusMessage: (0,_server_errors__WEBPACK_IMPORTED_MODULE_5__.authAuthHeaderMissing)(\"auth\", await stepsBasedOnSrcDirectory())\n  })(request, {\n    treatPendingAsSignedOut: options == null ? void 0 : options.treatPendingAsSignedOut,\n    acceptsToken: (_a = options == null ? void 0 : options.acceptsToken) != null ? _a : _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.TokenType.SessionToken\n  });\n  const clerkUrl = (0,_server_headers_utils__WEBPACK_IMPORTED_MODULE_6__.getAuthKeyFromRequest)(request, \"ClerkUrl\");\n  const createRedirectForRequest = (...args) => {\n    const { returnBackUrl } = args[0] || {};\n    const clerkRequest = (0,_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.createClerkRequest)(request);\n    const devBrowserToken = clerkRequest.clerkUrl.searchParams.get(_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.constants.QueryParameters.DevBrowser) || clerkRequest.cookies.get(_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.constants.Cookies.DevBrowser);\n    const encryptedRequestData = (0,_server_headers_utils__WEBPACK_IMPORTED_MODULE_6__.getHeader)(request, _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.ClerkRequestData);\n    const decryptedRequestData = (0,_server_utils__WEBPACK_IMPORTED_MODULE_7__.decryptClerkRequestData)(encryptedRequestData);\n    return [\n      (0,_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.createRedirect)({\n        redirectAdapter: next_navigation__WEBPACK_IMPORTED_MODULE_1__.redirect,\n        devBrowserToken,\n        baseUrl: clerkRequest.clerkUrl.toString(),\n        publishableKey: decryptedRequestData.publishableKey || _server_constants__WEBPACK_IMPORTED_MODULE_8__.PUBLISHABLE_KEY,\n        signInUrl: decryptedRequestData.signInUrl || _server_constants__WEBPACK_IMPORTED_MODULE_8__.SIGN_IN_URL,\n        signUpUrl: decryptedRequestData.signUpUrl || _server_constants__WEBPACK_IMPORTED_MODULE_8__.SIGN_UP_URL,\n        sessionStatus: authObject.tokenType === _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.TokenType.SessionToken ? authObject.sessionStatus : null\n      }),\n      returnBackUrl === null ? \"\" : returnBackUrl || (clerkUrl == null ? void 0 : clerkUrl.toString())\n    ];\n  };\n  const redirectToSignIn = (opts = {}) => {\n    const [r, returnBackUrl] = createRedirectForRequest(opts);\n    return r.redirectToSignIn({\n      returnBackUrl\n    });\n  };\n  const redirectToSignUp = (opts = {}) => {\n    const [r, returnBackUrl] = createRedirectForRequest(opts);\n    return r.redirectToSignUp({\n      returnBackUrl\n    });\n  };\n  if (authObject.tokenType === _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.TokenType.SessionToken) {\n    return Object.assign(authObject, { redirectToSignIn, redirectToSignUp });\n  }\n  return authObject;\n};\nauth.protect = async (...args) => {\n  var _a, _b;\n  __webpack_require__(/*! server-only */ \"(middleware)/./node_modules/next/dist/compiled/server-only/empty.js\");\n  const request = await (0,_utils__WEBPACK_IMPORTED_MODULE_2__.buildRequestLike)();\n  const requestedToken = ((_a = args == null ? void 0 : args[0]) == null ? void 0 : _a.token) || ((_b = args == null ? void 0 : args[1]) == null ? void 0 : _b.token) || _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.TokenType.SessionToken;\n  const authObject = await auth({ acceptsToken: requestedToken });\n  const protect = (0,_server_protect__WEBPACK_IMPORTED_MODULE_9__.createProtect)({\n    request,\n    authObject,\n    redirectToSignIn: authObject.redirectToSignIn,\n    notFound: next_navigation__WEBPACK_IMPORTED_MODULE_1__.notFound,\n    redirect: next_navigation__WEBPACK_IMPORTED_MODULE_1__.redirect,\n    unauthorized: _server_nextErrors__WEBPACK_IMPORTED_MODULE_10__.unauthorized\n  });\n  return protect(...args);\n};\n\n//# sourceMappingURL=auth.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vYXBwLXJvdXRlci9zZXJ2ZXIvYXV0aC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBaUM7QUFDa0U7QUFDOUM7QUFDOEI7QUFDbkI7QUFDSjtBQUNrQjtBQUN2QjtBQUNGO0FBQ1E7QUFDYztBQUNoQztBQUMzQztBQUNBO0FBQ0EsRUFBRSxtQkFBTyxDQUFDLHdGQUFhO0FBQ3ZCLHdCQUF3Qix3REFBZ0I7QUFDeEM7QUFDQSxRQUFRLGdGQUErQjtBQUN2QztBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MseU5BQWdEO0FBQ2hGLDZDQUE2QywwQkFBMEI7QUFDdkUsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix5RUFBa0I7QUFDN0M7QUFDQSx5QkFBeUIscUVBQXFCO0FBQzlDLEdBQUc7QUFDSDtBQUNBLHdGQUF3Riw4REFBUztBQUNqRyxHQUFHO0FBQ0gsbUJBQW1CLDRFQUFxQjtBQUN4QztBQUNBLFlBQVksZ0JBQWdCO0FBQzVCLHlCQUF5QiwyRUFBa0I7QUFDM0MsbUVBQW1FLDhEQUFTLHlEQUF5RCw4REFBUztBQUM5SSxpQ0FBaUMsZ0VBQVMsVUFBVSw4REFBUztBQUM3RCxpQ0FBaUMsc0VBQXVCO0FBQ3hEO0FBQ0EsTUFBTSx1RUFBYztBQUNwQix5QkFBeUIscURBQVE7QUFDakM7QUFDQTtBQUNBLCtEQUErRCw4REFBZTtBQUM5RSxxREFBcUQsMERBQVc7QUFDaEUscURBQXFELDBEQUFXO0FBQ2hFLGdEQUFnRCw4REFBUztBQUN6RCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSwrQkFBK0IsOERBQVM7QUFDeEMsdUNBQXVDLG9DQUFvQztBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxtQkFBTyxDQUFDLHdGQUFhO0FBQ3ZCLHdCQUF3Qix3REFBZ0I7QUFDeEMseUtBQXlLLDhEQUFTO0FBQ2xMLGtDQUFrQyw4QkFBOEI7QUFDaEUsa0JBQWtCLDhEQUFhO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWixZQUFZO0FBQ1osZ0JBQWdCO0FBQ2hCLEdBQUc7QUFDSDtBQUNBO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxIUFxcRGVza3RvcFxcQmV5b25kX2NoYXRcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAY2xlcmtcXG5leHRqc1xcZGlzdFxcZXNtXFxhcHAtcm91dGVyXFxzZXJ2ZXJcXGF1dGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vLi4vY2h1bmstQlVTWUEyQjQuanNcIjtcbmltcG9ydCB7IGNvbnN0YW50cywgY3JlYXRlQ2xlcmtSZXF1ZXN0LCBjcmVhdGVSZWRpcmVjdCwgVG9rZW5UeXBlIH0gZnJvbSBcIkBjbGVyay9iYWNrZW5kL2ludGVybmFsXCI7XG5pbXBvcnQgeyBub3RGb3VuZCwgcmVkaXJlY3QgfSBmcm9tIFwibmV4dC9uYXZpZ2F0aW9uXCI7XG5pbXBvcnQgeyBQVUJMSVNIQUJMRV9LRVksIFNJR05fSU5fVVJMLCBTSUdOX1VQX1VSTCB9IGZyb20gXCIuLi8uLi9zZXJ2ZXIvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBjcmVhdGVBc3luY0dldEF1dGggfSBmcm9tIFwiLi4vLi4vc2VydmVyL2NyZWF0ZUdldEF1dGhcIjtcbmltcG9ydCB7IGF1dGhBdXRoSGVhZGVyTWlzc2luZyB9IGZyb20gXCIuLi8uLi9zZXJ2ZXIvZXJyb3JzXCI7XG5pbXBvcnQgeyBnZXRBdXRoS2V5RnJvbVJlcXVlc3QsIGdldEhlYWRlciB9IGZyb20gXCIuLi8uLi9zZXJ2ZXIvaGVhZGVycy11dGlsc1wiO1xuaW1wb3J0IHsgdW5hdXRob3JpemVkIH0gZnJvbSBcIi4uLy4uL3NlcnZlci9uZXh0RXJyb3JzXCI7XG5pbXBvcnQgeyBjcmVhdGVQcm90ZWN0IH0gZnJvbSBcIi4uLy4uL3NlcnZlci9wcm90ZWN0XCI7XG5pbXBvcnQgeyBkZWNyeXB0Q2xlcmtSZXF1ZXN0RGF0YSB9IGZyb20gXCIuLi8uLi9zZXJ2ZXIvdXRpbHNcIjtcbmltcG9ydCB7IGlzTmV4dFdpdGhVbnN0YWJsZVNlcnZlckFjdGlvbnMgfSBmcm9tIFwiLi4vLi4vdXRpbHMvc2RrLXZlcnNpb25zXCI7XG5pbXBvcnQgeyBidWlsZFJlcXVlc3RMaWtlIH0gZnJvbSBcIi4vdXRpbHNcIjtcbmNvbnN0IGF1dGggPSBhc3luYyAob3B0aW9ucykgPT4ge1xuICB2YXIgX2E7XG4gIHJlcXVpcmUoXCJzZXJ2ZXItb25seVwiKTtcbiAgY29uc3QgcmVxdWVzdCA9IGF3YWl0IGJ1aWxkUmVxdWVzdExpa2UoKTtcbiAgY29uc3Qgc3RlcHNCYXNlZE9uU3JjRGlyZWN0b3J5ID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmIChpc05leHRXaXRoVW5zdGFibGVTZXJ2ZXJBY3Rpb25zKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBjb25zdCBpc1NyY0FwcERpciA9IGF3YWl0IGltcG9ydChcIi4uLy4uL3NlcnZlci9mcy9taWRkbGV3YXJlLWxvY2F0aW9uLmpzXCIpLnRoZW4oKG0pID0+IG0uaGFzU3JjQXBwRGlyKCkpO1xuICAgICAgcmV0dXJuIFtgWW91ciBNaWRkbGV3YXJlIGV4aXN0cyBhdCAuLyR7aXNTcmNBcHBEaXIgPyBcInNyYy9cIiA6IFwiXCJ9bWlkZGxld2FyZS4odHN8anMpYF07XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9O1xuICBjb25zdCBhdXRoT2JqZWN0ID0gYXdhaXQgY3JlYXRlQXN5bmNHZXRBdXRoKHtcbiAgICBkZWJ1Z0xvZ2dlck5hbWU6IFwiYXV0aCgpXCIsXG4gICAgbm9BdXRoU3RhdHVzTWVzc2FnZTogYXV0aEF1dGhIZWFkZXJNaXNzaW5nKFwiYXV0aFwiLCBhd2FpdCBzdGVwc0Jhc2VkT25TcmNEaXJlY3RvcnkoKSlcbiAgfSkocmVxdWVzdCwge1xuICAgIHRyZWF0UGVuZGluZ0FzU2lnbmVkT3V0OiBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLnRyZWF0UGVuZGluZ0FzU2lnbmVkT3V0LFxuICAgIGFjY2VwdHNUb2tlbjogKF9hID0gb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5hY2NlcHRzVG9rZW4pICE9IG51bGwgPyBfYSA6IFRva2VuVHlwZS5TZXNzaW9uVG9rZW5cbiAgfSk7XG4gIGNvbnN0IGNsZXJrVXJsID0gZ2V0QXV0aEtleUZyb21SZXF1ZXN0KHJlcXVlc3QsIFwiQ2xlcmtVcmxcIik7XG4gIGNvbnN0IGNyZWF0ZVJlZGlyZWN0Rm9yUmVxdWVzdCA9ICguLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgeyByZXR1cm5CYWNrVXJsIH0gPSBhcmdzWzBdIHx8IHt9O1xuICAgIGNvbnN0IGNsZXJrUmVxdWVzdCA9IGNyZWF0ZUNsZXJrUmVxdWVzdChyZXF1ZXN0KTtcbiAgICBjb25zdCBkZXZCcm93c2VyVG9rZW4gPSBjbGVya1JlcXVlc3QuY2xlcmtVcmwuc2VhcmNoUGFyYW1zLmdldChjb25zdGFudHMuUXVlcnlQYXJhbWV0ZXJzLkRldkJyb3dzZXIpIHx8IGNsZXJrUmVxdWVzdC5jb29raWVzLmdldChjb25zdGFudHMuQ29va2llcy5EZXZCcm93c2VyKTtcbiAgICBjb25zdCBlbmNyeXB0ZWRSZXF1ZXN0RGF0YSA9IGdldEhlYWRlcihyZXF1ZXN0LCBjb25zdGFudHMuSGVhZGVycy5DbGVya1JlcXVlc3REYXRhKTtcbiAgICBjb25zdCBkZWNyeXB0ZWRSZXF1ZXN0RGF0YSA9IGRlY3J5cHRDbGVya1JlcXVlc3REYXRhKGVuY3J5cHRlZFJlcXVlc3REYXRhKTtcbiAgICByZXR1cm4gW1xuICAgICAgY3JlYXRlUmVkaXJlY3Qoe1xuICAgICAgICByZWRpcmVjdEFkYXB0ZXI6IHJlZGlyZWN0LFxuICAgICAgICBkZXZCcm93c2VyVG9rZW4sXG4gICAgICAgIGJhc2VVcmw6IGNsZXJrUmVxdWVzdC5jbGVya1VybC50b1N0cmluZygpLFxuICAgICAgICBwdWJsaXNoYWJsZUtleTogZGVjcnlwdGVkUmVxdWVzdERhdGEucHVibGlzaGFibGVLZXkgfHwgUFVCTElTSEFCTEVfS0VZLFxuICAgICAgICBzaWduSW5Vcmw6IGRlY3J5cHRlZFJlcXVlc3REYXRhLnNpZ25JblVybCB8fCBTSUdOX0lOX1VSTCxcbiAgICAgICAgc2lnblVwVXJsOiBkZWNyeXB0ZWRSZXF1ZXN0RGF0YS5zaWduVXBVcmwgfHwgU0lHTl9VUF9VUkwsXG4gICAgICAgIHNlc3Npb25TdGF0dXM6IGF1dGhPYmplY3QudG9rZW5UeXBlID09PSBUb2tlblR5cGUuU2Vzc2lvblRva2VuID8gYXV0aE9iamVjdC5zZXNzaW9uU3RhdHVzIDogbnVsbFxuICAgICAgfSksXG4gICAgICByZXR1cm5CYWNrVXJsID09PSBudWxsID8gXCJcIiA6IHJldHVybkJhY2tVcmwgfHwgKGNsZXJrVXJsID09IG51bGwgPyB2b2lkIDAgOiBjbGVya1VybC50b1N0cmluZygpKVxuICAgIF07XG4gIH07XG4gIGNvbnN0IHJlZGlyZWN0VG9TaWduSW4gPSAob3B0cyA9IHt9KSA9PiB7XG4gICAgY29uc3QgW3IsIHJldHVybkJhY2tVcmxdID0gY3JlYXRlUmVkaXJlY3RGb3JSZXF1ZXN0KG9wdHMpO1xuICAgIHJldHVybiByLnJlZGlyZWN0VG9TaWduSW4oe1xuICAgICAgcmV0dXJuQmFja1VybFxuICAgIH0pO1xuICB9O1xuICBjb25zdCByZWRpcmVjdFRvU2lnblVwID0gKG9wdHMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IFtyLCByZXR1cm5CYWNrVXJsXSA9IGNyZWF0ZVJlZGlyZWN0Rm9yUmVxdWVzdChvcHRzKTtcbiAgICByZXR1cm4gci5yZWRpcmVjdFRvU2lnblVwKHtcbiAgICAgIHJldHVybkJhY2tVcmxcbiAgICB9KTtcbiAgfTtcbiAgaWYgKGF1dGhPYmplY3QudG9rZW5UeXBlID09PSBUb2tlblR5cGUuU2Vzc2lvblRva2VuKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYXV0aE9iamVjdCwgeyByZWRpcmVjdFRvU2lnbkluLCByZWRpcmVjdFRvU2lnblVwIH0pO1xuICB9XG4gIHJldHVybiBhdXRoT2JqZWN0O1xufTtcbmF1dGgucHJvdGVjdCA9IGFzeW5jICguLi5hcmdzKSA9PiB7XG4gIHZhciBfYSwgX2I7XG4gIHJlcXVpcmUoXCJzZXJ2ZXItb25seVwiKTtcbiAgY29uc3QgcmVxdWVzdCA9IGF3YWl0IGJ1aWxkUmVxdWVzdExpa2UoKTtcbiAgY29uc3QgcmVxdWVzdGVkVG9rZW4gPSAoKF9hID0gYXJncyA9PSBudWxsID8gdm9pZCAwIDogYXJnc1swXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnRva2VuKSB8fCAoKF9iID0gYXJncyA9PSBudWxsID8gdm9pZCAwIDogYXJnc1sxXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLnRva2VuKSB8fCBUb2tlblR5cGUuU2Vzc2lvblRva2VuO1xuICBjb25zdCBhdXRoT2JqZWN0ID0gYXdhaXQgYXV0aCh7IGFjY2VwdHNUb2tlbjogcmVxdWVzdGVkVG9rZW4gfSk7XG4gIGNvbnN0IHByb3RlY3QgPSBjcmVhdGVQcm90ZWN0KHtcbiAgICByZXF1ZXN0LFxuICAgIGF1dGhPYmplY3QsXG4gICAgcmVkaXJlY3RUb1NpZ25JbjogYXV0aE9iamVjdC5yZWRpcmVjdFRvU2lnbkluLFxuICAgIG5vdEZvdW5kLFxuICAgIHJlZGlyZWN0LFxuICAgIHVuYXV0aG9yaXplZFxuICB9KTtcbiAgcmV0dXJuIHByb3RlY3QoLi4uYXJncyk7XG59O1xuZXhwb3J0IHtcbiAgYXV0aFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/auth.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/controlComponents.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/app-router/server/controlComponents.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Protect: () => (/* binding */ Protect),\n/* harmony export */   SignedIn: () => (/* binding */ SignedIn),\n/* harmony export */   SignedOut: () => (/* binding */ SignedOut)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(middleware)/./node_modules/next/dist/compiled/react/react.react-server.js\");\n/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./auth */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/auth.js\");\n\n\n\nasync function SignedIn(props) {\n  const { children } = props;\n  const { userId } = await (0,_auth__WEBPACK_IMPORTED_MODULE_1__.auth)({ treatPendingAsSignedOut: props.treatPendingAsSignedOut });\n  return userId ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children) : null;\n}\nasync function SignedOut(props) {\n  const { children } = props;\n  const { userId } = await (0,_auth__WEBPACK_IMPORTED_MODULE_1__.auth)({ treatPendingAsSignedOut: props.treatPendingAsSignedOut });\n  return userId ? null : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n}\nasync function Protect(props) {\n  const { children, fallback, ...restAuthorizedParams } = props;\n  const { has, userId } = await (0,_auth__WEBPACK_IMPORTED_MODULE_1__.auth)({ treatPendingAsSignedOut: props.treatPendingAsSignedOut });\n  const unauthorized = fallback ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, fallback) : null;\n  const authorized = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n  if (!userId) {\n    return unauthorized;\n  }\n  if (typeof restAuthorizedParams.condition === \"function\") {\n    return restAuthorizedParams.condition(has) ? authorized : unauthorized;\n  }\n  if (restAuthorizedParams.role || restAuthorizedParams.permission || restAuthorizedParams.feature || restAuthorizedParams.plan) {\n    return has(restAuthorizedParams) ? authorized : unauthorized;\n  }\n  return authorized;\n}\n\n//# sourceMappingURL=controlComponents.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vYXBwLXJvdXRlci9zZXJ2ZXIvY29udHJvbENvbXBvbmVudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBaUM7QUFDUDtBQUNJO0FBQzlCO0FBQ0EsVUFBVSxXQUFXO0FBQ3JCLFVBQVUsU0FBUyxRQUFRLDJDQUFJLEdBQUcsd0RBQXdEO0FBQzFGLGtDQUFrQyxnREFBbUIsQ0FBQywyQ0FBYztBQUNwRTtBQUNBO0FBQ0EsVUFBVSxXQUFXO0FBQ3JCLFVBQVUsU0FBUyxRQUFRLDJDQUFJLEdBQUcsd0RBQXdEO0FBQzFGLHlDQUF5QyxnREFBbUIsQ0FBQywyQ0FBYztBQUMzRTtBQUNBO0FBQ0EsVUFBVSw4Q0FBOEM7QUFDeEQsVUFBVSxjQUFjLFFBQVEsMkNBQUksR0FBRyx3REFBd0Q7QUFDL0Ysa0RBQWtELGdEQUFtQixDQUFDLDJDQUFjO0FBQ3BGLHFDQUFxQyxnREFBbUIsQ0FBQywyQ0FBYztBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0U7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxIUFxcRGVza3RvcFxcQmV5b25kX2NoYXRcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAY2xlcmtcXG5leHRqc1xcZGlzdFxcZXNtXFxhcHAtcm91dGVyXFxzZXJ2ZXJcXGNvbnRyb2xDb21wb25lbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uLy4uL2NodW5rLUJVU1lBMkI0LmpzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBhdXRoIH0gZnJvbSBcIi4vYXV0aFwiO1xuYXN5bmMgZnVuY3Rpb24gU2lnbmVkSW4ocHJvcHMpIHtcbiAgY29uc3QgeyBjaGlsZHJlbiB9ID0gcHJvcHM7XG4gIGNvbnN0IHsgdXNlcklkIH0gPSBhd2FpdCBhdXRoKHsgdHJlYXRQZW5kaW5nQXNTaWduZWRPdXQ6IHByb3BzLnRyZWF0UGVuZGluZ0FzU2lnbmVkT3V0IH0pO1xuICByZXR1cm4gdXNlcklkID8gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGNoaWxkcmVuKSA6IG51bGw7XG59XG5hc3luYyBmdW5jdGlvbiBTaWduZWRPdXQocHJvcHMpIHtcbiAgY29uc3QgeyBjaGlsZHJlbiB9ID0gcHJvcHM7XG4gIGNvbnN0IHsgdXNlcklkIH0gPSBhd2FpdCBhdXRoKHsgdHJlYXRQZW5kaW5nQXNTaWduZWRPdXQ6IHByb3BzLnRyZWF0UGVuZGluZ0FzU2lnbmVkT3V0IH0pO1xuICByZXR1cm4gdXNlcklkID8gbnVsbCA6IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBjaGlsZHJlbik7XG59XG5hc3luYyBmdW5jdGlvbiBQcm90ZWN0KHByb3BzKSB7XG4gIGNvbnN0IHsgY2hpbGRyZW4sIGZhbGxiYWNrLCAuLi5yZXN0QXV0aG9yaXplZFBhcmFtcyB9ID0gcHJvcHM7XG4gIGNvbnN0IHsgaGFzLCB1c2VySWQgfSA9IGF3YWl0IGF1dGgoeyB0cmVhdFBlbmRpbmdBc1NpZ25lZE91dDogcHJvcHMudHJlYXRQZW5kaW5nQXNTaWduZWRPdXQgfSk7XG4gIGNvbnN0IHVuYXV0aG9yaXplZCA9IGZhbGxiYWNrID8gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGZhbGxiYWNrKSA6IG51bGw7XG4gIGNvbnN0IGF1dGhvcml6ZWQgPSAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgY2hpbGRyZW4pO1xuICBpZiAoIXVzZXJJZCkge1xuICAgIHJldHVybiB1bmF1dGhvcml6ZWQ7XG4gIH1cbiAgaWYgKHR5cGVvZiByZXN0QXV0aG9yaXplZFBhcmFtcy5jb25kaXRpb24gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiByZXN0QXV0aG9yaXplZFBhcmFtcy5jb25kaXRpb24oaGFzKSA/IGF1dGhvcml6ZWQgOiB1bmF1dGhvcml6ZWQ7XG4gIH1cbiAgaWYgKHJlc3RBdXRob3JpemVkUGFyYW1zLnJvbGUgfHwgcmVzdEF1dGhvcml6ZWRQYXJhbXMucGVybWlzc2lvbiB8fCByZXN0QXV0aG9yaXplZFBhcmFtcy5mZWF0dXJlIHx8IHJlc3RBdXRob3JpemVkUGFyYW1zLnBsYW4pIHtcbiAgICByZXR1cm4gaGFzKHJlc3RBdXRob3JpemVkUGFyYW1zKSA/IGF1dGhvcml6ZWQgOiB1bmF1dGhvcml6ZWQ7XG4gIH1cbiAgcmV0dXJuIGF1dGhvcml6ZWQ7XG59XG5leHBvcnQge1xuICBQcm90ZWN0LFxuICBTaWduZWRJbixcbiAgU2lnbmVkT3V0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udHJvbENvbXBvbmVudHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/controlComponents.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/keyless-provider.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/app-router/server/keyless-provider.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeylessProvider: () => (/* binding */ KeylessProvider),\n/* harmony export */   getKeylessStatus: () => (/* binding */ getKeylessStatus)\n/* harmony export */ });\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/headers */ \"(middleware)/./node_modules/next/dist/esm/api/headers.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(middleware)/./node_modules/next/dist/compiled/react/react.react-server.js\");\n/* harmony import */ var _server_createClerkClient__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../server/createClerkClient */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/createClerkClient.js\");\n/* harmony import */ var _server_keyless_custom_headers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../server/keyless-custom-headers */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-custom-headers.js\");\n/* harmony import */ var _utils_feature_flags__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/feature-flags */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/feature-flags.js\");\n/* harmony import */ var _utils_mergeNextClerkPropsWithEnv__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/mergeNextClerkPropsWithEnv */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/mergeNextClerkPropsWithEnv.js\");\n/* harmony import */ var _utils_only_try__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utils/only-try */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/only-try.js\");\n/* harmony import */ var _client_ClerkProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../client/ClerkProvider */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/client/ClerkProvider.js\");\n/* harmony import */ var _keyless_actions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../keyless-actions */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/keyless-actions.js\");\n\n\n\n\n\n\n\n\n\n\nasync function getKeylessStatus(params) {\n  let [shouldRunAsKeyless, runningWithClaimedKeys, locallyStoredPublishableKey] = [false, false, \"\"];\n  if (_utils_feature_flags__WEBPACK_IMPORTED_MODULE_2__.canUseKeyless) {\n    locallyStoredPublishableKey = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../server/keyless-node.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-node.js\")).then((mod) => {\n      var _a;\n      return ((_a = mod.safeParseClerkFile()) == null ? void 0 : _a.publishableKey) || \"\";\n    }).catch(() => \"\");\n    runningWithClaimedKeys = Boolean(params.publishableKey) && params.publishableKey === locallyStoredPublishableKey;\n    shouldRunAsKeyless = !params.publishableKey || runningWithClaimedKeys;\n  }\n  return {\n    shouldRunAsKeyless,\n    runningWithClaimedKeys\n  };\n}\nconst KeylessProvider = async (props) => {\n  const { rest, runningWithClaimedKeys, generateNonce, generateStatePromise, children } = props;\n  const newOrReadKeys = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../server/keyless-node.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-node.js\")).then((mod) => mod.createOrReadKeyless()).catch(() => null);\n  const { clerkDevelopmentCache, createConfirmationMessage, createKeylessModeMessage } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../server/keyless-log-cache.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-log-cache.js\"));\n  if (!newOrReadKeys) {\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\n      _client_ClerkProvider__WEBPACK_IMPORTED_MODULE_3__.ClientClerkProvider,\n      {\n        ...(0,_utils_mergeNextClerkPropsWithEnv__WEBPACK_IMPORTED_MODULE_4__.mergeNextClerkPropsWithEnv)(rest),\n        nonce: await generateNonce(),\n        initialState: await generateStatePromise(),\n        disableKeyless: true\n      },\n      children\n    );\n  }\n  const clientProvider = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\n    _client_ClerkProvider__WEBPACK_IMPORTED_MODULE_3__.ClientClerkProvider,\n    {\n      ...(0,_utils_mergeNextClerkPropsWithEnv__WEBPACK_IMPORTED_MODULE_4__.mergeNextClerkPropsWithEnv)({\n        ...rest,\n        publishableKey: newOrReadKeys.publishableKey,\n        __internal_keyless_claimKeylessApplicationUrl: newOrReadKeys.claimUrl,\n        __internal_keyless_copyInstanceKeysUrl: newOrReadKeys.apiKeysUrl,\n        // Explicitly use `null` instead of `undefined` here to avoid persisting `deleteKeylessAction` during merging of options.\n        __internal_keyless_dismissPrompt: runningWithClaimedKeys ? _keyless_actions__WEBPACK_IMPORTED_MODULE_5__.deleteKeylessAction : null\n      }),\n      nonce: await generateNonce(),\n      initialState: await generateStatePromise()\n    },\n    children\n  );\n  if (runningWithClaimedKeys) {\n    try {\n      const secretKey = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../server/keyless-node.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-node.js\")).then((mod) => {\n        var _a;\n        return (_a = mod.safeParseClerkFile()) == null ? void 0 : _a.secretKey;\n      });\n      if (!secretKey) {\n        throw new Error(\"Missing secret key from `.clerk/`\");\n      }\n      const client = (0,_server_createClerkClient__WEBPACK_IMPORTED_MODULE_6__.createClerkClientWithOptions)({\n        secretKey\n      });\n      const keylessHeaders = await (0,_server_keyless_custom_headers__WEBPACK_IMPORTED_MODULE_7__.collectKeylessMetadata)().then(_server_keyless_custom_headers__WEBPACK_IMPORTED_MODULE_7__.formatMetadataHeaders).catch(() => new Headers());\n      await (clerkDevelopmentCache == null ? void 0 : clerkDevelopmentCache.run(\n        () => client.__experimental_accountlessApplications.completeAccountlessApplicationOnboarding({\n          requestHeaders: keylessHeaders\n        }),\n        {\n          cacheKey: `${newOrReadKeys.publishableKey}_complete`,\n          onSuccessStale: 24 * 60 * 60 * 1e3\n          // 24 hours\n        }\n      ));\n    } catch {\n    }\n    clerkDevelopmentCache == null ? void 0 : clerkDevelopmentCache.log({\n      cacheKey: `${newOrReadKeys.publishableKey}_claimed`,\n      msg: createConfirmationMessage()\n    });\n    return clientProvider;\n  }\n  const KeylessCookieSync = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../client/keyless-cookie-sync.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/client/keyless-cookie-sync.js\")).then((mod) => mod.KeylessCookieSync);\n  const headerStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.headers)();\n  const host = headerStore.get(\"x-forwarded-host\");\n  const proto = headerStore.get(\"x-forwarded-proto\");\n  const claimUrl = new URL(newOrReadKeys.claimUrl);\n  if (host && proto) {\n    (0,_utils_only_try__WEBPACK_IMPORTED_MODULE_8__.onlyTry)(() => claimUrl.searchParams.set(\"return_url\", new URL(`${proto}://${host}`).href));\n  }\n  clerkDevelopmentCache == null ? void 0 : clerkDevelopmentCache.log({\n    cacheKey: newOrReadKeys.publishableKey,\n    msg: createKeylessModeMessage({ ...newOrReadKeys, claimUrl: claimUrl.href })\n  });\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(KeylessCookieSync, { ...newOrReadKeys }, clientProvider);\n};\n\n//# sourceMappingURL=keyless-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/keyless-provider.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/chunk-BUSYA2B4.js":
/*!***************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/chunk-BUSYA2B4.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __commonJS: () => (/* binding */ __commonJS)\n/* harmony export */ });\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\n\n\n//# sourceMappingURL=chunk-BUSYA2B4.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vY2h1bmstQlVTWUEyQjQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQSwyREFBMkQsYUFBYTtBQUN4RTs7QUFJRTtBQUNGIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEhQXFxEZXNrdG9wXFxCZXlvbmRfY2hhdFxcY2xpZW50XFxub2RlX21vZHVsZXNcXEBjbGVya1xcbmV4dGpzXFxkaXN0XFxlc21cXGNodW5rLUJVU1lBMkI0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fY29tbW9uSlMgPSAoY2IsIG1vZCkgPT4gZnVuY3Rpb24gX19yZXF1aXJlKCkge1xuICByZXR1cm4gbW9kIHx8ICgwLCBjYltfX2dldE93blByb3BOYW1lcyhjYilbMF1dKSgobW9kID0geyBleHBvcnRzOiB7fSB9KS5leHBvcnRzLCBtb2QpLCBtb2QuZXhwb3J0cztcbn07XG5cbmV4cG9ydCB7XG4gIF9fY29tbW9uSlNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1CVVNZQTJCNC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/chunk-BUSYA2B4.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/PromisifiedAuthProvider.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/client-boundary/PromisifiedAuthProvider.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PromisifiedAuthProvider: () => (/* binding */ PromisifiedAuthProvider),\n/* harmony export */   usePromisifiedAuth: () => (/* binding */ usePromisifiedAuth)\n/* harmony export */ });\n/* harmony import */ var react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-server-dom-webpack/server */ \"(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/server.edge.js\");\n// This file is generated by the Webpack next-flight-loader.\n\nconst PromisifiedAuthProvider = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call PromisifiedAuthProvider() from the server but PromisifiedAuthProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\PromisifiedAuthProvider.js\",\n\"PromisifiedAuthProvider\",\n);const usePromisifiedAuth = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call usePromisifiedAuth() from the server but usePromisifiedAuth is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\PromisifiedAuthProvider.js\",\n\"usePromisifiedAuth\",\n);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vY2xpZW50LWJvdW5kYXJ5L1Byb21pc2lmaWVkQXV0aFByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBIiwic291cmNlcyI6WyJfTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vY2xpZW50LWJvdW5kYXJ5L1Byb21pc2lmaWVkQXV0aFByb3ZpZGVyLmpzL19fbmV4dGpzLWludGVybmFsLXByb3h5Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGJ5IHRoZSBXZWJwYWNrIG5leHQtZmxpZ2h0LWxvYWRlci5cbmltcG9ydCB7IHJlZ2lzdGVyQ2xpZW50UmVmZXJlbmNlIH0gZnJvbSBcInJlYWN0LXNlcnZlci1kb20td2VicGFjay9zZXJ2ZXJcIjtcbmV4cG9ydCBjb25zdCBQcm9taXNpZmllZEF1dGhQcm92aWRlciA9IHJlZ2lzdGVyQ2xpZW50UmVmZXJlbmNlKFxuZnVuY3Rpb24oKSB7IHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byBjYWxsIFByb21pc2lmaWVkQXV0aFByb3ZpZGVyKCkgZnJvbSB0aGUgc2VydmVyIGJ1dCBQcm9taXNpZmllZEF1dGhQcm92aWRlciBpcyBvbiB0aGUgY2xpZW50LiBJdCdzIG5vdCBwb3NzaWJsZSB0byBpbnZva2UgYSBjbGllbnQgZnVuY3Rpb24gZnJvbSB0aGUgc2VydmVyLCBpdCBjYW4gb25seSBiZSByZW5kZXJlZCBhcyBhIENvbXBvbmVudCBvciBwYXNzZWQgdG8gcHJvcHMgb2YgYSBDbGllbnQgQ29tcG9uZW50LlwiKTsgfSxcblwiQzpcXFxcVXNlcnNcXFxcSFBcXFxcRGVza3RvcFxcXFxCZXlvbmRfY2hhdFxcXFxjbGllbnRcXFxcbm9kZV9tb2R1bGVzXFxcXEBjbGVya1xcXFxuZXh0anNcXFxcZGlzdFxcXFxlc21cXFxcY2xpZW50LWJvdW5kYXJ5XFxcXFByb21pc2lmaWVkQXV0aFByb3ZpZGVyLmpzXCIsXG5cIlByb21pc2lmaWVkQXV0aFByb3ZpZGVyXCIsXG4pO2V4cG9ydCBjb25zdCB1c2VQcm9taXNpZmllZEF1dGggPSByZWdpc3RlckNsaWVudFJlZmVyZW5jZShcbmZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJBdHRlbXB0ZWQgdG8gY2FsbCB1c2VQcm9taXNpZmllZEF1dGgoKSBmcm9tIHRoZSBzZXJ2ZXIgYnV0IHVzZVByb21pc2lmaWVkQXV0aCBpcyBvbiB0aGUgY2xpZW50LiBJdCdzIG5vdCBwb3NzaWJsZSB0byBpbnZva2UgYSBjbGllbnQgZnVuY3Rpb24gZnJvbSB0aGUgc2VydmVyLCBpdCBjYW4gb25seSBiZSByZW5kZXJlZCBhcyBhIENvbXBvbmVudCBvciBwYXNzZWQgdG8gcHJvcHMgb2YgYSBDbGllbnQgQ29tcG9uZW50LlwiKTsgfSxcblwiQzpcXFxcVXNlcnNcXFxcSFBcXFxcRGVza3RvcFxcXFxCZXlvbmRfY2hhdFxcXFxjbGllbnRcXFxcbm9kZV9tb2R1bGVzXFxcXEBjbGVya1xcXFxuZXh0anNcXFxcZGlzdFxcXFxlc21cXFxcY2xpZW50LWJvdW5kYXJ5XFxcXFByb21pc2lmaWVkQXV0aFByb3ZpZGVyLmpzXCIsXG5cInVzZVByb21pc2lmaWVkQXV0aFwiLFxuKTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/PromisifiedAuthProvider.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthenticateWithRedirectCallback: () => (/* binding */ AuthenticateWithRedirectCallback),\n/* harmony export */   ClerkDegraded: () => (/* binding */ ClerkDegraded),\n/* harmony export */   ClerkFailed: () => (/* binding */ ClerkFailed),\n/* harmony export */   ClerkLoaded: () => (/* binding */ ClerkLoaded),\n/* harmony export */   ClerkLoading: () => (/* binding */ ClerkLoading),\n/* harmony export */   MultisessionAppSupport: () => (/* binding */ MultisessionAppSupport),\n/* harmony export */   Protect: () => (/* binding */ Protect),\n/* harmony export */   RedirectToCreateOrganization: () => (/* binding */ RedirectToCreateOrganization),\n/* harmony export */   RedirectToOrganizationProfile: () => (/* binding */ RedirectToOrganizationProfile),\n/* harmony export */   RedirectToSignIn: () => (/* binding */ RedirectToSignIn),\n/* harmony export */   RedirectToSignUp: () => (/* binding */ RedirectToSignUp),\n/* harmony export */   RedirectToTasks: () => (/* binding */ RedirectToTasks),\n/* harmony export */   RedirectToUserProfile: () => (/* binding */ RedirectToUserProfile),\n/* harmony export */   SignedIn: () => (/* binding */ SignedIn),\n/* harmony export */   SignedOut: () => (/* binding */ SignedOut)\n/* harmony export */ });\n/* harmony import */ var react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-server-dom-webpack/server */ \"(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/server.edge.js\");\n// This file is generated by the Webpack next-flight-loader.\n\nconst AuthenticateWithRedirectCallback = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call AuthenticateWithRedirectCallback() from the server but AuthenticateWithRedirectCallback is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\controlComponents.js\",\n\"AuthenticateWithRedirectCallback\",\n);const ClerkDegraded = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call ClerkDegraded() from the server but ClerkDegraded is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\controlComponents.js\",\n\"ClerkDegraded\",\n);const ClerkFailed = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call ClerkFailed() from the server but ClerkFailed is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\controlComponents.js\",\n\"ClerkFailed\",\n);const ClerkLoaded = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call ClerkLoaded() from the server but ClerkLoaded is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\controlComponents.js\",\n\"ClerkLoaded\",\n);const ClerkLoading = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call ClerkLoading() from the server but ClerkLoading is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\controlComponents.js\",\n\"ClerkLoading\",\n);const MultisessionAppSupport = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call MultisessionAppSupport() from the server but MultisessionAppSupport is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\controlComponents.js\",\n\"MultisessionAppSupport\",\n);const Protect = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call Protect() from the server but Protect is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\controlComponents.js\",\n\"Protect\",\n);const RedirectToCreateOrganization = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call RedirectToCreateOrganization() from the server but RedirectToCreateOrganization is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\controlComponents.js\",\n\"RedirectToCreateOrganization\",\n);const RedirectToOrganizationProfile = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call RedirectToOrganizationProfile() from the server but RedirectToOrganizationProfile is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\controlComponents.js\",\n\"RedirectToOrganizationProfile\",\n);const RedirectToSignIn = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call RedirectToSignIn() from the server but RedirectToSignIn is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\controlComponents.js\",\n\"RedirectToSignIn\",\n);const RedirectToSignUp = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call RedirectToSignUp() from the server but RedirectToSignUp is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\controlComponents.js\",\n\"RedirectToSignUp\",\n);const RedirectToTasks = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call RedirectToTasks() from the server but RedirectToTasks is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\controlComponents.js\",\n\"RedirectToTasks\",\n);const RedirectToUserProfile = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call RedirectToUserProfile() from the server but RedirectToUserProfile is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\controlComponents.js\",\n\"RedirectToUserProfile\",\n);const SignedIn = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call SignedIn() from the server but SignedIn is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\controlComponents.js\",\n\"SignedIn\",\n);const SignedOut = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call SignedOut() from the server but SignedOut is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\controlComponents.js\",\n\"SignedOut\",\n);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmailLinkErrorCode: () => (/* binding */ EmailLinkErrorCode),\n/* harmony export */   EmailLinkErrorCodeStatus: () => (/* binding */ EmailLinkErrorCodeStatus),\n/* harmony export */   isClerkAPIResponseError: () => (/* binding */ isClerkAPIResponseError),\n/* harmony export */   isClerkRuntimeError: () => (/* binding */ isClerkRuntimeError),\n/* harmony export */   isEmailLinkError: () => (/* binding */ isEmailLinkError),\n/* harmony export */   isKnownError: () => (/* binding */ isKnownError),\n/* harmony export */   isMetamaskError: () => (/* binding */ isMetamaskError),\n/* harmony export */   isReverificationCancelledError: () => (/* binding */ isReverificationCancelledError),\n/* harmony export */   useAuth: () => (/* binding */ useAuth),\n/* harmony export */   useClerk: () => (/* binding */ useClerk),\n/* harmony export */   useEmailLink: () => (/* binding */ useEmailLink),\n/* harmony export */   useOrganization: () => (/* binding */ useOrganization),\n/* harmony export */   useOrganizationList: () => (/* binding */ useOrganizationList),\n/* harmony export */   useReverification: () => (/* binding */ useReverification),\n/* harmony export */   useSession: () => (/* binding */ useSession),\n/* harmony export */   useSessionList: () => (/* binding */ useSessionList),\n/* harmony export */   useSignIn: () => (/* binding */ useSignIn),\n/* harmony export */   useSignUp: () => (/* binding */ useSignUp),\n/* harmony export */   useUser: () => (/* binding */ useUser)\n/* harmony export */ });\n/* harmony import */ var react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-server-dom-webpack/server */ \"(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/server.edge.js\");\n// This file is generated by the Webpack next-flight-loader.\n\nconst EmailLinkErrorCode = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call EmailLinkErrorCode() from the server but EmailLinkErrorCode is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\hooks.js\",\n\"EmailLinkErrorCode\",\n);const EmailLinkErrorCodeStatus = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call EmailLinkErrorCodeStatus() from the server but EmailLinkErrorCodeStatus is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\hooks.js\",\n\"EmailLinkErrorCodeStatus\",\n);const isClerkAPIResponseError = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call isClerkAPIResponseError() from the server but isClerkAPIResponseError is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\hooks.js\",\n\"isClerkAPIResponseError\",\n);const isClerkRuntimeError = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call isClerkRuntimeError() from the server but isClerkRuntimeError is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\hooks.js\",\n\"isClerkRuntimeError\",\n);const isEmailLinkError = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call isEmailLinkError() from the server but isEmailLinkError is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\hooks.js\",\n\"isEmailLinkError\",\n);const isKnownError = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call isKnownError() from the server but isKnownError is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\hooks.js\",\n\"isKnownError\",\n);const isMetamaskError = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call isMetamaskError() from the server but isMetamaskError is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\hooks.js\",\n\"isMetamaskError\",\n);const isReverificationCancelledError = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call isReverificationCancelledError() from the server but isReverificationCancelledError is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\hooks.js\",\n\"isReverificationCancelledError\",\n);const useAuth = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call useAuth() from the server but useAuth is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\hooks.js\",\n\"useAuth\",\n);const useClerk = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call useClerk() from the server but useClerk is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\hooks.js\",\n\"useClerk\",\n);const useEmailLink = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call useEmailLink() from the server but useEmailLink is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\hooks.js\",\n\"useEmailLink\",\n);const useOrganization = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call useOrganization() from the server but useOrganization is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\hooks.js\",\n\"useOrganization\",\n);const useOrganizationList = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call useOrganizationList() from the server but useOrganizationList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\hooks.js\",\n\"useOrganizationList\",\n);const useReverification = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call useReverification() from the server but useReverification is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\hooks.js\",\n\"useReverification\",\n);const useSession = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call useSession() from the server but useSession is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\hooks.js\",\n\"useSession\",\n);const useSessionList = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call useSessionList() from the server but useSessionList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\hooks.js\",\n\"useSessionList\",\n);const useSignIn = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call useSignIn() from the server but useSignIn is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\hooks.js\",\n\"useSignIn\",\n);const useSignUp = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call useSignUp() from the server but useSignUp is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\hooks.js\",\n\"useSignUp\",\n);const useUser = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call useUser() from the server but useUser is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\hooks.js\",\n\"useUser\",\n);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIKeys: () => (/* binding */ APIKeys),\n/* harmony export */   CreateOrganization: () => (/* binding */ CreateOrganization),\n/* harmony export */   GoogleOneTap: () => (/* binding */ GoogleOneTap),\n/* harmony export */   OrganizationList: () => (/* binding */ OrganizationList),\n/* harmony export */   OrganizationProfile: () => (/* binding */ OrganizationProfile),\n/* harmony export */   OrganizationSwitcher: () => (/* binding */ OrganizationSwitcher),\n/* harmony export */   PricingTable: () => (/* binding */ PricingTable),\n/* harmony export */   SignIn: () => (/* binding */ SignIn),\n/* harmony export */   SignInButton: () => (/* binding */ SignInButton),\n/* harmony export */   SignInWithMetamaskButton: () => (/* binding */ SignInWithMetamaskButton),\n/* harmony export */   SignOutButton: () => (/* binding */ SignOutButton),\n/* harmony export */   SignUp: () => (/* binding */ SignUp),\n/* harmony export */   SignUpButton: () => (/* binding */ SignUpButton),\n/* harmony export */   TaskChooseOrganization: () => (/* binding */ TaskChooseOrganization),\n/* harmony export */   UserAvatar: () => (/* binding */ UserAvatar),\n/* harmony export */   UserButton: () => (/* binding */ UserButton),\n/* harmony export */   UserProfile: () => (/* binding */ UserProfile),\n/* harmony export */   Waitlist: () => (/* binding */ Waitlist)\n/* harmony export */ });\n/* harmony import */ var react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-server-dom-webpack/server */ \"(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/server.edge.js\");\n// This file is generated by the Webpack next-flight-loader.\n\nconst APIKeys = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call APIKeys() from the server but APIKeys is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\uiComponents.js\",\n\"APIKeys\",\n);const CreateOrganization = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call CreateOrganization() from the server but CreateOrganization is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\uiComponents.js\",\n\"CreateOrganization\",\n);const GoogleOneTap = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call GoogleOneTap() from the server but GoogleOneTap is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\uiComponents.js\",\n\"GoogleOneTap\",\n);const OrganizationList = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call OrganizationList() from the server but OrganizationList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\uiComponents.js\",\n\"OrganizationList\",\n);const OrganizationProfile = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call OrganizationProfile() from the server but OrganizationProfile is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\uiComponents.js\",\n\"OrganizationProfile\",\n);const OrganizationSwitcher = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call OrganizationSwitcher() from the server but OrganizationSwitcher is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\uiComponents.js\",\n\"OrganizationSwitcher\",\n);const PricingTable = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call PricingTable() from the server but PricingTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\uiComponents.js\",\n\"PricingTable\",\n);const SignIn = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call SignIn() from the server but SignIn is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\uiComponents.js\",\n\"SignIn\",\n);const SignInButton = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call SignInButton() from the server but SignInButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\uiComponents.js\",\n\"SignInButton\",\n);const SignInWithMetamaskButton = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call SignInWithMetamaskButton() from the server but SignInWithMetamaskButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\uiComponents.js\",\n\"SignInWithMetamaskButton\",\n);const SignOutButton = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call SignOutButton() from the server but SignOutButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\uiComponents.js\",\n\"SignOutButton\",\n);const SignUp = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call SignUp() from the server but SignUp is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\uiComponents.js\",\n\"SignUp\",\n);const SignUpButton = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call SignUpButton() from the server but SignUpButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\uiComponents.js\",\n\"SignUpButton\",\n);const TaskChooseOrganization = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call TaskChooseOrganization() from the server but TaskChooseOrganization is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\uiComponents.js\",\n\"TaskChooseOrganization\",\n);const UserAvatar = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call UserAvatar() from the server but UserAvatar is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\uiComponents.js\",\n\"UserAvatar\",\n);const UserButton = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call UserButton() from the server but UserButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\uiComponents.js\",\n\"UserButton\",\n);const UserProfile = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call UserProfile() from the server but UserProfile is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\uiComponents.js\",\n\"UserProfile\",\n);const Waitlist = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call Waitlist() from the server but Waitlist is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"C:\\\\Users\\\\HP\\\\Desktop\\\\Beyond_chat\\\\client\\\\node_modules\\\\@clerk\\\\nextjs\\\\dist\\\\esm\\\\client-boundary\\\\uiComponents.js\",\n\"Waitlist\",\n);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIKeys: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_2__.APIKeys),\n/* harmony export */   AuthenticateWithRedirectCallback: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_3__.AuthenticateWithRedirectCallback),\n/* harmony export */   ClerkDegraded: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_3__.ClerkDegraded),\n/* harmony export */   ClerkFailed: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_3__.ClerkFailed),\n/* harmony export */   ClerkLoaded: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_3__.ClerkLoaded),\n/* harmony export */   ClerkLoading: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_3__.ClerkLoading),\n/* harmony export */   ClerkProvider: () => (/* binding */ ClerkProvider),\n/* harmony export */   CreateOrganization: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_2__.CreateOrganization),\n/* harmony export */   GoogleOneTap: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_2__.GoogleOneTap),\n/* harmony export */   OrganizationList: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_2__.OrganizationList),\n/* harmony export */   OrganizationProfile: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_2__.OrganizationProfile),\n/* harmony export */   OrganizationSwitcher: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_2__.OrganizationSwitcher),\n/* harmony export */   PricingTable: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_2__.PricingTable),\n/* harmony export */   Protect: () => (/* binding */ Protect),\n/* harmony export */   RedirectToCreateOrganization: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_3__.RedirectToCreateOrganization),\n/* harmony export */   RedirectToOrganizationProfile: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_3__.RedirectToOrganizationProfile),\n/* harmony export */   RedirectToSignIn: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_3__.RedirectToSignIn),\n/* harmony export */   RedirectToSignUp: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_3__.RedirectToSignUp),\n/* harmony export */   RedirectToTasks: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_3__.RedirectToTasks),\n/* harmony export */   RedirectToUserProfile: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_3__.RedirectToUserProfile),\n/* harmony export */   SignIn: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_2__.SignIn),\n/* harmony export */   SignInButton: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_2__.SignInButton),\n/* harmony export */   SignInWithMetamaskButton: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_2__.SignInWithMetamaskButton),\n/* harmony export */   SignOutButton: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_2__.SignOutButton),\n/* harmony export */   SignUp: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_2__.SignUp),\n/* harmony export */   SignUpButton: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_2__.SignUpButton),\n/* harmony export */   SignedIn: () => (/* binding */ SignedIn),\n/* harmony export */   SignedOut: () => (/* binding */ SignedOut),\n/* harmony export */   TaskChooseOrganization: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_2__.TaskChooseOrganization),\n/* harmony export */   UserAvatar: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_2__.UserAvatar),\n/* harmony export */   UserButton: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_2__.UserButton),\n/* harmony export */   UserProfile: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_2__.UserProfile),\n/* harmony export */   Waitlist: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_2__.Waitlist),\n/* harmony export */   useAuth: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__.useAuth),\n/* harmony export */   useClerk: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__.useClerk),\n/* harmony export */   useEmailLink: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__.useEmailLink),\n/* harmony export */   useOrganization: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__.useOrganization),\n/* harmony export */   useOrganizationList: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__.useOrganizationList),\n/* harmony export */   useReverification: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__.useReverification),\n/* harmony export */   useSession: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__.useSession),\n/* harmony export */   useSessionList: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__.useSessionList),\n/* harmony export */   useSignIn: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__.useSignIn),\n/* harmony export */   useSignUp: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__.useSignUp),\n/* harmony export */   useUser: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__.useUser)\n/* harmony export */ });\n/* harmony import */ var _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./client-boundary/controlComponents */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js\");\n/* harmony import */ var _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./client-boundary/uiComponents */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js\");\n/* harmony import */ var _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./client-boundary/hooks */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js\");\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! #components */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/ClerkProvider.js\");\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! #components */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/controlComponents.js\");\n\n\n\n\n\nconst ClerkProvider = _components__WEBPACK_IMPORTED_MODULE_0__.ClerkProvider;\nconst SignedIn = _components__WEBPACK_IMPORTED_MODULE_1__.SignedIn;\nconst SignedOut = _components__WEBPACK_IMPORTED_MODULE_1__.SignedOut;\nconst Protect = _components__WEBPACK_IMPORTED_MODULE_1__.Protect;\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE2QjtBQWFnQjtBQW9CTDtBQWFQO0FBQ2U7QUFDaEQsc0JBQXNCLHNEQUE4QjtBQUNwRCxpQkFBaUIsaURBQXlCO0FBQzFDLGtCQUFrQixrREFBMEI7QUFDNUMsZ0JBQWdCLGdEQUF3QjtBQThDdEM7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxIUFxcRGVza3RvcFxcQmV5b25kX2NoYXRcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAY2xlcmtcXG5leHRqc1xcZGlzdFxcZXNtXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuL2NodW5rLUJVU1lBMkI0LmpzXCI7XG5pbXBvcnQge1xuICBBdXRoZW50aWNhdGVXaXRoUmVkaXJlY3RDYWxsYmFjayxcbiAgQ2xlcmtEZWdyYWRlZCxcbiAgQ2xlcmtGYWlsZWQsXG4gIENsZXJrTG9hZGVkLFxuICBDbGVya0xvYWRpbmcsXG4gIFJlZGlyZWN0VG9DcmVhdGVPcmdhbml6YXRpb24sXG4gIFJlZGlyZWN0VG9Pcmdhbml6YXRpb25Qcm9maWxlLFxuICBSZWRpcmVjdFRvU2lnbkluLFxuICBSZWRpcmVjdFRvU2lnblVwLFxuICBSZWRpcmVjdFRvVGFza3MsXG4gIFJlZGlyZWN0VG9Vc2VyUHJvZmlsZVxufSBmcm9tIFwiLi9jbGllbnQtYm91bmRhcnkvY29udHJvbENvbXBvbmVudHNcIjtcbmltcG9ydCB7XG4gIEFQSUtleXMsXG4gIENyZWF0ZU9yZ2FuaXphdGlvbixcbiAgR29vZ2xlT25lVGFwLFxuICBPcmdhbml6YXRpb25MaXN0LFxuICBPcmdhbml6YXRpb25Qcm9maWxlLFxuICBPcmdhbml6YXRpb25Td2l0Y2hlcixcbiAgUHJpY2luZ1RhYmxlLFxuICBTaWduSW4sXG4gIFNpZ25JbkJ1dHRvbixcbiAgU2lnbkluV2l0aE1ldGFtYXNrQnV0dG9uLFxuICBTaWduT3V0QnV0dG9uLFxuICBTaWduVXAsXG4gIFNpZ25VcEJ1dHRvbixcbiAgVGFza0Nob29zZU9yZ2FuaXphdGlvbixcbiAgVXNlckF2YXRhcixcbiAgVXNlckJ1dHRvbixcbiAgVXNlclByb2ZpbGUsXG4gIFdhaXRsaXN0XG59IGZyb20gXCIuL2NsaWVudC1ib3VuZGFyeS91aUNvbXBvbmVudHNcIjtcbmltcG9ydCB7XG4gIHVzZUF1dGgsXG4gIHVzZUNsZXJrLFxuICB1c2VFbWFpbExpbmssXG4gIHVzZU9yZ2FuaXphdGlvbixcbiAgdXNlT3JnYW5pemF0aW9uTGlzdCxcbiAgdXNlUmV2ZXJpZmljYXRpb24sXG4gIHVzZVNlc3Npb24sXG4gIHVzZVNlc3Npb25MaXN0LFxuICB1c2VTaWduSW4sXG4gIHVzZVNpZ25VcCxcbiAgdXNlVXNlclxufSBmcm9tIFwiLi9jbGllbnQtYm91bmRhcnkvaG9va3NcIjtcbmltcG9ydCAqIGFzIENvbXBvbmVudHNNb2R1bGUgZnJvbSBcIiNjb21wb25lbnRzXCI7XG5jb25zdCBDbGVya1Byb3ZpZGVyID0gQ29tcG9uZW50c01vZHVsZS5DbGVya1Byb3ZpZGVyO1xuY29uc3QgU2lnbmVkSW4gPSBDb21wb25lbnRzTW9kdWxlLlNpZ25lZEluO1xuY29uc3QgU2lnbmVkT3V0ID0gQ29tcG9uZW50c01vZHVsZS5TaWduZWRPdXQ7XG5jb25zdCBQcm90ZWN0ID0gQ29tcG9uZW50c01vZHVsZS5Qcm90ZWN0O1xuZXhwb3J0IHtcbiAgQVBJS2V5cyxcbiAgQXV0aGVudGljYXRlV2l0aFJlZGlyZWN0Q2FsbGJhY2ssXG4gIENsZXJrRGVncmFkZWQsXG4gIENsZXJrRmFpbGVkLFxuICBDbGVya0xvYWRlZCxcbiAgQ2xlcmtMb2FkaW5nLFxuICBDbGVya1Byb3ZpZGVyLFxuICBDcmVhdGVPcmdhbml6YXRpb24sXG4gIEdvb2dsZU9uZVRhcCxcbiAgT3JnYW5pemF0aW9uTGlzdCxcbiAgT3JnYW5pemF0aW9uUHJvZmlsZSxcbiAgT3JnYW5pemF0aW9uU3dpdGNoZXIsXG4gIFByaWNpbmdUYWJsZSxcbiAgUHJvdGVjdCxcbiAgUmVkaXJlY3RUb0NyZWF0ZU9yZ2FuaXphdGlvbixcbiAgUmVkaXJlY3RUb09yZ2FuaXphdGlvblByb2ZpbGUsXG4gIFJlZGlyZWN0VG9TaWduSW4sXG4gIFJlZGlyZWN0VG9TaWduVXAsXG4gIFJlZGlyZWN0VG9UYXNrcyxcbiAgUmVkaXJlY3RUb1VzZXJQcm9maWxlLFxuICBTaWduSW4sXG4gIFNpZ25JbkJ1dHRvbixcbiAgU2lnbkluV2l0aE1ldGFtYXNrQnV0dG9uLFxuICBTaWduT3V0QnV0dG9uLFxuICBTaWduVXAsXG4gIFNpZ25VcEJ1dHRvbixcbiAgU2lnbmVkSW4sXG4gIFNpZ25lZE91dCxcbiAgVGFza0Nob29zZU9yZ2FuaXphdGlvbixcbiAgVXNlckF2YXRhcixcbiAgVXNlckJ1dHRvbixcbiAgVXNlclByb2ZpbGUsXG4gIFdhaXRsaXN0LFxuICB1c2VBdXRoLFxuICB1c2VDbGVyayxcbiAgdXNlRW1haWxMaW5rLFxuICB1c2VPcmdhbml6YXRpb24sXG4gIHVzZU9yZ2FuaXphdGlvbkxpc3QsXG4gIHVzZVJldmVyaWZpY2F0aW9uLFxuICB1c2VTZXNzaW9uLFxuICB1c2VTZXNzaW9uTGlzdCxcbiAgdXNlU2lnbkluLFxuICB1c2VTaWduVXAsXG4gIHVzZVVzZXJcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/index.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/runtime/browser/safe-node-apis.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/runtime/browser/safe-node-apis.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _chunk_BUSYA2B4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chunk-BUSYA2B4.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/chunk-BUSYA2B4.js\");\n\nvar require_safe_node_apis = (0,_chunk_BUSYA2B4_js__WEBPACK_IMPORTED_MODULE_0__.__commonJS)({\n  \"src/runtime/browser/safe-node-apis.js\"(exports, module) {\n    const fs = void 0;\n    const path = void 0;\n    const cwd = void 0;\n    module.exports = { fs, path, cwd };\n  }\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (require_safe_node_apis());\n//# sourceMappingURL=safe-node-apis.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vcnVudGltZS9icm93c2VyL3NhZmUtbm9kZS1hcGlzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBRWlDO0FBQ2pDLDZCQUE2Qiw4REFBVTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBLENBQUM7QUFDRCxpRUFBZSx3QkFBd0IsRUFBQztBQUN4QyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxIUFxcRGVza3RvcFxcQmV5b25kX2NoYXRcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAY2xlcmtcXG5leHRqc1xcZGlzdFxcZXNtXFxydW50aW1lXFxicm93c2VyXFxzYWZlLW5vZGUtYXBpcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBfX2NvbW1vbkpTXG59IGZyb20gXCIuLi8uLi9jaHVuay1CVVNZQTJCNC5qc1wiO1xudmFyIHJlcXVpcmVfc2FmZV9ub2RlX2FwaXMgPSBfX2NvbW1vbkpTKHtcbiAgXCJzcmMvcnVudGltZS9icm93c2VyL3NhZmUtbm9kZS1hcGlzLmpzXCIoZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgY29uc3QgZnMgPSB2b2lkIDA7XG4gICAgY29uc3QgcGF0aCA9IHZvaWQgMDtcbiAgICBjb25zdCBjd2QgPSB2b2lkIDA7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7IGZzLCBwYXRoLCBjd2QgfTtcbiAgfVxufSk7XG5leHBvcnQgZGVmYXVsdCByZXF1aXJlX3NhZmVfbm9kZV9hcGlzKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zYWZlLW5vZGUtYXBpcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/runtime/browser/safe-node-apis.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/buildClerkProps.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/buildClerkProps.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildClerkProps: () => (/* binding */ buildClerkProps),\n/* harmony export */   getDynamicAuthData: () => (/* binding */ getDynamicAuthData)\n/* harmony export */ });\n/* harmony import */ var _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/backend/internal */ \"(middleware)/./node_modules/@clerk/backend/dist/internal.mjs\");\n/* harmony import */ var _data_getAuthDataFromRequest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data/getAuthDataFromRequest */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/data/getAuthDataFromRequest.js\");\n\n\n\nconst buildClerkProps = (req, initialState = {}) => {\n  const sanitizedAuthObject = getDynamicAuthData(req, initialState);\n  const __clerk_ssr_state =  true ? JSON.parse(JSON.stringify(sanitizedAuthObject)) : 0;\n  return { __clerk_ssr_state };\n};\nfunction getDynamicAuthData(req, initialState = {}) {\n  const authObject = (0,_data_getAuthDataFromRequest__WEBPACK_IMPORTED_MODULE_1__.getAuthDataFromRequest)(req);\n  return (0,_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.makeAuthObjectSerializable)((0,_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.stripPrivateDataFromObject)({ ...authObject, ...initialState }));\n}\n\n//# sourceMappingURL=buildClerkProps.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vc2VydmVyL2J1aWxkQ2xlcmtQcm9wcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQThCO0FBQ21FO0FBQzFCO0FBQ3ZFLCtDQUErQztBQUMvQztBQUNBLDRCQUE0QixLQUFxQyxxREFBcUQsQ0FBbUI7QUFDekksV0FBVztBQUNYO0FBQ0Esa0RBQWtEO0FBQ2xELHFCQUFxQixvRkFBc0I7QUFDM0MsU0FBUyxtRkFBMEIsQ0FBQyxtRkFBMEIsR0FBRyxnQ0FBZ0M7QUFDakc7QUFJRTtBQUNGIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEhQXFxEZXNrdG9wXFxCZXlvbmRfY2hhdFxcY2xpZW50XFxub2RlX21vZHVsZXNcXEBjbGVya1xcbmV4dGpzXFxkaXN0XFxlc21cXHNlcnZlclxcYnVpbGRDbGVya1Byb3BzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL2NodW5rLUJVU1lBMkI0LmpzXCI7XG5pbXBvcnQgeyBtYWtlQXV0aE9iamVjdFNlcmlhbGl6YWJsZSwgc3RyaXBQcml2YXRlRGF0YUZyb21PYmplY3QgfSBmcm9tIFwiQGNsZXJrL2JhY2tlbmQvaW50ZXJuYWxcIjtcbmltcG9ydCB7IGdldEF1dGhEYXRhRnJvbVJlcXVlc3QgfSBmcm9tIFwiLi9kYXRhL2dldEF1dGhEYXRhRnJvbVJlcXVlc3RcIjtcbmNvbnN0IGJ1aWxkQ2xlcmtQcm9wcyA9IChyZXEsIGluaXRpYWxTdGF0ZSA9IHt9KSA9PiB7XG4gIGNvbnN0IHNhbml0aXplZEF1dGhPYmplY3QgPSBnZXREeW5hbWljQXV0aERhdGEocmVxLCBpbml0aWFsU3RhdGUpO1xuICBjb25zdCBfX2NsZXJrX3Nzcl9zdGF0ZSA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc2FuaXRpemVkQXV0aE9iamVjdCkpIDogc2FuaXRpemVkQXV0aE9iamVjdDtcbiAgcmV0dXJuIHsgX19jbGVya19zc3Jfc3RhdGUgfTtcbn07XG5mdW5jdGlvbiBnZXREeW5hbWljQXV0aERhdGEocmVxLCBpbml0aWFsU3RhdGUgPSB7fSkge1xuICBjb25zdCBhdXRoT2JqZWN0ID0gZ2V0QXV0aERhdGFGcm9tUmVxdWVzdChyZXEpO1xuICByZXR1cm4gbWFrZUF1dGhPYmplY3RTZXJpYWxpemFibGUoc3RyaXBQcml2YXRlRGF0YUZyb21PYmplY3QoeyAuLi5hdXRoT2JqZWN0LCAuLi5pbml0aWFsU3RhdGUgfSkpO1xufVxuZXhwb3J0IHtcbiAgYnVpbGRDbGVya1Byb3BzLFxuICBnZXREeW5hbWljQXV0aERhdGFcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWlsZENsZXJrUHJvcHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/buildClerkProps.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/createGetAuth.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/createGetAuth.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAsyncGetAuth: () => (/* binding */ createAsyncGetAuth),\n/* harmony export */   createSyncGetAuth: () => (/* binding */ createSyncGetAuth),\n/* harmony export */   getAuth: () => (/* binding */ getAuth)\n/* harmony export */ });\n/* harmony import */ var _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/backend/internal */ \"(middleware)/./node_modules/@clerk/backend/dist/internal.mjs\");\n/* harmony import */ var _clerk_shared_underscore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @clerk/shared/underscore */ \"(middleware)/./node_modules/@clerk/shared/dist/underscore.mjs\");\n/* harmony import */ var _utils_debugLogger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/debugLogger */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/debugLogger.js\");\n/* harmony import */ var _utils_sdk_versions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/sdk-versions */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/sdk-versions.js\");\n/* harmony import */ var _data_getAuthDataFromRequest__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./data/getAuthDataFromRequest */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/data/getAuthDataFromRequest.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./errors */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/errors.js\");\n/* harmony import */ var _headers_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./headers-utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/headers-utils.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/utils.js\");\n\n\n\n\n\n\n\n\n\nconst createAsyncGetAuth = ({\n  debugLoggerName,\n  noAuthStatusMessage\n}) => (0,_utils_debugLogger__WEBPACK_IMPORTED_MODULE_2__.withLogger)(debugLoggerName, (logger) => {\n  return async (req, opts) => {\n    if ((0,_clerk_shared_underscore__WEBPACK_IMPORTED_MODULE_1__.isTruthy)((0,_headers_utils__WEBPACK_IMPORTED_MODULE_3__.getHeader)(req, _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.EnableDebug))) {\n      logger.enable();\n    }\n    if (!(0,_headers_utils__WEBPACK_IMPORTED_MODULE_3__.detectClerkMiddleware)(req)) {\n      if (_utils_sdk_versions__WEBPACK_IMPORTED_MODULE_4__.isNextWithUnstableServerActions) {\n        (0,_utils__WEBPACK_IMPORTED_MODULE_5__.assertAuthStatus)(req, noAuthStatusMessage);\n      }\n      const missConfiguredMiddlewareLocation = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./fs/middleware-location.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/fs/middleware-location.js\")).then((m) => m.suggestMiddlewareLocation()).catch(() => void 0);\n      if (missConfiguredMiddlewareLocation) {\n        throw new Error(missConfiguredMiddlewareLocation);\n      }\n      (0,_utils__WEBPACK_IMPORTED_MODULE_5__.assertAuthStatus)(req, noAuthStatusMessage);\n    }\n    const getAuthDataFromRequest = (req2, opts2 = {}) => {\n      return (0,_data_getAuthDataFromRequest__WEBPACK_IMPORTED_MODULE_6__.getAuthDataFromRequest)(req2, { ...opts2, logger, acceptsToken: opts2 == null ? void 0 : opts2.acceptsToken });\n    };\n    return getAuthDataFromRequest(req, { ...opts, logger, acceptsToken: opts == null ? void 0 : opts.acceptsToken });\n  };\n});\nconst createSyncGetAuth = ({\n  debugLoggerName,\n  noAuthStatusMessage\n}) => (0,_utils_debugLogger__WEBPACK_IMPORTED_MODULE_2__.withLogger)(debugLoggerName, (logger) => {\n  return (req, opts) => {\n    if ((0,_clerk_shared_underscore__WEBPACK_IMPORTED_MODULE_1__.isTruthy)((0,_headers_utils__WEBPACK_IMPORTED_MODULE_3__.getHeader)(req, _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.EnableDebug))) {\n      logger.enable();\n    }\n    (0,_utils__WEBPACK_IMPORTED_MODULE_5__.assertAuthStatus)(req, noAuthStatusMessage);\n    const getAuthDataFromRequest = (req2, opts2 = {}) => {\n      return (0,_data_getAuthDataFromRequest__WEBPACK_IMPORTED_MODULE_6__.getSessionAuthDataFromRequest)(req2, { ...opts2, logger, acceptsToken: opts2 == null ? void 0 : opts2.acceptsToken });\n    };\n    return getAuthDataFromRequest(req, { ...opts, logger, acceptsToken: opts == null ? void 0 : opts.acceptsToken });\n  };\n});\nconst getAuth = createSyncGetAuth({\n  debugLoggerName: \"getAuth()\",\n  noAuthStatusMessage: (0,_errors__WEBPACK_IMPORTED_MODULE_7__.getAuthAuthHeaderMissing)()\n});\n\n//# sourceMappingURL=createGetAuth.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vc2VydmVyL2NyZWF0ZUdldEF1dGguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBOEI7QUFDc0I7QUFDQTtBQUNGO0FBQ3NCO0FBSWpDO0FBQ2E7QUFDZTtBQUN4QjtBQUMzQztBQUNBO0FBQ0E7QUFDQSxDQUFDLEtBQUssOERBQVU7QUFDaEI7QUFDQSxRQUFRLGtFQUFRLENBQUMseURBQVMsTUFBTSw4REFBUztBQUN6QztBQUNBO0FBQ0EsU0FBUyxxRUFBcUI7QUFDOUIsVUFBVSxnRkFBK0I7QUFDekMsUUFBUSx3REFBZ0I7QUFDeEI7QUFDQSxxREFBcUQsOE1BQXFDO0FBQzFGO0FBQ0E7QUFDQTtBQUNBLE1BQU0sd0RBQWdCO0FBQ3RCO0FBQ0Esb0RBQW9EO0FBQ3BELGFBQWEsb0ZBQThCLFNBQVMsNkVBQTZFO0FBQ2pJO0FBQ0EseUNBQXlDLDBFQUEwRTtBQUNuSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxDQUFDLEtBQUssOERBQVU7QUFDaEI7QUFDQSxRQUFRLGtFQUFRLENBQUMseURBQVMsTUFBTSw4REFBUztBQUN6QztBQUNBO0FBQ0EsSUFBSSx3REFBZ0I7QUFDcEIsb0RBQW9EO0FBQ3BELGFBQWEsMkZBQXFDLFNBQVMsNkVBQTZFO0FBQ3hJO0FBQ0EseUNBQXlDLDBFQUEwRTtBQUNuSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsdUJBQXVCLGlFQUF3QjtBQUMvQyxDQUFDO0FBS0M7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxIUFxcRGVza3RvcFxcQmV5b25kX2NoYXRcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAY2xlcmtcXG5leHRqc1xcZGlzdFxcZXNtXFxzZXJ2ZXJcXGNyZWF0ZUdldEF1dGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vY2h1bmstQlVTWUEyQjQuanNcIjtcbmltcG9ydCB7IGNvbnN0YW50cyB9IGZyb20gXCJAY2xlcmsvYmFja2VuZC9pbnRlcm5hbFwiO1xuaW1wb3J0IHsgaXNUcnV0aHkgfSBmcm9tIFwiQGNsZXJrL3NoYXJlZC91bmRlcnNjb3JlXCI7XG5pbXBvcnQgeyB3aXRoTG9nZ2VyIH0gZnJvbSBcIi4uL3V0aWxzL2RlYnVnTG9nZ2VyXCI7XG5pbXBvcnQgeyBpc05leHRXaXRoVW5zdGFibGVTZXJ2ZXJBY3Rpb25zIH0gZnJvbSBcIi4uL3V0aWxzL3Nkay12ZXJzaW9uc1wiO1xuaW1wb3J0IHtcbiAgZ2V0QXV0aERhdGFGcm9tUmVxdWVzdCBhcyBnZXRBdXRoRGF0YUZyb21SZXF1ZXN0T3JpZ2luYWwsXG4gIGdldFNlc3Npb25BdXRoRGF0YUZyb21SZXF1ZXN0IGFzIGdldFNlc3Npb25BdXRoRGF0YUZyb21SZXF1ZXN0T3JpZ2luYWxcbn0gZnJvbSBcIi4vZGF0YS9nZXRBdXRoRGF0YUZyb21SZXF1ZXN0XCI7XG5pbXBvcnQgeyBnZXRBdXRoQXV0aEhlYWRlck1pc3NpbmcgfSBmcm9tIFwiLi9lcnJvcnNcIjtcbmltcG9ydCB7IGRldGVjdENsZXJrTWlkZGxld2FyZSwgZ2V0SGVhZGVyIH0gZnJvbSBcIi4vaGVhZGVycy11dGlsc1wiO1xuaW1wb3J0IHsgYXNzZXJ0QXV0aFN0YXR1cyB9IGZyb20gXCIuL3V0aWxzXCI7XG5jb25zdCBjcmVhdGVBc3luY0dldEF1dGggPSAoe1xuICBkZWJ1Z0xvZ2dlck5hbWUsXG4gIG5vQXV0aFN0YXR1c01lc3NhZ2Vcbn0pID0+IHdpdGhMb2dnZXIoZGVidWdMb2dnZXJOYW1lLCAobG9nZ2VyKSA9PiB7XG4gIHJldHVybiBhc3luYyAocmVxLCBvcHRzKSA9PiB7XG4gICAgaWYgKGlzVHJ1dGh5KGdldEhlYWRlcihyZXEsIGNvbnN0YW50cy5IZWFkZXJzLkVuYWJsZURlYnVnKSkpIHtcbiAgICAgIGxvZ2dlci5lbmFibGUoKTtcbiAgICB9XG4gICAgaWYgKCFkZXRlY3RDbGVya01pZGRsZXdhcmUocmVxKSkge1xuICAgICAgaWYgKGlzTmV4dFdpdGhVbnN0YWJsZVNlcnZlckFjdGlvbnMpIHtcbiAgICAgICAgYXNzZXJ0QXV0aFN0YXR1cyhyZXEsIG5vQXV0aFN0YXR1c01lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgY29uc3QgbWlzc0NvbmZpZ3VyZWRNaWRkbGV3YXJlTG9jYXRpb24gPSBhd2FpdCBpbXBvcnQoXCIuL2ZzL21pZGRsZXdhcmUtbG9jYXRpb24uanNcIikudGhlbigobSkgPT4gbS5zdWdnZXN0TWlkZGxld2FyZUxvY2F0aW9uKCkpLmNhdGNoKCgpID0+IHZvaWQgMCk7XG4gICAgICBpZiAobWlzc0NvbmZpZ3VyZWRNaWRkbGV3YXJlTG9jYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1pc3NDb25maWd1cmVkTWlkZGxld2FyZUxvY2F0aW9uKTtcbiAgICAgIH1cbiAgICAgIGFzc2VydEF1dGhTdGF0dXMocmVxLCBub0F1dGhTdGF0dXNNZXNzYWdlKTtcbiAgICB9XG4gICAgY29uc3QgZ2V0QXV0aERhdGFGcm9tUmVxdWVzdCA9IChyZXEyLCBvcHRzMiA9IHt9KSA9PiB7XG4gICAgICByZXR1cm4gZ2V0QXV0aERhdGFGcm9tUmVxdWVzdE9yaWdpbmFsKHJlcTIsIHsgLi4ub3B0czIsIGxvZ2dlciwgYWNjZXB0c1Rva2VuOiBvcHRzMiA9PSBudWxsID8gdm9pZCAwIDogb3B0czIuYWNjZXB0c1Rva2VuIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIGdldEF1dGhEYXRhRnJvbVJlcXVlc3QocmVxLCB7IC4uLm9wdHMsIGxvZ2dlciwgYWNjZXB0c1Rva2VuOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmFjY2VwdHNUb2tlbiB9KTtcbiAgfTtcbn0pO1xuY29uc3QgY3JlYXRlU3luY0dldEF1dGggPSAoe1xuICBkZWJ1Z0xvZ2dlck5hbWUsXG4gIG5vQXV0aFN0YXR1c01lc3NhZ2Vcbn0pID0+IHdpdGhMb2dnZXIoZGVidWdMb2dnZXJOYW1lLCAobG9nZ2VyKSA9PiB7XG4gIHJldHVybiAocmVxLCBvcHRzKSA9PiB7XG4gICAgaWYgKGlzVHJ1dGh5KGdldEhlYWRlcihyZXEsIGNvbnN0YW50cy5IZWFkZXJzLkVuYWJsZURlYnVnKSkpIHtcbiAgICAgIGxvZ2dlci5lbmFibGUoKTtcbiAgICB9XG4gICAgYXNzZXJ0QXV0aFN0YXR1cyhyZXEsIG5vQXV0aFN0YXR1c01lc3NhZ2UpO1xuICAgIGNvbnN0IGdldEF1dGhEYXRhRnJvbVJlcXVlc3QgPSAocmVxMiwgb3B0czIgPSB7fSkgPT4ge1xuICAgICAgcmV0dXJuIGdldFNlc3Npb25BdXRoRGF0YUZyb21SZXF1ZXN0T3JpZ2luYWwocmVxMiwgeyAuLi5vcHRzMiwgbG9nZ2VyLCBhY2NlcHRzVG9rZW46IG9wdHMyID09IG51bGwgPyB2b2lkIDAgOiBvcHRzMi5hY2NlcHRzVG9rZW4gfSk7XG4gICAgfTtcbiAgICByZXR1cm4gZ2V0QXV0aERhdGFGcm9tUmVxdWVzdChyZXEsIHsgLi4ub3B0cywgbG9nZ2VyLCBhY2NlcHRzVG9rZW46IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYWNjZXB0c1Rva2VuIH0pO1xuICB9O1xufSk7XG5jb25zdCBnZXRBdXRoID0gY3JlYXRlU3luY0dldEF1dGgoe1xuICBkZWJ1Z0xvZ2dlck5hbWU6IFwiZ2V0QXV0aCgpXCIsXG4gIG5vQXV0aFN0YXR1c01lc3NhZ2U6IGdldEF1dGhBdXRoSGVhZGVyTWlzc2luZygpXG59KTtcbmV4cG9ydCB7XG4gIGNyZWF0ZUFzeW5jR2V0QXV0aCxcbiAgY3JlYXRlU3luY0dldEF1dGgsXG4gIGdldEF1dGhcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVHZXRBdXRoLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/createGetAuth.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/data/getAuthDataFromRequest.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/data/getAuthDataFromRequest.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAuthDataFromRequest: () => (/* binding */ getAuthDataFromRequest),\n/* harmony export */   getSessionAuthDataFromRequest: () => (/* binding */ getSessionAuthDataFromRequest)\n/* harmony export */ });\n/* harmony import */ var _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/backend/internal */ \"(middleware)/./node_modules/@clerk/backend/dist/internal.mjs\");\n/* harmony import */ var _clerk_backend_jwt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @clerk/backend/jwt */ \"(middleware)/./node_modules/@clerk/backend/dist/jwt/index.mjs\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constants */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/constants.js\");\n/* harmony import */ var _headers_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../headers-utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/headers-utils.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/utils.js\");\n\n\n\n\n\n\nconst getAuthHeaders = (req) => {\n  return {\n    authStatus: (0,_headers_utils__WEBPACK_IMPORTED_MODULE_2__.getAuthKeyFromRequest)(req, \"AuthStatus\"),\n    authToken: (0,_headers_utils__WEBPACK_IMPORTED_MODULE_2__.getAuthKeyFromRequest)(req, \"AuthToken\"),\n    authMessage: (0,_headers_utils__WEBPACK_IMPORTED_MODULE_2__.getAuthKeyFromRequest)(req, \"AuthMessage\"),\n    authReason: (0,_headers_utils__WEBPACK_IMPORTED_MODULE_2__.getAuthKeyFromRequest)(req, \"AuthReason\"),\n    authSignature: (0,_headers_utils__WEBPACK_IMPORTED_MODULE_2__.getAuthKeyFromRequest)(req, \"AuthSignature\")\n  };\n};\nconst createAuthOptions = (req, opts, treatPendingAsSignedOut = true) => {\n  const encryptedRequestData = (0,_headers_utils__WEBPACK_IMPORTED_MODULE_2__.getHeader)(req, _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.ClerkRequestData);\n  const decryptedRequestData = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.decryptClerkRequestData)(encryptedRequestData);\n  return {\n    secretKey: (opts == null ? void 0 : opts.secretKey) || decryptedRequestData.secretKey || _constants__WEBPACK_IMPORTED_MODULE_4__.SECRET_KEY,\n    publishableKey: decryptedRequestData.publishableKey || _constants__WEBPACK_IMPORTED_MODULE_4__.PUBLISHABLE_KEY,\n    apiUrl: _constants__WEBPACK_IMPORTED_MODULE_4__.API_URL,\n    apiVersion: _constants__WEBPACK_IMPORTED_MODULE_4__.API_VERSION,\n    authStatus: (0,_headers_utils__WEBPACK_IMPORTED_MODULE_2__.getAuthKeyFromRequest)(req, \"AuthStatus\"),\n    authMessage: (0,_headers_utils__WEBPACK_IMPORTED_MODULE_2__.getAuthKeyFromRequest)(req, \"AuthMessage\"),\n    authReason: (0,_headers_utils__WEBPACK_IMPORTED_MODULE_2__.getAuthKeyFromRequest)(req, \"AuthReason\"),\n    treatPendingAsSignedOut\n  };\n};\nconst getSessionAuthDataFromRequest = (req, { treatPendingAsSignedOut = true, ...opts } = {}) => {\n  var _a, _b;\n  const { authStatus, authMessage, authReason, authToken, authSignature } = getAuthHeaders(req);\n  (_a = opts.logger) == null ? void 0 : _a.debug(\"headers\", { authStatus, authMessage, authReason });\n  const options = createAuthOptions(req, opts, treatPendingAsSignedOut);\n  if (!(0,_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.isTokenTypeAccepted)(_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.TokenType.SessionToken, opts.acceptsToken || _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.TokenType.SessionToken)) {\n    return (0,_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.signedOutAuthObject)(options);\n  }\n  let authObject;\n  if (!authStatus || authStatus !== _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.AuthStatus.SignedIn) {\n    authObject = (0,_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.signedOutAuthObject)(options);\n  } else {\n    (0,_utils__WEBPACK_IMPORTED_MODULE_3__.assertTokenSignature)(authToken, options.secretKey, authSignature);\n    const jwt = (0,_clerk_backend_jwt__WEBPACK_IMPORTED_MODULE_1__.decodeJwt)(authToken);\n    (_b = opts.logger) == null ? void 0 : _b.debug(\"jwt\", jwt.raw);\n    return (0,_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.getAuthObjectFromJwt)(jwt, options);\n  }\n  return authObject;\n};\nconst getAuthDataFromRequest = (req, opts = {}) => {\n  var _a, _b;\n  const { authStatus, authMessage, authReason } = getAuthHeaders(req);\n  (_a = opts.logger) == null ? void 0 : _a.debug(\"headers\", { authStatus, authMessage, authReason });\n  const encryptedRequestData = (0,_headers_utils__WEBPACK_IMPORTED_MODULE_2__.getHeader)(req, _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.ClerkRequestData);\n  const decryptedRequestData = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.decryptClerkRequestData)(encryptedRequestData);\n  const bearerToken = (_b = (0,_headers_utils__WEBPACK_IMPORTED_MODULE_2__.getHeader)(req, _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.Authorization)) == null ? void 0 : _b.replace(\"Bearer \", \"\");\n  const acceptsToken = opts.acceptsToken || _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.TokenType.SessionToken;\n  const options = createAuthOptions(req, opts);\n  const machineAuthObject = handleMachineToken(\n    bearerToken,\n    decryptedRequestData.machineAuthObject,\n    acceptsToken,\n    options\n  );\n  if (machineAuthObject) {\n    return machineAuthObject;\n  }\n  if (bearerToken && Array.isArray(acceptsToken) && !acceptsToken.includes(_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.TokenType.SessionToken)) {\n    return (0,_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.invalidTokenAuthObject)();\n  }\n  return getSessionAuthDataFromRequest(req, opts);\n};\nconst handleMachineToken = (bearerToken, rawAuthObject, acceptsToken, options) => {\n  const hasMachineToken = bearerToken && (0,_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.isMachineTokenByPrefix)(bearerToken);\n  const acceptsOnlySessionToken = acceptsToken === _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.TokenType.SessionToken || Array.isArray(acceptsToken) && acceptsToken.length === 1 && acceptsToken[0] === _clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.TokenType.SessionToken;\n  if (hasMachineToken && rawAuthObject && !acceptsOnlySessionToken) {\n    const authObject = (0,_clerk_backend_internal__WEBPACK_IMPORTED_MODULE_0__.getAuthObjectForAcceptedToken)({\n      authObject: {\n        ...rawAuthObject,\n        debug: () => options\n      },\n      acceptsToken\n    });\n    return {\n      ...authObject,\n      getToken: () => authObject.isAuthenticated ? Promise.resolve(bearerToken) : Promise.resolve(null),\n      has: () => false\n    };\n  }\n  return null;\n};\n\n//# sourceMappingURL=getAuthDataFromRequest.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vc2VydmVyL2RhdGEvZ2V0QXV0aERhdGFGcm9tUmVxdWVzdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQWlDO0FBV0E7QUFDYztBQUNrQztBQUNiO0FBQ0s7QUFDekU7QUFDQTtBQUNBLGdCQUFnQixxRUFBcUI7QUFDckMsZUFBZSxxRUFBcUI7QUFDcEMsaUJBQWlCLHFFQUFxQjtBQUN0QyxnQkFBZ0IscUVBQXFCO0FBQ3JDLG1CQUFtQixxRUFBcUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLHlEQUFTLE1BQU0sOERBQVM7QUFDdkQsK0JBQStCLCtEQUF1QjtBQUN0RDtBQUNBLDZGQUE2RixrREFBVTtBQUN2RywyREFBMkQsdURBQWU7QUFDMUUsWUFBWSwrQ0FBTztBQUNuQixnQkFBZ0IsbURBQVc7QUFDM0IsZ0JBQWdCLHFFQUFxQjtBQUNyQyxpQkFBaUIscUVBQXFCO0FBQ3RDLGdCQUFnQixxRUFBcUI7QUFDckM7QUFDQTtBQUNBO0FBQ0EsOENBQThDLDBDQUEwQyxJQUFJO0FBQzVGO0FBQ0EsVUFBVSxnRUFBZ0U7QUFDMUUsOERBQThELHFDQUFxQztBQUNuRztBQUNBLE9BQU8sNEVBQW1CLENBQUMsOERBQVMsb0NBQW9DLDhEQUFTO0FBQ2pGLFdBQVcsNEVBQW1CO0FBQzlCO0FBQ0E7QUFDQSxvQ0FBb0MsK0RBQVU7QUFDOUMsaUJBQWlCLDRFQUFtQjtBQUNwQyxJQUFJO0FBQ0osSUFBSSw0REFBb0I7QUFDeEIsZ0JBQWdCLDZEQUFTO0FBQ3pCO0FBQ0EsV0FBVyw2RUFBb0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0EsVUFBVSxzQ0FBc0M7QUFDaEQsOERBQThELHFDQUFxQztBQUNuRywrQkFBK0IseURBQVMsTUFBTSw4REFBUztBQUN2RCwrQkFBK0IsK0RBQXVCO0FBQ3RELDRCQUE0Qix5REFBUyxNQUFNLDhEQUFTO0FBQ3BELDRDQUE0Qyw4REFBUztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRSw4REFBUztBQUNwRixXQUFXLCtFQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QywrRUFBc0I7QUFDL0QsbURBQW1ELDhEQUFTLGlHQUFpRyw4REFBUztBQUN0SztBQUNBLHVCQUF1QixzRkFBNkI7QUFDcEQ7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJRTtBQUNGIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEhQXFxEZXNrdG9wXFxCZXlvbmRfY2hhdFxcY2xpZW50XFxub2RlX21vZHVsZXNcXEBjbGVya1xcbmV4dGpzXFxkaXN0XFxlc21cXHNlcnZlclxcZGF0YVxcZ2V0QXV0aERhdGFGcm9tUmVxdWVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuLi8uLi9jaHVuay1CVVNZQTJCNC5qc1wiO1xuaW1wb3J0IHtcbiAgQXV0aFN0YXR1cyxcbiAgY29uc3RhbnRzLFxuICBnZXRBdXRoT2JqZWN0Rm9yQWNjZXB0ZWRUb2tlbixcbiAgZ2V0QXV0aE9iamVjdEZyb21Kd3QsXG4gIGludmFsaWRUb2tlbkF1dGhPYmplY3QsXG4gIGlzTWFjaGluZVRva2VuQnlQcmVmaXgsXG4gIGlzVG9rZW5UeXBlQWNjZXB0ZWQsXG4gIHNpZ25lZE91dEF1dGhPYmplY3QsXG4gIFRva2VuVHlwZVxufSBmcm9tIFwiQGNsZXJrL2JhY2tlbmQvaW50ZXJuYWxcIjtcbmltcG9ydCB7IGRlY29kZUp3dCB9IGZyb20gXCJAY2xlcmsvYmFja2VuZC9qd3RcIjtcbmltcG9ydCB7IEFQSV9VUkwsIEFQSV9WRVJTSU9OLCBQVUJMSVNIQUJMRV9LRVksIFNFQ1JFVF9LRVkgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBnZXRBdXRoS2V5RnJvbVJlcXVlc3QsIGdldEhlYWRlciB9IGZyb20gXCIuLi9oZWFkZXJzLXV0aWxzXCI7XG5pbXBvcnQgeyBhc3NlcnRUb2tlblNpZ25hdHVyZSwgZGVjcnlwdENsZXJrUmVxdWVzdERhdGEgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmNvbnN0IGdldEF1dGhIZWFkZXJzID0gKHJlcSkgPT4ge1xuICByZXR1cm4ge1xuICAgIGF1dGhTdGF0dXM6IGdldEF1dGhLZXlGcm9tUmVxdWVzdChyZXEsIFwiQXV0aFN0YXR1c1wiKSxcbiAgICBhdXRoVG9rZW46IGdldEF1dGhLZXlGcm9tUmVxdWVzdChyZXEsIFwiQXV0aFRva2VuXCIpLFxuICAgIGF1dGhNZXNzYWdlOiBnZXRBdXRoS2V5RnJvbVJlcXVlc3QocmVxLCBcIkF1dGhNZXNzYWdlXCIpLFxuICAgIGF1dGhSZWFzb246IGdldEF1dGhLZXlGcm9tUmVxdWVzdChyZXEsIFwiQXV0aFJlYXNvblwiKSxcbiAgICBhdXRoU2lnbmF0dXJlOiBnZXRBdXRoS2V5RnJvbVJlcXVlc3QocmVxLCBcIkF1dGhTaWduYXR1cmVcIilcbiAgfTtcbn07XG5jb25zdCBjcmVhdGVBdXRoT3B0aW9ucyA9IChyZXEsIG9wdHMsIHRyZWF0UGVuZGluZ0FzU2lnbmVkT3V0ID0gdHJ1ZSkgPT4ge1xuICBjb25zdCBlbmNyeXB0ZWRSZXF1ZXN0RGF0YSA9IGdldEhlYWRlcihyZXEsIGNvbnN0YW50cy5IZWFkZXJzLkNsZXJrUmVxdWVzdERhdGEpO1xuICBjb25zdCBkZWNyeXB0ZWRSZXF1ZXN0RGF0YSA9IGRlY3J5cHRDbGVya1JlcXVlc3REYXRhKGVuY3J5cHRlZFJlcXVlc3REYXRhKTtcbiAgcmV0dXJuIHtcbiAgICBzZWNyZXRLZXk6IChvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnNlY3JldEtleSkgfHwgZGVjcnlwdGVkUmVxdWVzdERhdGEuc2VjcmV0S2V5IHx8IFNFQ1JFVF9LRVksXG4gICAgcHVibGlzaGFibGVLZXk6IGRlY3J5cHRlZFJlcXVlc3REYXRhLnB1Ymxpc2hhYmxlS2V5IHx8IFBVQkxJU0hBQkxFX0tFWSxcbiAgICBhcGlVcmw6IEFQSV9VUkwsXG4gICAgYXBpVmVyc2lvbjogQVBJX1ZFUlNJT04sXG4gICAgYXV0aFN0YXR1czogZ2V0QXV0aEtleUZyb21SZXF1ZXN0KHJlcSwgXCJBdXRoU3RhdHVzXCIpLFxuICAgIGF1dGhNZXNzYWdlOiBnZXRBdXRoS2V5RnJvbVJlcXVlc3QocmVxLCBcIkF1dGhNZXNzYWdlXCIpLFxuICAgIGF1dGhSZWFzb246IGdldEF1dGhLZXlGcm9tUmVxdWVzdChyZXEsIFwiQXV0aFJlYXNvblwiKSxcbiAgICB0cmVhdFBlbmRpbmdBc1NpZ25lZE91dFxuICB9O1xufTtcbmNvbnN0IGdldFNlc3Npb25BdXRoRGF0YUZyb21SZXF1ZXN0ID0gKHJlcSwgeyB0cmVhdFBlbmRpbmdBc1NpZ25lZE91dCA9IHRydWUsIC4uLm9wdHMgfSA9IHt9KSA9PiB7XG4gIHZhciBfYSwgX2I7XG4gIGNvbnN0IHsgYXV0aFN0YXR1cywgYXV0aE1lc3NhZ2UsIGF1dGhSZWFzb24sIGF1dGhUb2tlbiwgYXV0aFNpZ25hdHVyZSB9ID0gZ2V0QXV0aEhlYWRlcnMocmVxKTtcbiAgKF9hID0gb3B0cy5sb2dnZXIpID09IG51bGwgPyB2b2lkIDAgOiBfYS5kZWJ1ZyhcImhlYWRlcnNcIiwgeyBhdXRoU3RhdHVzLCBhdXRoTWVzc2FnZSwgYXV0aFJlYXNvbiB9KTtcbiAgY29uc3Qgb3B0aW9ucyA9IGNyZWF0ZUF1dGhPcHRpb25zKHJlcSwgb3B0cywgdHJlYXRQZW5kaW5nQXNTaWduZWRPdXQpO1xuICBpZiAoIWlzVG9rZW5UeXBlQWNjZXB0ZWQoVG9rZW5UeXBlLlNlc3Npb25Ub2tlbiwgb3B0cy5hY2NlcHRzVG9rZW4gfHwgVG9rZW5UeXBlLlNlc3Npb25Ub2tlbikpIHtcbiAgICByZXR1cm4gc2lnbmVkT3V0QXV0aE9iamVjdChvcHRpb25zKTtcbiAgfVxuICBsZXQgYXV0aE9iamVjdDtcbiAgaWYgKCFhdXRoU3RhdHVzIHx8IGF1dGhTdGF0dXMgIT09IEF1dGhTdGF0dXMuU2lnbmVkSW4pIHtcbiAgICBhdXRoT2JqZWN0ID0gc2lnbmVkT3V0QXV0aE9iamVjdChvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBhc3NlcnRUb2tlblNpZ25hdHVyZShhdXRoVG9rZW4sIG9wdGlvbnMuc2VjcmV0S2V5LCBhdXRoU2lnbmF0dXJlKTtcbiAgICBjb25zdCBqd3QgPSBkZWNvZGVKd3QoYXV0aFRva2VuKTtcbiAgICAoX2IgPSBvcHRzLmxvZ2dlcikgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmRlYnVnKFwiand0XCIsIGp3dC5yYXcpO1xuICAgIHJldHVybiBnZXRBdXRoT2JqZWN0RnJvbUp3dChqd3QsIG9wdGlvbnMpO1xuICB9XG4gIHJldHVybiBhdXRoT2JqZWN0O1xufTtcbmNvbnN0IGdldEF1dGhEYXRhRnJvbVJlcXVlc3QgPSAocmVxLCBvcHRzID0ge30pID0+IHtcbiAgdmFyIF9hLCBfYjtcbiAgY29uc3QgeyBhdXRoU3RhdHVzLCBhdXRoTWVzc2FnZSwgYXV0aFJlYXNvbiB9ID0gZ2V0QXV0aEhlYWRlcnMocmVxKTtcbiAgKF9hID0gb3B0cy5sb2dnZXIpID09IG51bGwgPyB2b2lkIDAgOiBfYS5kZWJ1ZyhcImhlYWRlcnNcIiwgeyBhdXRoU3RhdHVzLCBhdXRoTWVzc2FnZSwgYXV0aFJlYXNvbiB9KTtcbiAgY29uc3QgZW5jcnlwdGVkUmVxdWVzdERhdGEgPSBnZXRIZWFkZXIocmVxLCBjb25zdGFudHMuSGVhZGVycy5DbGVya1JlcXVlc3REYXRhKTtcbiAgY29uc3QgZGVjcnlwdGVkUmVxdWVzdERhdGEgPSBkZWNyeXB0Q2xlcmtSZXF1ZXN0RGF0YShlbmNyeXB0ZWRSZXF1ZXN0RGF0YSk7XG4gIGNvbnN0IGJlYXJlclRva2VuID0gKF9iID0gZ2V0SGVhZGVyKHJlcSwgY29uc3RhbnRzLkhlYWRlcnMuQXV0aG9yaXphdGlvbikpID09IG51bGwgPyB2b2lkIDAgOiBfYi5yZXBsYWNlKFwiQmVhcmVyIFwiLCBcIlwiKTtcbiAgY29uc3QgYWNjZXB0c1Rva2VuID0gb3B0cy5hY2NlcHRzVG9rZW4gfHwgVG9rZW5UeXBlLlNlc3Npb25Ub2tlbjtcbiAgY29uc3Qgb3B0aW9ucyA9IGNyZWF0ZUF1dGhPcHRpb25zKHJlcSwgb3B0cyk7XG4gIGNvbnN0IG1hY2hpbmVBdXRoT2JqZWN0ID0gaGFuZGxlTWFjaGluZVRva2VuKFxuICAgIGJlYXJlclRva2VuLFxuICAgIGRlY3J5cHRlZFJlcXVlc3REYXRhLm1hY2hpbmVBdXRoT2JqZWN0LFxuICAgIGFjY2VwdHNUb2tlbixcbiAgICBvcHRpb25zXG4gICk7XG4gIGlmIChtYWNoaW5lQXV0aE9iamVjdCkge1xuICAgIHJldHVybiBtYWNoaW5lQXV0aE9iamVjdDtcbiAgfVxuICBpZiAoYmVhcmVyVG9rZW4gJiYgQXJyYXkuaXNBcnJheShhY2NlcHRzVG9rZW4pICYmICFhY2NlcHRzVG9rZW4uaW5jbHVkZXMoVG9rZW5UeXBlLlNlc3Npb25Ub2tlbikpIHtcbiAgICByZXR1cm4gaW52YWxpZFRva2VuQXV0aE9iamVjdCgpO1xuICB9XG4gIHJldHVybiBnZXRTZXNzaW9uQXV0aERhdGFGcm9tUmVxdWVzdChyZXEsIG9wdHMpO1xufTtcbmNvbnN0IGhhbmRsZU1hY2hpbmVUb2tlbiA9IChiZWFyZXJUb2tlbiwgcmF3QXV0aE9iamVjdCwgYWNjZXB0c1Rva2VuLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IGhhc01hY2hpbmVUb2tlbiA9IGJlYXJlclRva2VuICYmIGlzTWFjaGluZVRva2VuQnlQcmVmaXgoYmVhcmVyVG9rZW4pO1xuICBjb25zdCBhY2NlcHRzT25seVNlc3Npb25Ub2tlbiA9IGFjY2VwdHNUb2tlbiA9PT0gVG9rZW5UeXBlLlNlc3Npb25Ub2tlbiB8fCBBcnJheS5pc0FycmF5KGFjY2VwdHNUb2tlbikgJiYgYWNjZXB0c1Rva2VuLmxlbmd0aCA9PT0gMSAmJiBhY2NlcHRzVG9rZW5bMF0gPT09IFRva2VuVHlwZS5TZXNzaW9uVG9rZW47XG4gIGlmIChoYXNNYWNoaW5lVG9rZW4gJiYgcmF3QXV0aE9iamVjdCAmJiAhYWNjZXB0c09ubHlTZXNzaW9uVG9rZW4pIHtcbiAgICBjb25zdCBhdXRoT2JqZWN0ID0gZ2V0QXV0aE9iamVjdEZvckFjY2VwdGVkVG9rZW4oe1xuICAgICAgYXV0aE9iamVjdDoge1xuICAgICAgICAuLi5yYXdBdXRoT2JqZWN0LFxuICAgICAgICBkZWJ1ZzogKCkgPT4gb3B0aW9uc1xuICAgICAgfSxcbiAgICAgIGFjY2VwdHNUb2tlblxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5hdXRoT2JqZWN0LFxuICAgICAgZ2V0VG9rZW46ICgpID0+IGF1dGhPYmplY3QuaXNBdXRoZW50aWNhdGVkID8gUHJvbWlzZS5yZXNvbHZlKGJlYXJlclRva2VuKSA6IFByb21pc2UucmVzb2x2ZShudWxsKSxcbiAgICAgIGhhczogKCkgPT4gZmFsc2VcbiAgICB9O1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbmV4cG9ydCB7XG4gIGdldEF1dGhEYXRhRnJvbVJlcXVlc3QsXG4gIGdldFNlc3Npb25BdXRoRGF0YUZyb21SZXF1ZXN0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0QXV0aERhdGFGcm9tUmVxdWVzdC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/data/getAuthDataFromRequest.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/fs/middleware-location.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/fs/middleware-location.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasSrcAppDir: () => (/* binding */ hasSrcAppDir),\n/* harmony export */   suggestMiddlewareLocation: () => (/* binding */ suggestMiddlewareLocation)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/fs/utils.js\");\n\n\nfunction hasSrcAppDir() {\n  const { existsSync } = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.nodeFsOrThrow)();\n  const path = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.nodePathOrThrow)();\n  const cwd = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.nodeCwdOrThrow)();\n  const projectWithAppSrc = path.join(cwd(), \"src\", \"app\");\n  return !!existsSync(projectWithAppSrc);\n}\nfunction suggestMiddlewareLocation() {\n  const fileExtensions = [\"ts\", \"js\"];\n  const suggestionMessage = (extension, to, from) => `Clerk: clerkMiddleware() was not run, your middleware file might be misplaced. Move your middleware file to ./${to}middleware.${extension}. Currently located at ./${from}middleware.${extension}`;\n  const { existsSync } = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.nodeFsOrThrow)();\n  const path = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.nodePathOrThrow)();\n  const cwd = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.nodeCwdOrThrow)();\n  const projectWithAppSrcPath = path.join(cwd(), \"src\", \"app\");\n  const projectWithAppPath = path.join(cwd(), \"app\");\n  const checkMiddlewareLocation = (basePath, to, from) => {\n    for (const fileExtension of fileExtensions) {\n      if (existsSync(path.join(basePath, `middleware.${fileExtension}`))) {\n        return suggestionMessage(fileExtension, to, from);\n      }\n    }\n    return void 0;\n  };\n  if (existsSync(projectWithAppSrcPath)) {\n    return checkMiddlewareLocation(projectWithAppSrcPath, \"src/\", \"src/app/\") || checkMiddlewareLocation(cwd(), \"src/\", \"\");\n  }\n  if (existsSync(projectWithAppPath)) {\n    return checkMiddlewareLocation(projectWithAppPath, \"\", \"app/\");\n  }\n  return void 0;\n}\n\n//# sourceMappingURL=middleware-location.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vc2VydmVyL2ZzL21pZGRsZXdhcmUtbG9jYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ3dDO0FBQ3pFO0FBQ0EsVUFBVSxhQUFhLEVBQUUscURBQWE7QUFDdEMsZUFBZSx1REFBZTtBQUM5QixjQUFjLHNEQUFjO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzS0FBc0ssR0FBRyxhQUFhLFVBQVUsMkJBQTJCLEtBQUssYUFBYSxVQUFVO0FBQ3ZQLFVBQVUsYUFBYSxFQUFFLHFEQUFhO0FBQ3RDLGVBQWUsdURBQWU7QUFDOUIsY0FBYyxzREFBYztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxjQUFjO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUU7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxIUFxcRGVza3RvcFxcQmV5b25kX2NoYXRcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxAY2xlcmtcXG5leHRqc1xcZGlzdFxcZXNtXFxzZXJ2ZXJcXGZzXFxtaWRkbGV3YXJlLWxvY2F0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uLy4uL2NodW5rLUJVU1lBMkI0LmpzXCI7XG5pbXBvcnQgeyBub2RlQ3dkT3JUaHJvdywgbm9kZUZzT3JUaHJvdywgbm9kZVBhdGhPclRocm93IH0gZnJvbSBcIi4vdXRpbHNcIjtcbmZ1bmN0aW9uIGhhc1NyY0FwcERpcigpIHtcbiAgY29uc3QgeyBleGlzdHNTeW5jIH0gPSBub2RlRnNPclRocm93KCk7XG4gIGNvbnN0IHBhdGggPSBub2RlUGF0aE9yVGhyb3coKTtcbiAgY29uc3QgY3dkID0gbm9kZUN3ZE9yVGhyb3coKTtcbiAgY29uc3QgcHJvamVjdFdpdGhBcHBTcmMgPSBwYXRoLmpvaW4oY3dkKCksIFwic3JjXCIsIFwiYXBwXCIpO1xuICByZXR1cm4gISFleGlzdHNTeW5jKHByb2plY3RXaXRoQXBwU3JjKTtcbn1cbmZ1bmN0aW9uIHN1Z2dlc3RNaWRkbGV3YXJlTG9jYXRpb24oKSB7XG4gIGNvbnN0IGZpbGVFeHRlbnNpb25zID0gW1widHNcIiwgXCJqc1wiXTtcbiAgY29uc3Qgc3VnZ2VzdGlvbk1lc3NhZ2UgPSAoZXh0ZW5zaW9uLCB0bywgZnJvbSkgPT4gYENsZXJrOiBjbGVya01pZGRsZXdhcmUoKSB3YXMgbm90IHJ1biwgeW91ciBtaWRkbGV3YXJlIGZpbGUgbWlnaHQgYmUgbWlzcGxhY2VkLiBNb3ZlIHlvdXIgbWlkZGxld2FyZSBmaWxlIHRvIC4vJHt0b31taWRkbGV3YXJlLiR7ZXh0ZW5zaW9ufS4gQ3VycmVudGx5IGxvY2F0ZWQgYXQgLi8ke2Zyb219bWlkZGxld2FyZS4ke2V4dGVuc2lvbn1gO1xuICBjb25zdCB7IGV4aXN0c1N5bmMgfSA9IG5vZGVGc09yVGhyb3coKTtcbiAgY29uc3QgcGF0aCA9IG5vZGVQYXRoT3JUaHJvdygpO1xuICBjb25zdCBjd2QgPSBub2RlQ3dkT3JUaHJvdygpO1xuICBjb25zdCBwcm9qZWN0V2l0aEFwcFNyY1BhdGggPSBwYXRoLmpvaW4oY3dkKCksIFwic3JjXCIsIFwiYXBwXCIpO1xuICBjb25zdCBwcm9qZWN0V2l0aEFwcFBhdGggPSBwYXRoLmpvaW4oY3dkKCksIFwiYXBwXCIpO1xuICBjb25zdCBjaGVja01pZGRsZXdhcmVMb2NhdGlvbiA9IChiYXNlUGF0aCwgdG8sIGZyb20pID0+IHtcbiAgICBmb3IgKGNvbnN0IGZpbGVFeHRlbnNpb24gb2YgZmlsZUV4dGVuc2lvbnMpIHtcbiAgICAgIGlmIChleGlzdHNTeW5jKHBhdGguam9pbihiYXNlUGF0aCwgYG1pZGRsZXdhcmUuJHtmaWxlRXh0ZW5zaW9ufWApKSkge1xuICAgICAgICByZXR1cm4gc3VnZ2VzdGlvbk1lc3NhZ2UoZmlsZUV4dGVuc2lvbiwgdG8sIGZyb20pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm9pZCAwO1xuICB9O1xuICBpZiAoZXhpc3RzU3luYyhwcm9qZWN0V2l0aEFwcFNyY1BhdGgpKSB7XG4gICAgcmV0dXJuIGNoZWNrTWlkZGxld2FyZUxvY2F0aW9uKHByb2plY3RXaXRoQXBwU3JjUGF0aCwgXCJzcmMvXCIsIFwic3JjL2FwcC9cIikgfHwgY2hlY2tNaWRkbGV3YXJlTG9jYXRpb24oY3dkKCksIFwic3JjL1wiLCBcIlwiKTtcbiAgfVxuICBpZiAoZXhpc3RzU3luYyhwcm9qZWN0V2l0aEFwcFBhdGgpKSB7XG4gICAgcmV0dXJuIGNoZWNrTWlkZGxld2FyZUxvY2F0aW9uKHByb2plY3RXaXRoQXBwUGF0aCwgXCJcIiwgXCJhcHAvXCIpO1xuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG5leHBvcnQge1xuICBoYXNTcmNBcHBEaXIsXG4gIHN1Z2dlc3RNaWRkbGV3YXJlTG9jYXRpb25cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taWRkbGV3YXJlLWxvY2F0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/fs/middleware-location.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/fs/utils.js":
/*!****************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/fs/utils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   nodeCwdOrThrow: () => (/* binding */ nodeCwdOrThrow),\n/* harmony export */   nodeFsOrThrow: () => (/* binding */ nodeFsOrThrow),\n/* harmony export */   nodePathOrThrow: () => (/* binding */ nodePathOrThrow)\n/* harmony export */ });\n/* harmony import */ var _safe_node_apis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! #safe-node-apis */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/runtime/browser/safe-node-apis.js\");\n\n\nfunction assertNotNullable(value, moduleName) {\n  if (!value) {\n    throw new Error(`Clerk: ${moduleName} is missing. This is an internal error. Please contact Clerk's support.`);\n  }\n}\nconst nodeFsOrThrow = () => {\n  assertNotNullable(_safe_node_apis__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fs, \"fs\");\n  return _safe_node_apis__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fs;\n};\nconst nodePathOrThrow = () => {\n  assertNotNullable(_safe_node_apis__WEBPACK_IMPORTED_MODULE_0__[\"default\"].path, \"path\");\n  return _safe_node_apis__WEBPACK_IMPORTED_MODULE_0__[\"default\"].path;\n};\nconst nodeCwdOrThrow = () => {\n  assertNotNullable(_safe_node_apis__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cwd, \"cwd\");\n  return _safe_node_apis__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cwd;\n};\n\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vc2VydmVyL2ZzL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBaUM7QUFDUztBQUMxQztBQUNBO0FBQ0EsOEJBQThCLFlBQVk7QUFDMUM7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHVEQUFXO0FBQy9CLFNBQVMsdURBQVc7QUFDcEI7QUFDQTtBQUNBLG9CQUFvQix1REFBVztBQUMvQixTQUFTLHVEQUFXO0FBQ3BCO0FBQ0E7QUFDQSxvQkFBb0IsdURBQVc7QUFDL0IsU0FBUyx1REFBVztBQUNwQjtBQUtFO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSFBcXERlc2t0b3BcXEJleW9uZF9jaGF0XFxjbGllbnRcXG5vZGVfbW9kdWxlc1xcQGNsZXJrXFxuZXh0anNcXGRpc3RcXGVzbVxcc2VydmVyXFxmc1xcdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vLi4vY2h1bmstQlVTWUEyQjQuanNcIjtcbmltcG9ydCBub2RlUnVudGltZSBmcm9tIFwiI3NhZmUtbm9kZS1hcGlzXCI7XG5mdW5jdGlvbiBhc3NlcnROb3ROdWxsYWJsZSh2YWx1ZSwgbW9kdWxlTmFtZSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDbGVyazogJHttb2R1bGVOYW1lfSBpcyBtaXNzaW5nLiBUaGlzIGlzIGFuIGludGVybmFsIGVycm9yLiBQbGVhc2UgY29udGFjdCBDbGVyaydzIHN1cHBvcnQuYCk7XG4gIH1cbn1cbmNvbnN0IG5vZGVGc09yVGhyb3cgPSAoKSA9PiB7XG4gIGFzc2VydE5vdE51bGxhYmxlKG5vZGVSdW50aW1lLmZzLCBcImZzXCIpO1xuICByZXR1cm4gbm9kZVJ1bnRpbWUuZnM7XG59O1xuY29uc3Qgbm9kZVBhdGhPclRocm93ID0gKCkgPT4ge1xuICBhc3NlcnROb3ROdWxsYWJsZShub2RlUnVudGltZS5wYXRoLCBcInBhdGhcIik7XG4gIHJldHVybiBub2RlUnVudGltZS5wYXRoO1xufTtcbmNvbnN0IG5vZGVDd2RPclRocm93ID0gKCkgPT4ge1xuICBhc3NlcnROb3ROdWxsYWJsZShub2RlUnVudGltZS5jd2QsIFwiY3dkXCIpO1xuICByZXR1cm4gbm9kZVJ1bnRpbWUuY3dkO1xufTtcbmV4cG9ydCB7XG4gIG5vZGVDd2RPclRocm93LFxuICBub2RlRnNPclRocm93LFxuICBub2RlUGF0aE9yVGhyb3dcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/fs/utils.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-custom-headers.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/keyless-custom-headers.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   collectKeylessMetadata: () => (/* binding */ collectKeylessMetadata),\n/* harmony export */   formatMetadataHeaders: () => (/* binding */ formatMetadataHeaders)\n/* harmony export */ });\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/headers */ \"(middleware)/./node_modules/next/dist/esm/api/headers.js\");\n\"use server\";\n\n\nasync function collectKeylessMetadata() {\n    var _a, _b, _c, _d, _e, _f;\n    const headerStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.headers)();\n    return {\n        nodeVersion: process.version,\n        nextVersion: getNextVersion(),\n        npmConfigUserAgent: process.env.npm_config_user_agent,\n        // eslint-disable-line\n        userAgent: (_a = headerStore.get(\"User-Agent\")) != null ? _a : \"unknown user-agent\",\n        port: process.env.PORT,\n        // eslint-disable-line\n        host: (_b = headerStore.get(\"host\")) != null ? _b : \"unknown host\",\n        xPort: (_c = headerStore.get(\"x-forwarded-port\")) != null ? _c : \"unknown x-forwarded-port\",\n        xHost: (_d = headerStore.get(\"x-forwarded-host\")) != null ? _d : \"unknown x-forwarded-host\",\n        xProtocol: (_e = headerStore.get(\"x-forwarded-proto\")) != null ? _e : \"unknown x-forwarded-proto\",\n        xClerkAuthStatus: (_f = headerStore.get(\"x-clerk-auth-status\")) != null ? _f : \"unknown x-clerk-auth-status\",\n        isCI: detectCIEnvironment()\n    };\n}\nconst CI_ENV_VARS = [\n    \"CI\",\n    \"CONTINUOUS_INTEGRATION\",\n    \"BUILD_NUMBER\",\n    \"BUILD_ID\",\n    \"BUILDKITE\",\n    \"CIRCLECI\",\n    \"GITHUB_ACTIONS\",\n    \"GITLAB_CI\",\n    \"JENKINS_URL\",\n    \"TRAVIS\",\n    \"APPVEYOR\",\n    \"WERCKER\",\n    \"DRONE\",\n    \"CODESHIP\",\n    \"SEMAPHORE\",\n    \"SHIPPABLE\",\n    \"TEAMCITY_VERSION\",\n    \"BAMBOO_BUILDKEY\",\n    \"GO_PIPELINE_NAME\",\n    \"TF_BUILD\",\n    \"SYSTEM_TEAMFOUNDATIONCOLLECTIONURI\",\n    \"BITBUCKET_BUILD_NUMBER\",\n    \"HEROKU_TEST_RUN_ID\",\n    \"VERCEL\",\n    \"NETLIFY\"\n];\nfunction detectCIEnvironment() {\n    const ciIndicators = CI_ENV_VARS;\n    const falsyValues = /* @__PURE__ */ new Set([\n        \"\",\n        \"false\",\n        \"0\",\n        \"no\"\n    ]);\n    return ciIndicators.some((indicator)=>{\n        const value = process.env[indicator];\n        if (value === void 0) {\n            return false;\n        }\n        const normalizedValue = value.trim().toLowerCase();\n        return !falsyValues.has(normalizedValue);\n    });\n}\nfunction getNextVersion() {\n    var _a;\n    try {\n        return (_a = process.title) != null ? _a : \"unknown-process-title\";\n    } catch  {\n        return void 0;\n    }\n}\nfunction formatMetadataHeaders(metadata) {\n    const headers2 = new Headers();\n    if (metadata.nodeVersion) {\n        headers2.set(\"Clerk-Node-Version\", metadata.nodeVersion);\n    }\n    if (metadata.nextVersion) {\n        headers2.set(\"Clerk-Next-Version\", metadata.nextVersion);\n    }\n    if (metadata.npmConfigUserAgent) {\n        headers2.set(\"Clerk-NPM-Config-User-Agent\", metadata.npmConfigUserAgent);\n    }\n    if (metadata.userAgent) {\n        headers2.set(\"Clerk-Client-User-Agent\", metadata.userAgent);\n    }\n    if (metadata.port) {\n        headers2.set(\"Clerk-Node-Port\", metadata.port);\n    }\n    if (metadata.host) {\n        headers2.set(\"Clerk-Client-Host\", metadata.host);\n    }\n    if (metadata.xPort) {\n        headers2.set(\"Clerk-X-Port\", metadata.xPort);\n    }\n    if (metadata.xHost) {\n        headers2.set(\"Clerk-X-Host\", metadata.xHost);\n    }\n    if (metadata.xProtocol) {\n        headers2.set(\"Clerk-X-Protocol\", metadata.xProtocol);\n    }\n    if (metadata.xClerkAuthStatus) {\n        headers2.set(\"Clerk-Auth-Status\", metadata.xClerkAuthStatus);\n    }\n    if (metadata.isCI) {\n        headers2.set(\"Clerk-Is-CI\", \"true\");\n    }\n    return headers2;\n}\n //# sourceMappingURL=keyless-custom-headers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vc2VydmVyL2tleWxlc3MtY3VzdG9tLWhlYWRlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFFd0I7QUFtQnhCLGVBQXNCLHlCQUFtRDtJQXJCekU7SUFzQkUsTUFBTSxjQUFjLE1BQU0scURBQU8sQ0FBQztJQUVsQyxPQUFPO1FBQ0wsYUFBYSxRQUFRO1FBQ3JCLGFBQWEsZUFBZTtRQUM1QixvQkFBb0IsUUFBUSxJQUFJO1FBQUE7UUFDaEMsWUFBVyxpQkFBWSxJQUFJLGFBQVksS0FBNUIsWUFBaUM7UUFDNUMsTUFBTSxRQUFRLElBQUk7UUFBQTtRQUNsQixPQUFNLGlCQUFZLElBQUksT0FBTSxLQUF0QixZQUEyQjtRQUNqQyxRQUFPLGlCQUFZLElBQUksbUJBQWtCLEtBQWxDLFlBQXVDO1FBQzlDLFFBQU8saUJBQVksSUFBSSxtQkFBa0IsS0FBbEMsWUFBdUM7UUFDOUMsWUFBVyxpQkFBWSxJQUFJLG9CQUFtQixLQUFuQyxZQUF3QztRQUNuRCxtQkFBa0IsaUJBQVksSUFBSSxzQkFBcUIsS0FBckMsWUFBMEM7UUFDNUQsTUFBTSxvQkFBb0I7SUFDNUI7QUFDRjtBQUdBLE1BQU0sY0FBYztJQUNsQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNGO0FBS0EsU0FBUyxzQkFBK0I7SUFDdEMsTUFBTSxlQUFlO0lBRXJCLE1BQU0sY0FBYyxvQkFBSSxJQUFZO1FBQUM7UUFBSTtRQUFTO1FBQUssSUFBSTtLQUFDO0lBRTVELE9BQU8sYUFBYSxLQUFLO1FBQ3ZCLE1BQU0sUUFBUSxRQUFRLElBQUksU0FBUztRQUNuQyxJQUFJLFVBQVUsUUFBVztZQUN2QixPQUFPO1FBQ1Q7UUFFQSxNQUFNLGtCQUFrQixNQUFNLEtBQUssRUFBRSxZQUFZO1FBQ2pELE9BQU8sQ0FBQyxZQUFZLElBQUksZUFBZTtJQUN6QyxDQUFDO0FBQ0g7QUFLQSxTQUFTLGlCQUFxQztJQTFGOUM7SUEyRkUsSUFBSTtRQUNGLFFBQU8sYUFBUSxVQUFSLFlBQWlCO0lBQzFCLFNBQVE7UUFDTixPQUFPO0lBQ1Q7QUFDRjtBQUtPLFNBQVMsc0JBQXNCLFVBQW9DO0lBQ3hFLE1BQU1BLFdBQVUsSUFBSSxRQUFRO0lBRTVCLElBQUksU0FBUyxhQUFhO1FBQ3hCQSxTQUFRLElBQUksc0JBQXNCLFNBQVMsV0FBVztJQUN4RDtJQUVBLElBQUksU0FBUyxhQUFhO1FBQ3hCQSxTQUFRLElBQUksc0JBQXNCLFNBQVMsV0FBVztJQUN4RDtJQUVBLElBQUksU0FBUyxvQkFBb0I7UUFDL0JBLFNBQVEsSUFBSSwrQkFBK0IsU0FBUyxrQkFBa0I7SUFDeEU7SUFFQSxJQUFJLFNBQVMsV0FBVztRQUN0QkEsU0FBUSxJQUFJLDJCQUEyQixTQUFTLFNBQVM7SUFDM0Q7SUFFQSxJQUFJLFNBQVMsTUFBTTtRQUNqQkEsU0FBUSxJQUFJLG1CQUFtQixTQUFTLElBQUk7SUFDOUM7SUFFQSxJQUFJLFNBQVMsTUFBTTtRQUNqQkEsU0FBUSxJQUFJLHFCQUFxQixTQUFTLElBQUk7SUFDaEQ7SUFFQSxJQUFJLFNBQVMsT0FBTztRQUNsQkEsU0FBUSxJQUFJLGdCQUFnQixTQUFTLEtBQUs7SUFDNUM7SUFFQSxJQUFJLFNBQVMsT0FBTztRQUNsQkEsU0FBUSxJQUFJLGdCQUFnQixTQUFTLEtBQUs7SUFDNUM7SUFFQSxJQUFJLFNBQVMsV0FBVztRQUN0QkEsU0FBUSxJQUFJLG9CQUFvQixTQUFTLFNBQVM7SUFDcEQ7SUFFQSxJQUFJLFNBQVMsa0JBQWtCO1FBQzdCQSxTQUFRLElBQUkscUJBQXFCLFNBQVMsZ0JBQWdCO0lBQzVEO0lBRUEsSUFBSSxTQUFTLE1BQU07UUFDakJBLFNBQVEsSUFBSSxlQUFlLE1BQU07SUFDbkM7SUFFQSxPQUFPQTtBQUNUIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEhQXFxzcmNcXHNlcnZlclxca2V5bGVzcy1jdXN0b20taGVhZGVycy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHNlcnZlcic7XG5cbmltcG9ydCB7IGhlYWRlcnMgfSBmcm9tICduZXh0L2hlYWRlcnMnO1xuXG5pbnRlcmZhY2UgTWV0YWRhdGFIZWFkZXJzIHtcbiAgbm9kZVZlcnNpb24/OiBzdHJpbmc7XG4gIG5leHRWZXJzaW9uPzogc3RyaW5nO1xuICBucG1Db25maWdVc2VyQWdlbnQ/OiBzdHJpbmc7XG4gIHVzZXJBZ2VudDogc3RyaW5nO1xuICBwb3J0Pzogc3RyaW5nO1xuICBob3N0OiBzdHJpbmc7XG4gIHhIb3N0OiBzdHJpbmc7XG4gIHhQb3J0OiBzdHJpbmc7XG4gIHhQcm90b2NvbDogc3RyaW5nO1xuICB4Q2xlcmtBdXRoU3RhdHVzOiBzdHJpbmc7XG4gIGlzQ0k6IGJvb2xlYW47XG59XG5cbi8qKlxuICogQ29sbGVjdHMgbWV0YWRhdGEgZnJvbSB0aGUgZW52aXJvbm1lbnQgYW5kIHJlcXVlc3QgaGVhZGVyc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29sbGVjdEtleWxlc3NNZXRhZGF0YSgpOiBQcm9taXNlPE1ldGFkYXRhSGVhZGVycz4ge1xuICBjb25zdCBoZWFkZXJTdG9yZSA9IGF3YWl0IGhlYWRlcnMoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIHJldHVybiB7XG4gICAgbm9kZVZlcnNpb246IHByb2Nlc3MudmVyc2lvbixcbiAgICBuZXh0VmVyc2lvbjogZ2V0TmV4dFZlcnNpb24oKSxcbiAgICBucG1Db25maWdVc2VyQWdlbnQ6IHByb2Nlc3MuZW52Lm5wbV9jb25maWdfdXNlcl9hZ2VudCwgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHVzZXJBZ2VudDogaGVhZGVyU3RvcmUuZ2V0KCdVc2VyLUFnZW50JykgPz8gJ3Vua25vd24gdXNlci1hZ2VudCcsXG4gICAgcG9ydDogcHJvY2Vzcy5lbnYuUE9SVCwgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGhvc3Q6IGhlYWRlclN0b3JlLmdldCgnaG9zdCcpID8/ICd1bmtub3duIGhvc3QnLFxuICAgIHhQb3J0OiBoZWFkZXJTdG9yZS5nZXQoJ3gtZm9yd2FyZGVkLXBvcnQnKSA/PyAndW5rbm93biB4LWZvcndhcmRlZC1wb3J0JyxcbiAgICB4SG9zdDogaGVhZGVyU3RvcmUuZ2V0KCd4LWZvcndhcmRlZC1ob3N0JykgPz8gJ3Vua25vd24geC1mb3J3YXJkZWQtaG9zdCcsXG4gICAgeFByb3RvY29sOiBoZWFkZXJTdG9yZS5nZXQoJ3gtZm9yd2FyZGVkLXByb3RvJykgPz8gJ3Vua25vd24geC1mb3J3YXJkZWQtcHJvdG8nLFxuICAgIHhDbGVya0F1dGhTdGF0dXM6IGhlYWRlclN0b3JlLmdldCgneC1jbGVyay1hdXRoLXN0YXR1cycpID8/ICd1bmtub3duIHgtY2xlcmstYXV0aC1zdGF0dXMnLFxuICAgIGlzQ0k6IGRldGVjdENJRW52aXJvbm1lbnQoKSxcbiAgfTtcbn1cblxuLy8gQ29tbW9uIENJIGVudmlyb25tZW50IHZhcmlhYmxlc1xuY29uc3QgQ0lfRU5WX1ZBUlMgPSBbXG4gICdDSScsXG4gICdDT05USU5VT1VTX0lOVEVHUkFUSU9OJyxcbiAgJ0JVSUxEX05VTUJFUicsXG4gICdCVUlMRF9JRCcsXG4gICdCVUlMREtJVEUnLFxuICAnQ0lSQ0xFQ0knLFxuICAnR0lUSFVCX0FDVElPTlMnLFxuICAnR0lUTEFCX0NJJyxcbiAgJ0pFTktJTlNfVVJMJyxcbiAgJ1RSQVZJUycsXG4gICdBUFBWRVlPUicsXG4gICdXRVJDS0VSJyxcbiAgJ0RST05FJyxcbiAgJ0NPREVTSElQJyxcbiAgJ1NFTUFQSE9SRScsXG4gICdTSElQUEFCTEUnLFxuICAnVEVBTUNJVFlfVkVSU0lPTicsXG4gICdCQU1CT09fQlVJTERLRVknLFxuICAnR09fUElQRUxJTkVfTkFNRScsXG4gICdURl9CVUlMRCcsXG4gICdTWVNURU1fVEVBTUZPVU5EQVRJT05DT0xMRUNUSU9OVVJJJyxcbiAgJ0JJVEJVQ0tFVF9CVUlMRF9OVU1CRVInLFxuICAnSEVST0tVX1RFU1RfUlVOX0lEJyxcbiAgJ1ZFUkNFTCcsXG4gICdORVRMSUZZJyxcbl07XG5cbi8qKlxuICogRGV0ZWN0cyBpZiB0aGUgYXBwbGljYXRpb24gaXMgcnVubmluZyBpbiBhIENJIGVudmlyb25tZW50XG4gKi9cbmZ1bmN0aW9uIGRldGVjdENJRW52aXJvbm1lbnQoKTogYm9vbGVhbiB7XG4gIGNvbnN0IGNpSW5kaWNhdG9ycyA9IENJX0VOVl9WQVJTO1xuXG4gIGNvbnN0IGZhbHN5VmFsdWVzID0gbmV3IFNldDxzdHJpbmc+KFsnJywgJ2ZhbHNlJywgJzAnLCAnbm8nXSk7XG5cbiAgcmV0dXJuIGNpSW5kaWNhdG9ycy5zb21lKGluZGljYXRvciA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBwcm9jZXNzLmVudltpbmRpY2F0b3JdO1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3Qgbm9ybWFsaXplZFZhbHVlID0gdmFsdWUudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuICFmYWxzeVZhbHVlcy5oYXMobm9ybWFsaXplZFZhbHVlKTtcbiAgfSk7XG59XG5cbi8qKlxuICogRXh0cmFjdHMgTmV4dC5qcyB2ZXJzaW9uIGZyb20gcHJvY2VzcyB0aXRsZVxuICovXG5mdW5jdGlvbiBnZXROZXh0VmVyc2lvbigpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICB0cnkge1xuICAgIHJldHVybiBwcm9jZXNzLnRpdGxlID8/ICd1bmtub3duLXByb2Nlc3MtdGl0bGUnOyAvLyAnbmV4dC1zZXJ2ZXIgKHYxNS40LjUpJ1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogQ29udmVydHMgbWV0YWRhdGEgdG8gSFRUUCBoZWFkZXJzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRNZXRhZGF0YUhlYWRlcnMobWV0YWRhdGE6IE1ldGFkYXRhSGVhZGVycyk6IEhlYWRlcnMge1xuICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcblxuICBpZiAobWV0YWRhdGEubm9kZVZlcnNpb24pIHtcbiAgICBoZWFkZXJzLnNldCgnQ2xlcmstTm9kZS1WZXJzaW9uJywgbWV0YWRhdGEubm9kZVZlcnNpb24pO1xuICB9XG5cbiAgaWYgKG1ldGFkYXRhLm5leHRWZXJzaW9uKSB7XG4gICAgaGVhZGVycy5zZXQoJ0NsZXJrLU5leHQtVmVyc2lvbicsIG1ldGFkYXRhLm5leHRWZXJzaW9uKTtcbiAgfVxuXG4gIGlmIChtZXRhZGF0YS5ucG1Db25maWdVc2VyQWdlbnQpIHtcbiAgICBoZWFkZXJzLnNldCgnQ2xlcmstTlBNLUNvbmZpZy1Vc2VyLUFnZW50JywgbWV0YWRhdGEubnBtQ29uZmlnVXNlckFnZW50KTtcbiAgfVxuXG4gIGlmIChtZXRhZGF0YS51c2VyQWdlbnQpIHtcbiAgICBoZWFkZXJzLnNldCgnQ2xlcmstQ2xpZW50LVVzZXItQWdlbnQnLCBtZXRhZGF0YS51c2VyQWdlbnQpO1xuICB9XG5cbiAgaWYgKG1ldGFkYXRhLnBvcnQpIHtcbiAgICBoZWFkZXJzLnNldCgnQ2xlcmstTm9kZS1Qb3J0JywgbWV0YWRhdGEucG9ydCk7XG4gIH1cblxuICBpZiAobWV0YWRhdGEuaG9zdCkge1xuICAgIGhlYWRlcnMuc2V0KCdDbGVyay1DbGllbnQtSG9zdCcsIG1ldGFkYXRhLmhvc3QpO1xuICB9XG5cbiAgaWYgKG1ldGFkYXRhLnhQb3J0KSB7XG4gICAgaGVhZGVycy5zZXQoJ0NsZXJrLVgtUG9ydCcsIG1ldGFkYXRhLnhQb3J0KTtcbiAgfVxuXG4gIGlmIChtZXRhZGF0YS54SG9zdCkge1xuICAgIGhlYWRlcnMuc2V0KCdDbGVyay1YLUhvc3QnLCBtZXRhZGF0YS54SG9zdCk7XG4gIH1cblxuICBpZiAobWV0YWRhdGEueFByb3RvY29sKSB7XG4gICAgaGVhZGVycy5zZXQoJ0NsZXJrLVgtUHJvdG9jb2wnLCBtZXRhZGF0YS54UHJvdG9jb2wpO1xuICB9XG5cbiAgaWYgKG1ldGFkYXRhLnhDbGVya0F1dGhTdGF0dXMpIHtcbiAgICBoZWFkZXJzLnNldCgnQ2xlcmstQXV0aC1TdGF0dXMnLCBtZXRhZGF0YS54Q2xlcmtBdXRoU3RhdHVzKTtcbiAgfVxuXG4gIGlmIChtZXRhZGF0YS5pc0NJKSB7XG4gICAgaGVhZGVycy5zZXQoJ0NsZXJrLUlzLUNJJywgJ3RydWUnKTtcbiAgfVxuXG4gIHJldHVybiBoZWFkZXJzO1xufVxuIl0sIm5hbWVzIjpbImhlYWRlcnMiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-custom-headers.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-log-cache.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/keyless-log-cache.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clerkDevelopmentCache: () => (/* binding */ clerkDevelopmentCache),\n/* harmony export */   createConfirmationMessage: () => (/* binding */ createConfirmationMessage),\n/* harmony export */   createKeylessModeMessage: () => (/* binding */ createKeylessModeMessage)\n/* harmony export */ });\n/* harmony import */ var _clerk_shared_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/shared/utils */ \"(middleware)/./node_modules/@clerk/shared/dist/utils/index.mjs\");\n\n\nconst THROTTLE_DURATION_MS = 10 * 60 * 1e3;\nfunction createClerkDevCache() {\n  if (!(0,_clerk_shared_utils__WEBPACK_IMPORTED_MODULE_0__.isDevelopmentEnvironment)()) {\n    return;\n  }\n  if (!__webpack_require__.g.__clerk_internal_keyless_logger) {\n    __webpack_require__.g.__clerk_internal_keyless_logger = {\n      __cache: /* @__PURE__ */ new Map(),\n      log: function({ cacheKey, msg }) {\n        var _a;\n        if (this.__cache.has(cacheKey) && Date.now() < (((_a = this.__cache.get(cacheKey)) == null ? void 0 : _a.expiresAt) || 0)) {\n          return;\n        }\n        console.log(msg);\n        this.__cache.set(cacheKey, {\n          expiresAt: Date.now() + THROTTLE_DURATION_MS\n        });\n      },\n      run: async function(callback, { cacheKey, onSuccessStale = THROTTLE_DURATION_MS, onErrorStale = THROTTLE_DURATION_MS }) {\n        var _a, _b;\n        if (this.__cache.has(cacheKey) && Date.now() < (((_a = this.__cache.get(cacheKey)) == null ? void 0 : _a.expiresAt) || 0)) {\n          return (_b = this.__cache.get(cacheKey)) == null ? void 0 : _b.data;\n        }\n        try {\n          const result = await callback();\n          this.__cache.set(cacheKey, {\n            expiresAt: Date.now() + onSuccessStale,\n            data: result\n          });\n          return result;\n        } catch (e) {\n          this.__cache.set(cacheKey, {\n            expiresAt: Date.now() + onErrorStale\n          });\n          throw e;\n        }\n      }\n    };\n  }\n  return globalThis.__clerk_internal_keyless_logger;\n}\nconst createKeylessModeMessage = (keys) => {\n  return `\n\\x1B[35m\n[Clerk]:\\x1B[0m You are running in keyless mode.\nYou can \\x1B[35mclaim your keys\\x1B[0m by visiting ${keys.claimUrl}\n`;\n};\nconst createConfirmationMessage = () => {\n  return `\n\\x1B[35m\n[Clerk]:\\x1B[0m Your application is running with your claimed keys.\nYou can safely remove the \\x1B[35m.clerk/\\x1B[0m from your project.\n`;\n};\nconst clerkDevelopmentCache = createClerkDevCache();\n\n//# sourceMappingURL=keyless-log-cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vc2VydmVyL2tleWxlc3MtbG9nLWNhY2hlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBOEI7QUFDaUM7QUFDL0Q7QUFDQTtBQUNBLE9BQU8sNkVBQXdCO0FBQy9CO0FBQ0E7QUFDQSxPQUFPLHFCQUFNO0FBQ2IsSUFBSSxxQkFBTTtBQUNWO0FBQ0Esc0JBQXNCLGVBQWU7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQLHNDQUFzQyxzRkFBc0Y7QUFDNUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtFO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSFBcXERlc2t0b3BcXEJleW9uZF9jaGF0XFxjbGllbnRcXG5vZGVfbW9kdWxlc1xcQGNsZXJrXFxuZXh0anNcXGRpc3RcXGVzbVxcc2VydmVyXFxrZXlsZXNzLWxvZy1jYWNoZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuLi9jaHVuay1CVVNZQTJCNC5qc1wiO1xuaW1wb3J0IHsgaXNEZXZlbG9wbWVudEVudmlyb25tZW50IH0gZnJvbSBcIkBjbGVyay9zaGFyZWQvdXRpbHNcIjtcbmNvbnN0IFRIUk9UVExFX0RVUkFUSU9OX01TID0gMTAgKiA2MCAqIDFlMztcbmZ1bmN0aW9uIGNyZWF0ZUNsZXJrRGV2Q2FjaGUoKSB7XG4gIGlmICghaXNEZXZlbG9wbWVudEVudmlyb25tZW50KCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFnbG9iYWwuX19jbGVya19pbnRlcm5hbF9rZXlsZXNzX2xvZ2dlcikge1xuICAgIGdsb2JhbC5fX2NsZXJrX2ludGVybmFsX2tleWxlc3NfbG9nZ2VyID0ge1xuICAgICAgX19jYWNoZTogLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSxcbiAgICAgIGxvZzogZnVuY3Rpb24oeyBjYWNoZUtleSwgbXNnIH0pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGhpcy5fX2NhY2hlLmhhcyhjYWNoZUtleSkgJiYgRGF0ZS5ub3coKSA8ICgoKF9hID0gdGhpcy5fX2NhY2hlLmdldChjYWNoZUtleSkpID09IG51bGwgPyB2b2lkIDAgOiBfYS5leHBpcmVzQXQpIHx8IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKG1zZyk7XG4gICAgICAgIHRoaXMuX19jYWNoZS5zZXQoY2FjaGVLZXksIHtcbiAgICAgICAgICBleHBpcmVzQXQ6IERhdGUubm93KCkgKyBUSFJPVFRMRV9EVVJBVElPTl9NU1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBydW46IGFzeW5jIGZ1bmN0aW9uKGNhbGxiYWNrLCB7IGNhY2hlS2V5LCBvblN1Y2Nlc3NTdGFsZSA9IFRIUk9UVExFX0RVUkFUSU9OX01TLCBvbkVycm9yU3RhbGUgPSBUSFJPVFRMRV9EVVJBVElPTl9NUyB9KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICh0aGlzLl9fY2FjaGUuaGFzKGNhY2hlS2V5KSAmJiBEYXRlLm5vdygpIDwgKCgoX2EgPSB0aGlzLl9fY2FjaGUuZ2V0KGNhY2hlS2V5KSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmV4cGlyZXNBdCkgfHwgMCkpIHtcbiAgICAgICAgICByZXR1cm4gKF9iID0gdGhpcy5fX2NhY2hlLmdldChjYWNoZUtleSkpID09IG51bGwgPyB2b2lkIDAgOiBfYi5kYXRhO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2FsbGJhY2soKTtcbiAgICAgICAgICB0aGlzLl9fY2FjaGUuc2V0KGNhY2hlS2V5LCB7XG4gICAgICAgICAgICBleHBpcmVzQXQ6IERhdGUubm93KCkgKyBvblN1Y2Nlc3NTdGFsZSxcbiAgICAgICAgICAgIGRhdGE6IHJlc3VsdFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICB0aGlzLl9fY2FjaGUuc2V0KGNhY2hlS2V5LCB7XG4gICAgICAgICAgICBleHBpcmVzQXQ6IERhdGUubm93KCkgKyBvbkVycm9yU3RhbGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZ2xvYmFsVGhpcy5fX2NsZXJrX2ludGVybmFsX2tleWxlc3NfbG9nZ2VyO1xufVxuY29uc3QgY3JlYXRlS2V5bGVzc01vZGVNZXNzYWdlID0gKGtleXMpID0+IHtcbiAgcmV0dXJuIGBcblxceDFCWzM1bVxuW0NsZXJrXTpcXHgxQlswbSBZb3UgYXJlIHJ1bm5pbmcgaW4ga2V5bGVzcyBtb2RlLlxuWW91IGNhbiBcXHgxQlszNW1jbGFpbSB5b3VyIGtleXNcXHgxQlswbSBieSB2aXNpdGluZyAke2tleXMuY2xhaW1Vcmx9XG5gO1xufTtcbmNvbnN0IGNyZWF0ZUNvbmZpcm1hdGlvbk1lc3NhZ2UgPSAoKSA9PiB7XG4gIHJldHVybiBgXG5cXHgxQlszNW1cbltDbGVya106XFx4MUJbMG0gWW91ciBhcHBsaWNhdGlvbiBpcyBydW5uaW5nIHdpdGggeW91ciBjbGFpbWVkIGtleXMuXG5Zb3UgY2FuIHNhZmVseSByZW1vdmUgdGhlIFxceDFCWzM1bS5jbGVyay9cXHgxQlswbSBmcm9tIHlvdXIgcHJvamVjdC5cbmA7XG59O1xuY29uc3QgY2xlcmtEZXZlbG9wbWVudENhY2hlID0gY3JlYXRlQ2xlcmtEZXZDYWNoZSgpO1xuZXhwb3J0IHtcbiAgY2xlcmtEZXZlbG9wbWVudENhY2hlLFxuICBjcmVhdGVDb25maXJtYXRpb25NZXNzYWdlLFxuICBjcmVhdGVLZXlsZXNzTW9kZU1lc3NhZ2Vcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZXlsZXNzLWxvZy1jYWNoZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-log-cache.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-node.js":
/*!********************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/keyless-node.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOrReadKeyless: () => (/* binding */ createOrReadKeyless),\n/* harmony export */   removeKeyless: () => (/* binding */ removeKeyless),\n/* harmony export */   safeParseClerkFile: () => (/* binding */ safeParseClerkFile)\n/* harmony export */ });\n/* harmony import */ var _createClerkClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createClerkClient */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/createClerkClient.js\");\n/* harmony import */ var _fs_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fs/utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/fs/utils.js\");\n/* harmony import */ var _keyless_custom_headers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./keyless-custom-headers */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-custom-headers.js\");\n\n\n\n\nconst CLERK_HIDDEN = \".clerk\";\nconst CLERK_LOCK = \"clerk.lock\";\nfunction updateGitignore() {\n  const { existsSync, writeFileSync, readFileSync, appendFileSync } = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodeFsOrThrow)();\n  const path = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodePathOrThrow)();\n  const cwd = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodeCwdOrThrow)();\n  const gitignorePath = path.join(cwd(), \".gitignore\");\n  if (!existsSync(gitignorePath)) {\n    writeFileSync(gitignorePath, \"\");\n  }\n  const gitignoreContent = readFileSync(gitignorePath, \"utf-8\");\n  const COMMENT = `# clerk configuration (can include secrets)`;\n  if (!gitignoreContent.includes(CLERK_HIDDEN + \"/\")) {\n    appendFileSync(gitignorePath, `\n${COMMENT}\n/${CLERK_HIDDEN}/\n`);\n  }\n}\nconst generatePath = (...slugs) => {\n  const path = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodePathOrThrow)();\n  const cwd = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodeCwdOrThrow)();\n  return path.join(cwd(), CLERK_HIDDEN, ...slugs);\n};\nconst _TEMP_DIR_NAME = \".tmp\";\nconst getKeylessConfigurationPath = () => generatePath(_TEMP_DIR_NAME, \"keyless.json\");\nconst getKeylessReadMePath = () => generatePath(_TEMP_DIR_NAME, \"README.md\");\nlet isCreatingFile = false;\nfunction safeParseClerkFile() {\n  const { readFileSync } = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodeFsOrThrow)();\n  try {\n    const CONFIG_PATH = getKeylessConfigurationPath();\n    let fileAsString;\n    try {\n      fileAsString = readFileSync(CONFIG_PATH, { encoding: \"utf-8\" }) || \"{}\";\n    } catch {\n      fileAsString = \"{}\";\n    }\n    return JSON.parse(fileAsString);\n  } catch {\n    return void 0;\n  }\n}\nconst lockFileWriting = () => {\n  const { writeFileSync } = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodeFsOrThrow)();\n  isCreatingFile = true;\n  writeFileSync(\n    CLERK_LOCK,\n    // In the rare case, the file persists give the developer enough context.\n    \"This file can be deleted. Please delete this file and refresh your application\",\n    {\n      encoding: \"utf8\",\n      mode: \"0777\",\n      flag: \"w\"\n    }\n  );\n};\nconst unlockFileWriting = () => {\n  const { rmSync } = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodeFsOrThrow)();\n  try {\n    rmSync(CLERK_LOCK, { force: true, recursive: true });\n  } catch {\n  }\n  isCreatingFile = false;\n};\nconst isFileWritingLocked = () => {\n  const { existsSync } = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodeFsOrThrow)();\n  return isCreatingFile || existsSync(CLERK_LOCK);\n};\nasync function createOrReadKeyless() {\n  const { writeFileSync, mkdirSync } = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodeFsOrThrow)();\n  if (isFileWritingLocked()) {\n    return null;\n  }\n  lockFileWriting();\n  const CONFIG_PATH = getKeylessConfigurationPath();\n  const README_PATH = getKeylessReadMePath();\n  mkdirSync(generatePath(_TEMP_DIR_NAME), { recursive: true });\n  updateGitignore();\n  const envVarsMap = safeParseClerkFile();\n  if ((envVarsMap == null ? void 0 : envVarsMap.publishableKey) && (envVarsMap == null ? void 0 : envVarsMap.secretKey)) {\n    unlockFileWriting();\n    return envVarsMap;\n  }\n  const client = (0,_createClerkClient__WEBPACK_IMPORTED_MODULE_1__.createClerkClientWithOptions)({});\n  const keylessHeaders = await (0,_keyless_custom_headers__WEBPACK_IMPORTED_MODULE_2__.collectKeylessMetadata)().then(_keyless_custom_headers__WEBPACK_IMPORTED_MODULE_2__.formatMetadataHeaders).catch(() => new Headers());\n  const accountlessApplication = await client.__experimental_accountlessApplications.createAccountlessApplication({ requestHeaders: keylessHeaders }).catch(() => null);\n  if (accountlessApplication) {\n    writeFileSync(CONFIG_PATH, JSON.stringify(accountlessApplication), {\n      encoding: \"utf8\",\n      mode: \"0777\",\n      flag: \"w\"\n    });\n    const README_NOTIFICATION = `\n## DO NOT COMMIT\nThis directory is auto-generated from \\`@clerk/nextjs\\` because you are running in Keyless mode. Avoid committing the \\`.clerk/\\` directory as it includes the secret key of the unclaimed instance.\n  `;\n    writeFileSync(README_PATH, README_NOTIFICATION, {\n      encoding: \"utf8\",\n      mode: \"0777\",\n      flag: \"w\"\n    });\n  }\n  unlockFileWriting();\n  return accountlessApplication;\n}\nfunction removeKeyless() {\n  const { rmSync } = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodeFsOrThrow)();\n  if (isFileWritingLocked()) {\n    return void 0;\n  }\n  lockFileWriting();\n  try {\n    rmSync(generatePath(), { force: true, recursive: true });\n  } catch {\n  }\n  unlockFileWriting();\n}\n\n//# sourceMappingURL=keyless-node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vc2VydmVyL2tleWxlc3Mtbm9kZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBOEI7QUFDcUM7QUFDUztBQUNhO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBLFVBQVUsMERBQTBELEVBQUUsd0RBQWE7QUFDbkYsZUFBZSwwREFBZTtBQUM5QixjQUFjLHlEQUFjO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0YsR0FBRyxhQUFhO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSwwREFBZTtBQUM5QixjQUFjLHlEQUFjO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxlQUFlLEVBQUUsd0RBQWE7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsbUJBQW1CLFFBQVE7QUFDNUUsTUFBTTtBQUNOLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxnQkFBZ0IsRUFBRSx3REFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsU0FBUyxFQUFFLHdEQUFhO0FBQ2xDO0FBQ0EseUJBQXlCLDhCQUE4QjtBQUN2RCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGFBQWEsRUFBRSx3REFBYTtBQUN0QztBQUNBO0FBQ0E7QUFDQSxVQUFVLDJCQUEyQixFQUFFLHdEQUFhO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxpQkFBaUI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGdGQUE0QixHQUFHO0FBQ2hELCtCQUErQiwrRUFBc0IsUUFBUSwwRUFBcUI7QUFDbEYsb0hBQW9ILGdDQUFnQztBQUNwSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsU0FBUyxFQUFFLHdEQUFhO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsOEJBQThCO0FBQzNELElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFLRTtBQUNGIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEhQXFxEZXNrdG9wXFxCZXlvbmRfY2hhdFxcY2xpZW50XFxub2RlX21vZHVsZXNcXEBjbGVya1xcbmV4dGpzXFxkaXN0XFxlc21cXHNlcnZlclxca2V5bGVzcy1ub2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL2NodW5rLUJVU1lBMkI0LmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVDbGVya0NsaWVudFdpdGhPcHRpb25zIH0gZnJvbSBcIi4vY3JlYXRlQ2xlcmtDbGllbnRcIjtcbmltcG9ydCB7IG5vZGVDd2RPclRocm93LCBub2RlRnNPclRocm93LCBub2RlUGF0aE9yVGhyb3cgfSBmcm9tIFwiLi9mcy91dGlsc1wiO1xuaW1wb3J0IHsgY29sbGVjdEtleWxlc3NNZXRhZGF0YSwgZm9ybWF0TWV0YWRhdGFIZWFkZXJzIH0gZnJvbSBcIi4va2V5bGVzcy1jdXN0b20taGVhZGVyc1wiO1xuY29uc3QgQ0xFUktfSElEREVOID0gXCIuY2xlcmtcIjtcbmNvbnN0IENMRVJLX0xPQ0sgPSBcImNsZXJrLmxvY2tcIjtcbmZ1bmN0aW9uIHVwZGF0ZUdpdGlnbm9yZSgpIHtcbiAgY29uc3QgeyBleGlzdHNTeW5jLCB3cml0ZUZpbGVTeW5jLCByZWFkRmlsZVN5bmMsIGFwcGVuZEZpbGVTeW5jIH0gPSBub2RlRnNPclRocm93KCk7XG4gIGNvbnN0IHBhdGggPSBub2RlUGF0aE9yVGhyb3coKTtcbiAgY29uc3QgY3dkID0gbm9kZUN3ZE9yVGhyb3coKTtcbiAgY29uc3QgZ2l0aWdub3JlUGF0aCA9IHBhdGguam9pbihjd2QoKSwgXCIuZ2l0aWdub3JlXCIpO1xuICBpZiAoIWV4aXN0c1N5bmMoZ2l0aWdub3JlUGF0aCkpIHtcbiAgICB3cml0ZUZpbGVTeW5jKGdpdGlnbm9yZVBhdGgsIFwiXCIpO1xuICB9XG4gIGNvbnN0IGdpdGlnbm9yZUNvbnRlbnQgPSByZWFkRmlsZVN5bmMoZ2l0aWdub3JlUGF0aCwgXCJ1dGYtOFwiKTtcbiAgY29uc3QgQ09NTUVOVCA9IGAjIGNsZXJrIGNvbmZpZ3VyYXRpb24gKGNhbiBpbmNsdWRlIHNlY3JldHMpYDtcbiAgaWYgKCFnaXRpZ25vcmVDb250ZW50LmluY2x1ZGVzKENMRVJLX0hJRERFTiArIFwiL1wiKSkge1xuICAgIGFwcGVuZEZpbGVTeW5jKGdpdGlnbm9yZVBhdGgsIGBcbiR7Q09NTUVOVH1cbi8ke0NMRVJLX0hJRERFTn0vXG5gKTtcbiAgfVxufVxuY29uc3QgZ2VuZXJhdGVQYXRoID0gKC4uLnNsdWdzKSA9PiB7XG4gIGNvbnN0IHBhdGggPSBub2RlUGF0aE9yVGhyb3coKTtcbiAgY29uc3QgY3dkID0gbm9kZUN3ZE9yVGhyb3coKTtcbiAgcmV0dXJuIHBhdGguam9pbihjd2QoKSwgQ0xFUktfSElEREVOLCAuLi5zbHVncyk7XG59O1xuY29uc3QgX1RFTVBfRElSX05BTUUgPSBcIi50bXBcIjtcbmNvbnN0IGdldEtleWxlc3NDb25maWd1cmF0aW9uUGF0aCA9ICgpID0+IGdlbmVyYXRlUGF0aChfVEVNUF9ESVJfTkFNRSwgXCJrZXlsZXNzLmpzb25cIik7XG5jb25zdCBnZXRLZXlsZXNzUmVhZE1lUGF0aCA9ICgpID0+IGdlbmVyYXRlUGF0aChfVEVNUF9ESVJfTkFNRSwgXCJSRUFETUUubWRcIik7XG5sZXQgaXNDcmVhdGluZ0ZpbGUgPSBmYWxzZTtcbmZ1bmN0aW9uIHNhZmVQYXJzZUNsZXJrRmlsZSgpIHtcbiAgY29uc3QgeyByZWFkRmlsZVN5bmMgfSA9IG5vZGVGc09yVGhyb3coKTtcbiAgdHJ5IHtcbiAgICBjb25zdCBDT05GSUdfUEFUSCA9IGdldEtleWxlc3NDb25maWd1cmF0aW9uUGF0aCgpO1xuICAgIGxldCBmaWxlQXNTdHJpbmc7XG4gICAgdHJ5IHtcbiAgICAgIGZpbGVBc1N0cmluZyA9IHJlYWRGaWxlU3luYyhDT05GSUdfUEFUSCwgeyBlbmNvZGluZzogXCJ1dGYtOFwiIH0pIHx8IFwie31cIjtcbiAgICB9IGNhdGNoIHtcbiAgICAgIGZpbGVBc1N0cmluZyA9IFwie31cIjtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoZmlsZUFzU3RyaW5nKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxufVxuY29uc3QgbG9ja0ZpbGVXcml0aW5nID0gKCkgPT4ge1xuICBjb25zdCB7IHdyaXRlRmlsZVN5bmMgfSA9IG5vZGVGc09yVGhyb3coKTtcbiAgaXNDcmVhdGluZ0ZpbGUgPSB0cnVlO1xuICB3cml0ZUZpbGVTeW5jKFxuICAgIENMRVJLX0xPQ0ssXG4gICAgLy8gSW4gdGhlIHJhcmUgY2FzZSwgdGhlIGZpbGUgcGVyc2lzdHMgZ2l2ZSB0aGUgZGV2ZWxvcGVyIGVub3VnaCBjb250ZXh0LlxuICAgIFwiVGhpcyBmaWxlIGNhbiBiZSBkZWxldGVkLiBQbGVhc2UgZGVsZXRlIHRoaXMgZmlsZSBhbmQgcmVmcmVzaCB5b3VyIGFwcGxpY2F0aW9uXCIsXG4gICAge1xuICAgICAgZW5jb2Rpbmc6IFwidXRmOFwiLFxuICAgICAgbW9kZTogXCIwNzc3XCIsXG4gICAgICBmbGFnOiBcIndcIlxuICAgIH1cbiAgKTtcbn07XG5jb25zdCB1bmxvY2tGaWxlV3JpdGluZyA9ICgpID0+IHtcbiAgY29uc3QgeyBybVN5bmMgfSA9IG5vZGVGc09yVGhyb3coKTtcbiAgdHJ5IHtcbiAgICBybVN5bmMoQ0xFUktfTE9DSywgeyBmb3JjZTogdHJ1ZSwgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICB9IGNhdGNoIHtcbiAgfVxuICBpc0NyZWF0aW5nRmlsZSA9IGZhbHNlO1xufTtcbmNvbnN0IGlzRmlsZVdyaXRpbmdMb2NrZWQgPSAoKSA9PiB7XG4gIGNvbnN0IHsgZXhpc3RzU3luYyB9ID0gbm9kZUZzT3JUaHJvdygpO1xuICByZXR1cm4gaXNDcmVhdGluZ0ZpbGUgfHwgZXhpc3RzU3luYyhDTEVSS19MT0NLKTtcbn07XG5hc3luYyBmdW5jdGlvbiBjcmVhdGVPclJlYWRLZXlsZXNzKCkge1xuICBjb25zdCB7IHdyaXRlRmlsZVN5bmMsIG1rZGlyU3luYyB9ID0gbm9kZUZzT3JUaHJvdygpO1xuICBpZiAoaXNGaWxlV3JpdGluZ0xvY2tlZCgpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgbG9ja0ZpbGVXcml0aW5nKCk7XG4gIGNvbnN0IENPTkZJR19QQVRIID0gZ2V0S2V5bGVzc0NvbmZpZ3VyYXRpb25QYXRoKCk7XG4gIGNvbnN0IFJFQURNRV9QQVRIID0gZ2V0S2V5bGVzc1JlYWRNZVBhdGgoKTtcbiAgbWtkaXJTeW5jKGdlbmVyYXRlUGF0aChfVEVNUF9ESVJfTkFNRSksIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICB1cGRhdGVHaXRpZ25vcmUoKTtcbiAgY29uc3QgZW52VmFyc01hcCA9IHNhZmVQYXJzZUNsZXJrRmlsZSgpO1xuICBpZiAoKGVudlZhcnNNYXAgPT0gbnVsbCA/IHZvaWQgMCA6IGVudlZhcnNNYXAucHVibGlzaGFibGVLZXkpICYmIChlbnZWYXJzTWFwID09IG51bGwgPyB2b2lkIDAgOiBlbnZWYXJzTWFwLnNlY3JldEtleSkpIHtcbiAgICB1bmxvY2tGaWxlV3JpdGluZygpO1xuICAgIHJldHVybiBlbnZWYXJzTWFwO1xuICB9XG4gIGNvbnN0IGNsaWVudCA9IGNyZWF0ZUNsZXJrQ2xpZW50V2l0aE9wdGlvbnMoe30pO1xuICBjb25zdCBrZXlsZXNzSGVhZGVycyA9IGF3YWl0IGNvbGxlY3RLZXlsZXNzTWV0YWRhdGEoKS50aGVuKGZvcm1hdE1ldGFkYXRhSGVhZGVycykuY2F0Y2goKCkgPT4gbmV3IEhlYWRlcnMoKSk7XG4gIGNvbnN0IGFjY291bnRsZXNzQXBwbGljYXRpb24gPSBhd2FpdCBjbGllbnQuX19leHBlcmltZW50YWxfYWNjb3VudGxlc3NBcHBsaWNhdGlvbnMuY3JlYXRlQWNjb3VudGxlc3NBcHBsaWNhdGlvbih7IHJlcXVlc3RIZWFkZXJzOiBrZXlsZXNzSGVhZGVycyB9KS5jYXRjaCgoKSA9PiBudWxsKTtcbiAgaWYgKGFjY291bnRsZXNzQXBwbGljYXRpb24pIHtcbiAgICB3cml0ZUZpbGVTeW5jKENPTkZJR19QQVRILCBKU09OLnN0cmluZ2lmeShhY2NvdW50bGVzc0FwcGxpY2F0aW9uKSwge1xuICAgICAgZW5jb2Rpbmc6IFwidXRmOFwiLFxuICAgICAgbW9kZTogXCIwNzc3XCIsXG4gICAgICBmbGFnOiBcIndcIlxuICAgIH0pO1xuICAgIGNvbnN0IFJFQURNRV9OT1RJRklDQVRJT04gPSBgXG4jIyBETyBOT1QgQ09NTUlUXG5UaGlzIGRpcmVjdG9yeSBpcyBhdXRvLWdlbmVyYXRlZCBmcm9tIFxcYEBjbGVyay9uZXh0anNcXGAgYmVjYXVzZSB5b3UgYXJlIHJ1bm5pbmcgaW4gS2V5bGVzcyBtb2RlLiBBdm9pZCBjb21taXR0aW5nIHRoZSBcXGAuY2xlcmsvXFxgIGRpcmVjdG9yeSBhcyBpdCBpbmNsdWRlcyB0aGUgc2VjcmV0IGtleSBvZiB0aGUgdW5jbGFpbWVkIGluc3RhbmNlLlxuICBgO1xuICAgIHdyaXRlRmlsZVN5bmMoUkVBRE1FX1BBVEgsIFJFQURNRV9OT1RJRklDQVRJT04sIHtcbiAgICAgIGVuY29kaW5nOiBcInV0ZjhcIixcbiAgICAgIG1vZGU6IFwiMDc3N1wiLFxuICAgICAgZmxhZzogXCJ3XCJcbiAgICB9KTtcbiAgfVxuICB1bmxvY2tGaWxlV3JpdGluZygpO1xuICByZXR1cm4gYWNjb3VudGxlc3NBcHBsaWNhdGlvbjtcbn1cbmZ1bmN0aW9uIHJlbW92ZUtleWxlc3MoKSB7XG4gIGNvbnN0IHsgcm1TeW5jIH0gPSBub2RlRnNPclRocm93KCk7XG4gIGlmIChpc0ZpbGVXcml0aW5nTG9ja2VkKCkpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGxvY2tGaWxlV3JpdGluZygpO1xuICB0cnkge1xuICAgIHJtU3luYyhnZW5lcmF0ZVBhdGgoKSwgeyBmb3JjZTogdHJ1ZSwgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICB9IGNhdGNoIHtcbiAgfVxuICB1bmxvY2tGaWxlV3JpdGluZygpO1xufVxuZXhwb3J0IHtcbiAgY3JlYXRlT3JSZWFkS2V5bGVzcyxcbiAgcmVtb3ZlS2V5bGVzcyxcbiAgc2FmZVBhcnNlQ2xlcmtGaWxlXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2V5bGVzcy1ub2RlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-node.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-telemetry.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/keyless-telemetry.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   detectKeylessEnvDrift: () => (/* binding */ detectKeylessEnvDrift)\n/* harmony export */ });\n/* harmony import */ var _utils_feature_flags__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/feature-flags */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/feature-flags.js\");\n/* harmony import */ var _createClerkClient__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./createClerkClient */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/createClerkClient.js\");\n/* harmony import */ var _fs_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fs/utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/fs/utils.js\");\n\n\n\n\nconst EVENT_KEYLESS_ENV_DRIFT_DETECTED = \"KEYLESS_ENV_DRIFT_DETECTED\";\nconst EVENT_SAMPLING_RATE = 1;\nconst TELEMETRY_FLAG_FILE = \".clerk/.tmp/telemetry.json\";\nfunction getTelemetryFlagFilePath() {\n  const path = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodePathOrThrow)();\n  return path.join(process.cwd(), TELEMETRY_FLAG_FILE);\n}\nfunction tryMarkTelemetryEventAsFired() {\n  try {\n    if (_utils_feature_flags__WEBPACK_IMPORTED_MODULE_1__.canUseKeyless) {\n      const { mkdirSync, writeFileSync } = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodeFsOrThrow)();\n      const path = (0,_fs_utils__WEBPACK_IMPORTED_MODULE_0__.nodePathOrThrow)();\n      const flagFilePath = getTelemetryFlagFilePath();\n      const flagDirectory = path.dirname(flagFilePath);\n      mkdirSync(flagDirectory, { recursive: true });\n      const flagData = {\n        firedAt: (/* @__PURE__ */ new Date()).toISOString(),\n        event: EVENT_KEYLESS_ENV_DRIFT_DETECTED\n      };\n      writeFileSync(flagFilePath, JSON.stringify(flagData, null, 2), { flag: \"wx\" });\n      return true;\n    } else {\n      return false;\n    }\n  } catch (error) {\n    if ((error == null ? void 0 : error.code) === \"EEXIST\") {\n      return false;\n    }\n    console.warn(\"Failed to create telemetry flag file:\", error);\n    return false;\n  }\n}\nasync function detectKeylessEnvDrift() {\n  var _a, _b;\n  if (!_utils_feature_flags__WEBPACK_IMPORTED_MODULE_1__.canUseKeyless) {\n    return;\n  }\n  if (typeof window !== \"undefined\") {\n    return;\n  }\n  try {\n    const { safeParseClerkFile } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./keyless-node.js */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-node.js\"));\n    const keylessFile = safeParseClerkFile();\n    if (!keylessFile) {\n      return;\n    }\n    const envPublishableKey = \"pk_test_c2ltcGxlLWNhdHRsZS0xMy5jbGVyay5hY2NvdW50cy5kZXYk\";\n    const envSecretKey = process.env.CLERK_SECRET_KEY;\n    const hasEnvVars = Boolean(envPublishableKey || envSecretKey);\n    const keylessFileHasKeys = Boolean((keylessFile == null ? void 0 : keylessFile.publishableKey) && (keylessFile == null ? void 0 : keylessFile.secretKey));\n    const envVarsMissing = !envPublishableKey && !envSecretKey;\n    if (!hasEnvVars && !keylessFileHasKeys) {\n      return;\n    }\n    if (envVarsMissing && keylessFileHasKeys) {\n      return;\n    }\n    if (!keylessFileHasKeys) {\n      return;\n    }\n    if (!hasEnvVars) {\n      return;\n    }\n    const publicKeyMatch = Boolean(\n      envPublishableKey && keylessFile.publishableKey && envPublishableKey === keylessFile.publishableKey\n    );\n    const secretKeyMatch = Boolean(envSecretKey && keylessFile.secretKey && envSecretKey === keylessFile.secretKey);\n    const hasActualDrift = envPublishableKey && keylessFile.publishableKey && !publicKeyMatch || envSecretKey && keylessFile.secretKey && !secretKeyMatch;\n    if (!hasActualDrift) {\n      return;\n    }\n    const payload = {\n      publicKeyMatch,\n      secretKeyMatch,\n      envVarsMissing,\n      keylessFileHasKeys,\n      keylessPublishableKey: (_a = keylessFile.publishableKey) != null ? _a : \"\",\n      envPublishableKey: envPublishableKey != null ? envPublishableKey : \"\"\n    };\n    const clerkClient = (0,_createClerkClient__WEBPACK_IMPORTED_MODULE_2__.createClerkClientWithOptions)({\n      publishableKey: keylessFile.publishableKey,\n      secretKey: keylessFile.secretKey,\n      telemetry: {\n        samplingRate: 1\n      }\n    });\n    const shouldFireEvent = tryMarkTelemetryEventAsFired();\n    if (shouldFireEvent) {\n      const driftDetectedEvent = {\n        event: EVENT_KEYLESS_ENV_DRIFT_DETECTED,\n        eventSamplingRate: EVENT_SAMPLING_RATE,\n        payload\n      };\n      (_b = clerkClient.telemetry) == null ? void 0 : _b.record(driftDetectedEvent);\n    }\n  } catch (error) {\n    console.warn(\"Failed to detect keyless environment drift:\", error);\n  }\n}\n\n//# sourceMappingURL=keyless-telemetry.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vc2VydmVyL2tleWxlc3MtdGVsZW1ldHJ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBOEI7QUFDeUI7QUFDWTtBQUNQO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSwwREFBZTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsK0RBQWE7QUFDckIsY0FBYywyQkFBMkIsRUFBRSx3REFBYTtBQUN4RCxtQkFBbUIsMERBQWU7QUFDbEM7QUFDQTtBQUNBLGlDQUFpQyxpQkFBaUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RUFBdUUsWUFBWTtBQUNuRjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sK0RBQWE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxxQkFBcUIsUUFBUSwwTEFBMkI7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsMERBQTZDO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0ZBQTRCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSFBcXERlc2t0b3BcXEJleW9uZF9jaGF0XFxjbGllbnRcXG5vZGVfbW9kdWxlc1xcQGNsZXJrXFxuZXh0anNcXGRpc3RcXGVzbVxcc2VydmVyXFxrZXlsZXNzLXRlbGVtZXRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuLi9jaHVuay1CVVNZQTJCNC5qc1wiO1xuaW1wb3J0IHsgY2FuVXNlS2V5bGVzcyB9IGZyb20gXCIuLi91dGlscy9mZWF0dXJlLWZsYWdzXCI7XG5pbXBvcnQgeyBjcmVhdGVDbGVya0NsaWVudFdpdGhPcHRpb25zIH0gZnJvbSBcIi4vY3JlYXRlQ2xlcmtDbGllbnRcIjtcbmltcG9ydCB7IG5vZGVGc09yVGhyb3csIG5vZGVQYXRoT3JUaHJvdyB9IGZyb20gXCIuL2ZzL3V0aWxzXCI7XG5jb25zdCBFVkVOVF9LRVlMRVNTX0VOVl9EUklGVF9ERVRFQ1RFRCA9IFwiS0VZTEVTU19FTlZfRFJJRlRfREVURUNURURcIjtcbmNvbnN0IEVWRU5UX1NBTVBMSU5HX1JBVEUgPSAxO1xuY29uc3QgVEVMRU1FVFJZX0ZMQUdfRklMRSA9IFwiLmNsZXJrLy50bXAvdGVsZW1ldHJ5Lmpzb25cIjtcbmZ1bmN0aW9uIGdldFRlbGVtZXRyeUZsYWdGaWxlUGF0aCgpIHtcbiAgY29uc3QgcGF0aCA9IG5vZGVQYXRoT3JUaHJvdygpO1xuICByZXR1cm4gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksIFRFTEVNRVRSWV9GTEFHX0ZJTEUpO1xufVxuZnVuY3Rpb24gdHJ5TWFya1RlbGVtZXRyeUV2ZW50QXNGaXJlZCgpIHtcbiAgdHJ5IHtcbiAgICBpZiAoY2FuVXNlS2V5bGVzcykge1xuICAgICAgY29uc3QgeyBta2RpclN5bmMsIHdyaXRlRmlsZVN5bmMgfSA9IG5vZGVGc09yVGhyb3coKTtcbiAgICAgIGNvbnN0IHBhdGggPSBub2RlUGF0aE9yVGhyb3coKTtcbiAgICAgIGNvbnN0IGZsYWdGaWxlUGF0aCA9IGdldFRlbGVtZXRyeUZsYWdGaWxlUGF0aCgpO1xuICAgICAgY29uc3QgZmxhZ0RpcmVjdG9yeSA9IHBhdGguZGlybmFtZShmbGFnRmlsZVBhdGgpO1xuICAgICAgbWtkaXJTeW5jKGZsYWdEaXJlY3RvcnksIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgICAgY29uc3QgZmxhZ0RhdGEgPSB7XG4gICAgICAgIGZpcmVkQXQ6ICgvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgZXZlbnQ6IEVWRU5UX0tFWUxFU1NfRU5WX0RSSUZUX0RFVEVDVEVEXG4gICAgICB9O1xuICAgICAgd3JpdGVGaWxlU3luYyhmbGFnRmlsZVBhdGgsIEpTT04uc3RyaW5naWZ5KGZsYWdEYXRhLCBudWxsLCAyKSwgeyBmbGFnOiBcInd4XCIgfSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoKGVycm9yID09IG51bGwgPyB2b2lkIDAgOiBlcnJvci5jb2RlKSA9PT0gXCJFRVhJU1RcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zb2xlLndhcm4oXCJGYWlsZWQgdG8gY3JlYXRlIHRlbGVtZXRyeSBmbGFnIGZpbGU6XCIsIGVycm9yKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGRldGVjdEtleWxlc3NFbnZEcmlmdCgpIHtcbiAgdmFyIF9hLCBfYjtcbiAgaWYgKCFjYW5Vc2VLZXlsZXNzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRyeSB7XG4gICAgY29uc3QgeyBzYWZlUGFyc2VDbGVya0ZpbGUgfSA9IGF3YWl0IGltcG9ydChcIi4va2V5bGVzcy1ub2RlLmpzXCIpO1xuICAgIGNvbnN0IGtleWxlc3NGaWxlID0gc2FmZVBhcnNlQ2xlcmtGaWxlKCk7XG4gICAgaWYgKCFrZXlsZXNzRmlsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBlbnZQdWJsaXNoYWJsZUtleSA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMRVJLX1BVQkxJU0hBQkxFX0tFWTtcbiAgICBjb25zdCBlbnZTZWNyZXRLZXkgPSBwcm9jZXNzLmVudi5DTEVSS19TRUNSRVRfS0VZO1xuICAgIGNvbnN0IGhhc0VudlZhcnMgPSBCb29sZWFuKGVudlB1Ymxpc2hhYmxlS2V5IHx8IGVudlNlY3JldEtleSk7XG4gICAgY29uc3Qga2V5bGVzc0ZpbGVIYXNLZXlzID0gQm9vbGVhbigoa2V5bGVzc0ZpbGUgPT0gbnVsbCA/IHZvaWQgMCA6IGtleWxlc3NGaWxlLnB1Ymxpc2hhYmxlS2V5KSAmJiAoa2V5bGVzc0ZpbGUgPT0gbnVsbCA/IHZvaWQgMCA6IGtleWxlc3NGaWxlLnNlY3JldEtleSkpO1xuICAgIGNvbnN0IGVudlZhcnNNaXNzaW5nID0gIWVudlB1Ymxpc2hhYmxlS2V5ICYmICFlbnZTZWNyZXRLZXk7XG4gICAgaWYgKCFoYXNFbnZWYXJzICYmICFrZXlsZXNzRmlsZUhhc0tleXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGVudlZhcnNNaXNzaW5nICYmIGtleWxlc3NGaWxlSGFzS2V5cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWtleWxlc3NGaWxlSGFzS2V5cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWhhc0VudlZhcnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcHVibGljS2V5TWF0Y2ggPSBCb29sZWFuKFxuICAgICAgZW52UHVibGlzaGFibGVLZXkgJiYga2V5bGVzc0ZpbGUucHVibGlzaGFibGVLZXkgJiYgZW52UHVibGlzaGFibGVLZXkgPT09IGtleWxlc3NGaWxlLnB1Ymxpc2hhYmxlS2V5XG4gICAgKTtcbiAgICBjb25zdCBzZWNyZXRLZXlNYXRjaCA9IEJvb2xlYW4oZW52U2VjcmV0S2V5ICYmIGtleWxlc3NGaWxlLnNlY3JldEtleSAmJiBlbnZTZWNyZXRLZXkgPT09IGtleWxlc3NGaWxlLnNlY3JldEtleSk7XG4gICAgY29uc3QgaGFzQWN0dWFsRHJpZnQgPSBlbnZQdWJsaXNoYWJsZUtleSAmJiBrZXlsZXNzRmlsZS5wdWJsaXNoYWJsZUtleSAmJiAhcHVibGljS2V5TWF0Y2ggfHwgZW52U2VjcmV0S2V5ICYmIGtleWxlc3NGaWxlLnNlY3JldEtleSAmJiAhc2VjcmV0S2V5TWF0Y2g7XG4gICAgaWYgKCFoYXNBY3R1YWxEcmlmdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgcHVibGljS2V5TWF0Y2gsXG4gICAgICBzZWNyZXRLZXlNYXRjaCxcbiAgICAgIGVudlZhcnNNaXNzaW5nLFxuICAgICAga2V5bGVzc0ZpbGVIYXNLZXlzLFxuICAgICAga2V5bGVzc1B1Ymxpc2hhYmxlS2V5OiAoX2EgPSBrZXlsZXNzRmlsZS5wdWJsaXNoYWJsZUtleSkgIT0gbnVsbCA/IF9hIDogXCJcIixcbiAgICAgIGVudlB1Ymxpc2hhYmxlS2V5OiBlbnZQdWJsaXNoYWJsZUtleSAhPSBudWxsID8gZW52UHVibGlzaGFibGVLZXkgOiBcIlwiXG4gICAgfTtcbiAgICBjb25zdCBjbGVya0NsaWVudCA9IGNyZWF0ZUNsZXJrQ2xpZW50V2l0aE9wdGlvbnMoe1xuICAgICAgcHVibGlzaGFibGVLZXk6IGtleWxlc3NGaWxlLnB1Ymxpc2hhYmxlS2V5LFxuICAgICAgc2VjcmV0S2V5OiBrZXlsZXNzRmlsZS5zZWNyZXRLZXksXG4gICAgICB0ZWxlbWV0cnk6IHtcbiAgICAgICAgc2FtcGxpbmdSYXRlOiAxXG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3Qgc2hvdWxkRmlyZUV2ZW50ID0gdHJ5TWFya1RlbGVtZXRyeUV2ZW50QXNGaXJlZCgpO1xuICAgIGlmIChzaG91bGRGaXJlRXZlbnQpIHtcbiAgICAgIGNvbnN0IGRyaWZ0RGV0ZWN0ZWRFdmVudCA9IHtcbiAgICAgICAgZXZlbnQ6IEVWRU5UX0tFWUxFU1NfRU5WX0RSSUZUX0RFVEVDVEVELFxuICAgICAgICBldmVudFNhbXBsaW5nUmF0ZTogRVZFTlRfU0FNUExJTkdfUkFURSxcbiAgICAgICAgcGF5bG9hZFxuICAgICAgfTtcbiAgICAgIChfYiA9IGNsZXJrQ2xpZW50LnRlbGVtZXRyeSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLnJlY29yZChkcmlmdERldGVjdGVkRXZlbnQpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLndhcm4oXCJGYWlsZWQgdG8gZGV0ZWN0IGtleWxlc3MgZW52aXJvbm1lbnQgZHJpZnQ6XCIsIGVycm9yKTtcbiAgfVxufVxuZXhwb3J0IHtcbiAgZGV0ZWN0S2V5bGVzc0VudkRyaWZ0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2V5bGVzcy10ZWxlbWV0cnkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/keyless-telemetry.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/mergeNextClerkPropsWithEnv.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/utils/mergeNextClerkPropsWithEnv.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeNextClerkPropsWithEnv: () => (/* binding */ mergeNextClerkPropsWithEnv)\n/* harmony export */ });\n/* harmony import */ var _clerk_shared_underscore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/shared/underscore */ \"(middleware)/./node_modules/@clerk/shared/dist/underscore.mjs\");\n/* harmony import */ var _server_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../server/constants */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/constants.js\");\n\n\n\nconst mergeNextClerkPropsWithEnv = (props) => {\n  var _a;\n  return {\n    ...props,\n    publishableKey: props.publishableKey || \"pk_test_c2ltcGxlLWNhdHRsZS0xMy5jbGVyay5hY2NvdW50cy5kZXYk\" || 0,\n    clerkJSUrl: props.clerkJSUrl || process.env.NEXT_PUBLIC_CLERK_JS_URL,\n    clerkJSVersion: props.clerkJSVersion || process.env.NEXT_PUBLIC_CLERK_JS_VERSION,\n    proxyUrl: props.proxyUrl || process.env.NEXT_PUBLIC_CLERK_PROXY_URL || \"\",\n    domain: props.domain || process.env.NEXT_PUBLIC_CLERK_DOMAIN || \"\",\n    isSatellite: props.isSatellite || (0,_clerk_shared_underscore__WEBPACK_IMPORTED_MODULE_0__.isTruthy)(process.env.NEXT_PUBLIC_CLERK_IS_SATELLITE),\n    signInUrl: props.signInUrl || \"/sign-in\" || 0,\n    signUpUrl: props.signUpUrl || \"/sign-up\" || 0,\n    signInForceRedirectUrl: props.signInForceRedirectUrl || process.env.NEXT_PUBLIC_CLERK_SIGN_IN_FORCE_REDIRECT_URL || \"\",\n    signUpForceRedirectUrl: props.signUpForceRedirectUrl || process.env.NEXT_PUBLIC_CLERK_SIGN_UP_FORCE_REDIRECT_URL || \"\",\n    signInFallbackRedirectUrl: props.signInFallbackRedirectUrl || process.env.NEXT_PUBLIC_CLERK_SIGN_IN_FALLBACK_REDIRECT_URL || \"\",\n    signUpFallbackRedirectUrl: props.signUpFallbackRedirectUrl || process.env.NEXT_PUBLIC_CLERK_SIGN_UP_FALLBACK_REDIRECT_URL || \"\",\n    afterSignInUrl: props.afterSignInUrl || \"/\" || 0,\n    afterSignUpUrl: props.afterSignUpUrl || \"/\" || 0,\n    newSubscriptionRedirectUrl: props.newSubscriptionRedirectUrl || process.env.NEXT_PUBLIC_CLERK_CHECKOUT_CONTINUE_URL || \"\",\n    telemetry: (_a = props.telemetry) != null ? _a : {\n      disabled: (0,_clerk_shared_underscore__WEBPACK_IMPORTED_MODULE_0__.isTruthy)(process.env.NEXT_PUBLIC_CLERK_TELEMETRY_DISABLED),\n      debug: (0,_clerk_shared_underscore__WEBPACK_IMPORTED_MODULE_0__.isTruthy)(process.env.NEXT_PUBLIC_CLERK_TELEMETRY_DEBUG)\n    },\n    sdkMetadata: _server_constants__WEBPACK_IMPORTED_MODULE_1__.SDK_METADATA\n  };\n};\n\n//# sourceMappingURL=mergeNextClerkPropsWithEnv.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vdXRpbHMvbWVyZ2VOZXh0Q2xlcmtQcm9wc1dpdGhFbnYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThCO0FBQ3NCO0FBQ0Q7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsMERBQTZDLElBQUksQ0FBRTtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxrRUFBUTtBQUM5QyxrQ0FBa0MsVUFBeUMsSUFBSSxDQUFFO0FBQ2pGLGtDQUFrQyxVQUF5QyxJQUFJLENBQUU7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsR0FBK0MsSUFBSSxDQUFFO0FBQ2pHLDRDQUE0QyxHQUErQyxJQUFJLENBQUU7QUFDakc7QUFDQTtBQUNBLGdCQUFnQixrRUFBUTtBQUN4QixhQUFhLGtFQUFRO0FBQ3JCLEtBQUs7QUFDTCxpQkFBaUIsMkRBQVk7QUFDN0I7QUFDQTtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSFBcXERlc2t0b3BcXEJleW9uZF9jaGF0XFxjbGllbnRcXG5vZGVfbW9kdWxlc1xcQGNsZXJrXFxuZXh0anNcXGRpc3RcXGVzbVxcdXRpbHNcXG1lcmdlTmV4dENsZXJrUHJvcHNXaXRoRW52LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL2NodW5rLUJVU1lBMkI0LmpzXCI7XG5pbXBvcnQgeyBpc1RydXRoeSB9IGZyb20gXCJAY2xlcmsvc2hhcmVkL3VuZGVyc2NvcmVcIjtcbmltcG9ydCB7IFNES19NRVRBREFUQSB9IGZyb20gXCIuLi9zZXJ2ZXIvY29uc3RhbnRzXCI7XG5jb25zdCBtZXJnZU5leHRDbGVya1Byb3BzV2l0aEVudiA9IChwcm9wcykgPT4ge1xuICB2YXIgX2E7XG4gIHJldHVybiB7XG4gICAgLi4ucHJvcHMsXG4gICAgcHVibGlzaGFibGVLZXk6IHByb3BzLnB1Ymxpc2hhYmxlS2V5IHx8IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMRVJLX1BVQkxJU0hBQkxFX0tFWSB8fCBcIlwiLFxuICAgIGNsZXJrSlNVcmw6IHByb3BzLmNsZXJrSlNVcmwgfHwgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQ0xFUktfSlNfVVJMLFxuICAgIGNsZXJrSlNWZXJzaW9uOiBwcm9wcy5jbGVya0pTVmVyc2lvbiB8fCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19KU19WRVJTSU9OLFxuICAgIHByb3h5VXJsOiBwcm9wcy5wcm94eVVybCB8fCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19QUk9YWV9VUkwgfHwgXCJcIixcbiAgICBkb21haW46IHByb3BzLmRvbWFpbiB8fCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19ET01BSU4gfHwgXCJcIixcbiAgICBpc1NhdGVsbGl0ZTogcHJvcHMuaXNTYXRlbGxpdGUgfHwgaXNUcnV0aHkocHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQ0xFUktfSVNfU0FURUxMSVRFKSxcbiAgICBzaWduSW5Vcmw6IHByb3BzLnNpZ25JblVybCB8fCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19TSUdOX0lOX1VSTCB8fCBcIlwiLFxuICAgIHNpZ25VcFVybDogcHJvcHMuc2lnblVwVXJsIHx8IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMRVJLX1NJR05fVVBfVVJMIHx8IFwiXCIsXG4gICAgc2lnbkluRm9yY2VSZWRpcmVjdFVybDogcHJvcHMuc2lnbkluRm9yY2VSZWRpcmVjdFVybCB8fCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19TSUdOX0lOX0ZPUkNFX1JFRElSRUNUX1VSTCB8fCBcIlwiLFxuICAgIHNpZ25VcEZvcmNlUmVkaXJlY3RVcmw6IHByb3BzLnNpZ25VcEZvcmNlUmVkaXJlY3RVcmwgfHwgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQ0xFUktfU0lHTl9VUF9GT1JDRV9SRURJUkVDVF9VUkwgfHwgXCJcIixcbiAgICBzaWduSW5GYWxsYmFja1JlZGlyZWN0VXJsOiBwcm9wcy5zaWduSW5GYWxsYmFja1JlZGlyZWN0VXJsIHx8IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMRVJLX1NJR05fSU5fRkFMTEJBQ0tfUkVESVJFQ1RfVVJMIHx8IFwiXCIsXG4gICAgc2lnblVwRmFsbGJhY2tSZWRpcmVjdFVybDogcHJvcHMuc2lnblVwRmFsbGJhY2tSZWRpcmVjdFVybCB8fCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19TSUdOX1VQX0ZBTExCQUNLX1JFRElSRUNUX1VSTCB8fCBcIlwiLFxuICAgIGFmdGVyU2lnbkluVXJsOiBwcm9wcy5hZnRlclNpZ25JblVybCB8fCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19BRlRFUl9TSUdOX0lOX1VSTCB8fCBcIlwiLFxuICAgIGFmdGVyU2lnblVwVXJsOiBwcm9wcy5hZnRlclNpZ25VcFVybCB8fCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19BRlRFUl9TSUdOX1VQX1VSTCB8fCBcIlwiLFxuICAgIG5ld1N1YnNjcmlwdGlvblJlZGlyZWN0VXJsOiBwcm9wcy5uZXdTdWJzY3JpcHRpb25SZWRpcmVjdFVybCB8fCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19DSEVDS09VVF9DT05USU5VRV9VUkwgfHwgXCJcIixcbiAgICB0ZWxlbWV0cnk6IChfYSA9IHByb3BzLnRlbGVtZXRyeSkgIT0gbnVsbCA/IF9hIDoge1xuICAgICAgZGlzYWJsZWQ6IGlzVHJ1dGh5KHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMRVJLX1RFTEVNRVRSWV9ESVNBQkxFRCksXG4gICAgICBkZWJ1ZzogaXNUcnV0aHkocHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQ0xFUktfVEVMRU1FVFJZX0RFQlVHKVxuICAgIH0sXG4gICAgc2RrTWV0YWRhdGE6IFNES19NRVRBREFUQVxuICB9O1xufTtcbmV4cG9ydCB7XG4gIG1lcmdlTmV4dENsZXJrUHJvcHNXaXRoRW52XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VOZXh0Q2xlcmtQcm9wc1dpdGhFbnYuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/mergeNextClerkPropsWithEnv.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/only-try.js":
/*!***************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/utils/only-try.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   onlyTry: () => (/* binding */ onlyTry)\n/* harmony export */ });\n\nconst onlyTry = (cb) => {\n  try {\n    cb();\n  } catch {\n  }\n};\n\n//# sourceMappingURL=only-try.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vdXRpbHMvb25seS10cnkuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSFBcXERlc2t0b3BcXEJleW9uZF9jaGF0XFxjbGllbnRcXG5vZGVfbW9kdWxlc1xcQGNsZXJrXFxuZXh0anNcXGRpc3RcXGVzbVxcdXRpbHNcXG9ubHktdHJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL2NodW5rLUJVU1lBMkI0LmpzXCI7XG5jb25zdCBvbmx5VHJ5ID0gKGNiKSA9PiB7XG4gIHRyeSB7XG4gICAgY2IoKTtcbiAgfSBjYXRjaCB7XG4gIH1cbn07XG5leHBvcnQge1xuICBvbmx5VHJ5XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b25seS10cnkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/only-try.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom.react-server.development.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-dom/cjs/react-dom.react-server.development.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/**\n * @license React\n * react-dom.react-server.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n true &&\n  (function () {\n    function noop() {}\n    function getCrossOriginStringAs(as, input) {\n      if (\"font\" === as) return \"\";\n      if (\"string\" === typeof input)\n        return \"use-credentials\" === input ? input : \"\";\n    }\n    function getValueDescriptorExpectingObjectForWarning(thing) {\n      return null === thing\n        ? \"`null`\"\n        : void 0 === thing\n          ? \"`undefined`\"\n          : \"\" === thing\n            ? \"an empty string\"\n            : 'something with type \"' + typeof thing + '\"';\n    }\n    function getValueDescriptorExpectingEnumForWarning(thing) {\n      return null === thing\n        ? \"`null`\"\n        : void 0 === thing\n          ? \"`undefined`\"\n          : \"\" === thing\n            ? \"an empty string\"\n            : \"string\" === typeof thing\n              ? JSON.stringify(thing)\n              : \"number\" === typeof thing\n                ? \"`\" + thing + \"`\"\n                : 'something with type \"' + typeof thing + '\"';\n    }\n    var React = __webpack_require__(/*! next/dist/compiled/react */ \"(middleware)/./node_modules/next/dist/compiled/react/react.react-server.js\"),\n      Internals = {\n        d: {\n          f: noop,\n          r: function () {\n            throw Error(\n              \"Invalid form element. requestFormReset must be passed a form that was rendered by React.\"\n            );\n          },\n          D: noop,\n          C: noop,\n          L: noop,\n          m: noop,\n          X: noop,\n          S: noop,\n          M: noop\n        },\n        p: 0,\n        findDOMNode: null\n      };\n    if (!React.__SERVER_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE)\n      throw Error(\n        'The \"react\" package in this environment is not configured correctly. The \"react-server\" condition must be enabled in any environment that runs React Server Components.'\n      );\n    (\"function\" === typeof Map &&\n      null != Map.prototype &&\n      \"function\" === typeof Map.prototype.forEach &&\n      \"function\" === typeof Set &&\n      null != Set.prototype &&\n      \"function\" === typeof Set.prototype.clear &&\n      \"function\" === typeof Set.prototype.forEach) ||\n      console.error(\n        \"React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills\"\n      );\n    exports.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =\n      Internals;\n    exports.preconnect = function (href, options) {\n      \"string\" === typeof href && href\n        ? null != options && \"object\" !== typeof options\n          ? console.error(\n              \"ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.\",\n              getValueDescriptorExpectingEnumForWarning(options)\n            )\n          : null != options &&\n            \"string\" !== typeof options.crossOrigin &&\n            console.error(\n              \"ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.\",\n              getValueDescriptorExpectingObjectForWarning(options.crossOrigin)\n            )\n        : console.error(\n            \"ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.\",\n            getValueDescriptorExpectingObjectForWarning(href)\n          );\n      \"string\" === typeof href &&\n        (options\n          ? ((options = options.crossOrigin),\n            (options =\n              \"string\" === typeof options\n                ? \"use-credentials\" === options\n                  ? options\n                  : \"\"\n                : void 0))\n          : (options = null),\n        Internals.d.C(href, options));\n    };\n    exports.prefetchDNS = function (href) {\n      if (\"string\" !== typeof href || !href)\n        console.error(\n          \"ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.\",\n          getValueDescriptorExpectingObjectForWarning(href)\n        );\n      else if (1 < arguments.length) {\n        var options = arguments[1];\n        \"object\" === typeof options && options.hasOwnProperty(\"crossOrigin\")\n          ? console.error(\n              \"ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.\",\n              getValueDescriptorExpectingEnumForWarning(options)\n            )\n          : console.error(\n              \"ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.\",\n              getValueDescriptorExpectingEnumForWarning(options)\n            );\n      }\n      \"string\" === typeof href && Internals.d.D(href);\n    };\n    exports.preinit = function (href, options) {\n      \"string\" === typeof href && href\n        ? null == options || \"object\" !== typeof options\n          ? console.error(\n              \"ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.\",\n              getValueDescriptorExpectingEnumForWarning(options)\n            )\n          : \"style\" !== options.as &&\n            \"script\" !== options.as &&\n            console.error(\n              'ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are \"style\" and \"script\".',\n              getValueDescriptorExpectingEnumForWarning(options.as)\n            )\n        : console.error(\n            \"ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.\",\n            getValueDescriptorExpectingObjectForWarning(href)\n          );\n      if (\n        \"string\" === typeof href &&\n        options &&\n        \"string\" === typeof options.as\n      ) {\n        var as = options.as,\n          crossOrigin = getCrossOriginStringAs(as, options.crossOrigin),\n          integrity =\n            \"string\" === typeof options.integrity ? options.integrity : void 0,\n          fetchPriority =\n            \"string\" === typeof options.fetchPriority\n              ? options.fetchPriority\n              : void 0;\n        \"style\" === as\n          ? Internals.d.S(\n              href,\n              \"string\" === typeof options.precedence\n                ? options.precedence\n                : void 0,\n              {\n                crossOrigin: crossOrigin,\n                integrity: integrity,\n                fetchPriority: fetchPriority\n              }\n            )\n          : \"script\" === as &&\n            Internals.d.X(href, {\n              crossOrigin: crossOrigin,\n              integrity: integrity,\n              fetchPriority: fetchPriority,\n              nonce: \"string\" === typeof options.nonce ? options.nonce : void 0\n            });\n      }\n    };\n    exports.preinitModule = function (href, options) {\n      var encountered = \"\";\n      (\"string\" === typeof href && href) ||\n        (encountered +=\n          \" The `href` argument encountered was \" +\n          getValueDescriptorExpectingObjectForWarning(href) +\n          \".\");\n      void 0 !== options && \"object\" !== typeof options\n        ? (encountered +=\n            \" The `options` argument encountered was \" +\n            getValueDescriptorExpectingObjectForWarning(options) +\n            \".\")\n        : options &&\n          \"as\" in options &&\n          \"script\" !== options.as &&\n          (encountered +=\n            \" The `as` option encountered was \" +\n            getValueDescriptorExpectingEnumForWarning(options.as) +\n            \".\");\n      if (encountered)\n        console.error(\n          \"ReactDOM.preinitModule(): Expected up to two arguments, a non-empty `href` string and, optionally, an `options` object with a valid `as` property.%s\",\n          encountered\n        );\n      else\n        switch (\n          ((encountered =\n            options && \"string\" === typeof options.as ? options.as : \"script\"),\n          encountered)\n        ) {\n          case \"script\":\n            break;\n          default:\n            (encountered =\n              getValueDescriptorExpectingEnumForWarning(encountered)),\n              console.error(\n                'ReactDOM.preinitModule(): Currently the only supported \"as\" type for this function is \"script\" but received \"%s\" instead. This warning was generated for `href` \"%s\". In the future other module types will be supported, aligning with the import-attributes proposal. Learn more here: (https://github.com/tc39/proposal-import-attributes)',\n                encountered,\n                href\n              );\n        }\n      if (\"string\" === typeof href)\n        if (\"object\" === typeof options && null !== options) {\n          if (null == options.as || \"script\" === options.as)\n            (encountered = getCrossOriginStringAs(\n              options.as,\n              options.crossOrigin\n            )),\n              Internals.d.M(href, {\n                crossOrigin: encountered,\n                integrity:\n                  \"string\" === typeof options.integrity\n                    ? options.integrity\n                    : void 0,\n                nonce:\n                  \"string\" === typeof options.nonce ? options.nonce : void 0\n              });\n        } else null == options && Internals.d.M(href);\n    };\n    exports.preload = function (href, options) {\n      var encountered = \"\";\n      (\"string\" === typeof href && href) ||\n        (encountered +=\n          \" The `href` argument encountered was \" +\n          getValueDescriptorExpectingObjectForWarning(href) +\n          \".\");\n      null == options || \"object\" !== typeof options\n        ? (encountered +=\n            \" The `options` argument encountered was \" +\n            getValueDescriptorExpectingObjectForWarning(options) +\n            \".\")\n        : (\"string\" === typeof options.as && options.as) ||\n          (encountered +=\n            \" The `as` option encountered was \" +\n            getValueDescriptorExpectingObjectForWarning(options.as) +\n            \".\");\n      encountered &&\n        console.error(\n          'ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel=\"preload\" as=\"...\" />` tag.%s',\n          encountered\n        );\n      if (\n        \"string\" === typeof href &&\n        \"object\" === typeof options &&\n        null !== options &&\n        \"string\" === typeof options.as\n      ) {\n        encountered = options.as;\n        var crossOrigin = getCrossOriginStringAs(\n          encountered,\n          options.crossOrigin\n        );\n        Internals.d.L(href, encountered, {\n          crossOrigin: crossOrigin,\n          integrity:\n            \"string\" === typeof options.integrity ? options.integrity : void 0,\n          nonce: \"string\" === typeof options.nonce ? options.nonce : void 0,\n          type: \"string\" === typeof options.type ? options.type : void 0,\n          fetchPriority:\n            \"string\" === typeof options.fetchPriority\n              ? options.fetchPriority\n              : void 0,\n          referrerPolicy:\n            \"string\" === typeof options.referrerPolicy\n              ? options.referrerPolicy\n              : void 0,\n          imageSrcSet:\n            \"string\" === typeof options.imageSrcSet\n              ? options.imageSrcSet\n              : void 0,\n          imageSizes:\n            \"string\" === typeof options.imageSizes\n              ? options.imageSizes\n              : void 0,\n          media: \"string\" === typeof options.media ? options.media : void 0\n        });\n      }\n    };\n    exports.preloadModule = function (href, options) {\n      var encountered = \"\";\n      (\"string\" === typeof href && href) ||\n        (encountered +=\n          \" The `href` argument encountered was \" +\n          getValueDescriptorExpectingObjectForWarning(href) +\n          \".\");\n      void 0 !== options && \"object\" !== typeof options\n        ? (encountered +=\n            \" The `options` argument encountered was \" +\n            getValueDescriptorExpectingObjectForWarning(options) +\n            \".\")\n        : options &&\n          \"as\" in options &&\n          \"string\" !== typeof options.as &&\n          (encountered +=\n            \" The `as` option encountered was \" +\n            getValueDescriptorExpectingObjectForWarning(options.as) +\n            \".\");\n      encountered &&\n        console.error(\n          'ReactDOM.preloadModule(): Expected two arguments, a non-empty `href` string and, optionally, an `options` object with an `as` property valid for a `<link rel=\"modulepreload\" as=\"...\" />` tag.%s',\n          encountered\n        );\n      \"string\" === typeof href &&\n        (options\n          ? ((encountered = getCrossOriginStringAs(\n              options.as,\n              options.crossOrigin\n            )),\n            Internals.d.m(href, {\n              as:\n                \"string\" === typeof options.as && \"script\" !== options.as\n                  ? options.as\n                  : void 0,\n              crossOrigin: encountered,\n              integrity:\n                \"string\" === typeof options.integrity\n                  ? options.integrity\n                  : void 0\n            }))\n          : Internals.d.m(href));\n    };\n    exports.version = \"19.2.0-canary-0bdb9206-20250818\";\n  })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5yZWFjdC1zZXJ2ZXIuZGV2ZWxvcG1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVhO0FBQ2IsS0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixtQkFBTyxDQUFDLDRHQUEwQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxvRUFBb0U7QUFDeEU7QUFDQSxJQUFJLGtCQUFrQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksbUJBQW1CO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxlQUFlO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLElBQUkscUJBQXFCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLFVBQVU7QUFDVjtBQUNBLElBQUksZUFBZTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsSUFBSSxxQkFBcUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxJQUFJLGVBQWU7QUFDbkIsR0FBRyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxIUFxcRGVza3RvcFxcQmV5b25kX2NoYXRcXGNsaWVudFxcbm9kZV9tb2R1bGVzXFxuZXh0XFxkaXN0XFxjb21waWxlZFxccmVhY3QtZG9tXFxjanNcXHJlYWN0LWRvbS5yZWFjdC1zZXJ2ZXIuZGV2ZWxvcG1lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtZG9tLnJlYWN0LXNlcnZlci5kZXZlbG9wbWVudC5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgJiZcbiAgKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBub29wKCkge31cbiAgICBmdW5jdGlvbiBnZXRDcm9zc09yaWdpblN0cmluZ0FzKGFzLCBpbnB1dCkge1xuICAgICAgaWYgKFwiZm9udFwiID09PSBhcykgcmV0dXJuIFwiXCI7XG4gICAgICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGlucHV0KVxuICAgICAgICByZXR1cm4gXCJ1c2UtY3JlZGVudGlhbHNcIiA9PT0gaW5wdXQgPyBpbnB1dCA6IFwiXCI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFZhbHVlRGVzY3JpcHRvckV4cGVjdGluZ09iamVjdEZvcldhcm5pbmcodGhpbmcpIHtcbiAgICAgIHJldHVybiBudWxsID09PSB0aGluZ1xuICAgICAgICA/IFwiYG51bGxgXCJcbiAgICAgICAgOiB2b2lkIDAgPT09IHRoaW5nXG4gICAgICAgICAgPyBcImB1bmRlZmluZWRgXCJcbiAgICAgICAgICA6IFwiXCIgPT09IHRoaW5nXG4gICAgICAgICAgICA/IFwiYW4gZW1wdHkgc3RyaW5nXCJcbiAgICAgICAgICAgIDogJ3NvbWV0aGluZyB3aXRoIHR5cGUgXCInICsgdHlwZW9mIHRoaW5nICsgJ1wiJztcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0VmFsdWVEZXNjcmlwdG9yRXhwZWN0aW5nRW51bUZvcldhcm5pbmcodGhpbmcpIHtcbiAgICAgIHJldHVybiBudWxsID09PSB0aGluZ1xuICAgICAgICA/IFwiYG51bGxgXCJcbiAgICAgICAgOiB2b2lkIDAgPT09IHRoaW5nXG4gICAgICAgICAgPyBcImB1bmRlZmluZWRgXCJcbiAgICAgICAgICA6IFwiXCIgPT09IHRoaW5nXG4gICAgICAgICAgICA/IFwiYW4gZW1wdHkgc3RyaW5nXCJcbiAgICAgICAgICAgIDogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHRoaW5nXG4gICAgICAgICAgICAgID8gSlNPTi5zdHJpbmdpZnkodGhpbmcpXG4gICAgICAgICAgICAgIDogXCJudW1iZXJcIiA9PT0gdHlwZW9mIHRoaW5nXG4gICAgICAgICAgICAgICAgPyBcImBcIiArIHRoaW5nICsgXCJgXCJcbiAgICAgICAgICAgICAgICA6ICdzb21ldGhpbmcgd2l0aCB0eXBlIFwiJyArIHR5cGVvZiB0aGluZyArICdcIic7XG4gICAgfVxuICAgIHZhciBSZWFjdCA9IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3RcIiksXG4gICAgICBJbnRlcm5hbHMgPSB7XG4gICAgICAgIGQ6IHtcbiAgICAgICAgICBmOiBub29wLFxuICAgICAgICAgIHI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgICBcIkludmFsaWQgZm9ybSBlbGVtZW50LiByZXF1ZXN0Rm9ybVJlc2V0IG11c3QgYmUgcGFzc2VkIGEgZm9ybSB0aGF0IHdhcyByZW5kZXJlZCBieSBSZWFjdC5cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIEQ6IG5vb3AsXG4gICAgICAgICAgQzogbm9vcCxcbiAgICAgICAgICBMOiBub29wLFxuICAgICAgICAgIG06IG5vb3AsXG4gICAgICAgICAgWDogbm9vcCxcbiAgICAgICAgICBTOiBub29wLFxuICAgICAgICAgIE06IG5vb3BcbiAgICAgICAgfSxcbiAgICAgICAgcDogMCxcbiAgICAgICAgZmluZERPTU5vZGU6IG51bGxcbiAgICAgIH07XG4gICAgaWYgKCFSZWFjdC5fX1NFUlZFUl9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREUpXG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgJ1RoZSBcInJlYWN0XCIgcGFja2FnZSBpbiB0aGlzIGVudmlyb25tZW50IGlzIG5vdCBjb25maWd1cmVkIGNvcnJlY3RseS4gVGhlIFwicmVhY3Qtc2VydmVyXCIgY29uZGl0aW9uIG11c3QgYmUgZW5hYmxlZCBpbiBhbnkgZW52aXJvbm1lbnQgdGhhdCBydW5zIFJlYWN0IFNlcnZlciBDb21wb25lbnRzLidcbiAgICAgICk7XG4gICAgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIE1hcCAmJlxuICAgICAgbnVsbCAhPSBNYXAucHJvdG90eXBlICYmXG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBNYXAucHJvdG90eXBlLmZvckVhY2ggJiZcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIFNldCAmJlxuICAgICAgbnVsbCAhPSBTZXQucHJvdG90eXBlICYmXG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBTZXQucHJvdG90eXBlLmNsZWFyICYmXG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBTZXQucHJvdG90eXBlLmZvckVhY2gpIHx8XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICBcIlJlYWN0IGRlcGVuZHMgb24gTWFwIGFuZCBTZXQgYnVpbHQtaW4gdHlwZXMuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIlxuICAgICAgKTtcbiAgICBleHBvcnRzLl9fRE9NX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1dBUk5fVVNFUlNfVEhFWV9DQU5OT1RfVVBHUkFERSA9XG4gICAgICBJbnRlcm5hbHM7XG4gICAgZXhwb3J0cy5wcmVjb25uZWN0ID0gZnVuY3Rpb24gKGhyZWYsIG9wdGlvbnMpIHtcbiAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBocmVmICYmIGhyZWZcbiAgICAgICAgPyBudWxsICE9IG9wdGlvbnMgJiYgXCJvYmplY3RcIiAhPT0gdHlwZW9mIG9wdGlvbnNcbiAgICAgICAgICA/IGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgIFwiUmVhY3RET00ucHJlY29ubmVjdCgpOiBFeHBlY3RlZCB0aGUgYG9wdGlvbnNgIGFyZ3VtZW50IChzZWNvbmQpIHRvIGJlIGFuIG9iamVjdCBidXQgZW5jb3VudGVyZWQgJXMgaW5zdGVhZC4gVGhlIG9ubHkgc3VwcG9ydGVkIG9wdGlvbiBhdCB0aGlzIHRpbWUgaXMgYGNyb3NzT3JpZ2luYCB3aGljaCBhY2NlcHRzIGEgc3RyaW5nLlwiLFxuICAgICAgICAgICAgICBnZXRWYWx1ZURlc2NyaXB0b3JFeHBlY3RpbmdFbnVtRm9yV2FybmluZyhvcHRpb25zKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIDogbnVsbCAhPSBvcHRpb25zICYmXG4gICAgICAgICAgICBcInN0cmluZ1wiICE9PSB0eXBlb2Ygb3B0aW9ucy5jcm9zc09yaWdpbiAmJlxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgXCJSZWFjdERPTS5wcmVjb25uZWN0KCk6IEV4cGVjdGVkIHRoZSBgY3Jvc3NPcmlnaW5gIG9wdGlvbiAoc2Vjb25kIGFyZ3VtZW50KSB0byBiZSBhIHN0cmluZyBidXQgZW5jb3VudGVyZWQgJXMgaW5zdGVhZC4gVHJ5IHJlbW92aW5nIHRoaXMgb3B0aW9uIG9yIHBhc3NpbmcgYSBzdHJpbmcgdmFsdWUgaW5zdGVhZC5cIixcbiAgICAgICAgICAgICAgZ2V0VmFsdWVEZXNjcmlwdG9yRXhwZWN0aW5nT2JqZWN0Rm9yV2FybmluZyhvcHRpb25zLmNyb3NzT3JpZ2luKVxuICAgICAgICAgICAgKVxuICAgICAgICA6IGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBcIlJlYWN0RE9NLnByZWNvbm5lY3QoKTogRXhwZWN0ZWQgdGhlIGBocmVmYCBhcmd1bWVudCAoZmlyc3QpIHRvIGJlIGEgbm9uLWVtcHR5IHN0cmluZyBidXQgZW5jb3VudGVyZWQgJXMgaW5zdGVhZC5cIixcbiAgICAgICAgICAgIGdldFZhbHVlRGVzY3JpcHRvckV4cGVjdGluZ09iamVjdEZvcldhcm5pbmcoaHJlZilcbiAgICAgICAgICApO1xuICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYgJiZcbiAgICAgICAgKG9wdGlvbnNcbiAgICAgICAgICA/ICgob3B0aW9ucyA9IG9wdGlvbnMuY3Jvc3NPcmlnaW4pLFxuICAgICAgICAgICAgKG9wdGlvbnMgPVxuICAgICAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9uc1xuICAgICAgICAgICAgICAgID8gXCJ1c2UtY3JlZGVudGlhbHNcIiA9PT0gb3B0aW9uc1xuICAgICAgICAgICAgICAgICAgPyBvcHRpb25zXG4gICAgICAgICAgICAgICAgICA6IFwiXCJcbiAgICAgICAgICAgICAgICA6IHZvaWQgMCkpXG4gICAgICAgICAgOiAob3B0aW9ucyA9IG51bGwpLFxuICAgICAgICBJbnRlcm5hbHMuZC5DKGhyZWYsIG9wdGlvbnMpKTtcbiAgICB9O1xuICAgIGV4cG9ydHMucHJlZmV0Y2hETlMgPSBmdW5jdGlvbiAoaHJlZikge1xuICAgICAgaWYgKFwic3RyaW5nXCIgIT09IHR5cGVvZiBocmVmIHx8ICFocmVmKVxuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgIFwiUmVhY3RET00ucHJlZmV0Y2hETlMoKTogRXhwZWN0ZWQgdGhlIGBocmVmYCBhcmd1bWVudCAoZmlyc3QpIHRvIGJlIGEgbm9uLWVtcHR5IHN0cmluZyBidXQgZW5jb3VudGVyZWQgJXMgaW5zdGVhZC5cIixcbiAgICAgICAgICBnZXRWYWx1ZURlc2NyaXB0b3JFeHBlY3RpbmdPYmplY3RGb3JXYXJuaW5nKGhyZWYpXG4gICAgICAgICk7XG4gICAgICBlbHNlIGlmICgxIDwgYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIG9wdGlvbnMgJiYgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShcImNyb3NzT3JpZ2luXCIpXG4gICAgICAgICAgPyBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICBcIlJlYWN0RE9NLnByZWZldGNoRE5TKCk6IEV4cGVjdGVkIG9ubHkgb25lIGFyZ3VtZW50LCBgaHJlZmAsIGJ1dCBlbmNvdW50ZXJlZCAlcyBhcyBhIHNlY29uZCBhcmd1bWVudCBpbnN0ZWFkLiBUaGlzIGFyZ3VtZW50IGlzIHJlc2VydmVkIGZvciBmdXR1cmUgb3B0aW9ucyBhbmQgaXMgY3VycmVudGx5IGRpc2FsbG93ZWQuIEl0IGxvb2tzIGxpa2UgdGhlIHlvdSBhcmUgYXR0ZW1wdGluZyB0byBzZXQgYSBjcm9zc09yaWdpbiBwcm9wZXJ0eSBmb3IgdGhpcyBETlMgbG9va3VwIGhpbnQuIEJyb3dzZXJzIGRvIG5vdCBwZXJmb3JtIEROUyBxdWVyaWVzIHVzaW5nIENPUlMgYW5kIHNldHRpbmcgdGhpcyBhdHRyaWJ1dGUgb24gdGhlIHJlc291cmNlIGhpbnQgaGFzIG5vIGVmZmVjdC4gVHJ5IGNhbGxpbmcgUmVhY3RET00ucHJlZmV0Y2hETlMoKSB3aXRoIGp1c3QgYSBzaW5nbGUgc3RyaW5nIGFyZ3VtZW50LCBgaHJlZmAuXCIsXG4gICAgICAgICAgICAgIGdldFZhbHVlRGVzY3JpcHRvckV4cGVjdGluZ0VudW1Gb3JXYXJuaW5nKG9wdGlvbnMpXG4gICAgICAgICAgICApXG4gICAgICAgICAgOiBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICBcIlJlYWN0RE9NLnByZWZldGNoRE5TKCk6IEV4cGVjdGVkIG9ubHkgb25lIGFyZ3VtZW50LCBgaHJlZmAsIGJ1dCBlbmNvdW50ZXJlZCAlcyBhcyBhIHNlY29uZCBhcmd1bWVudCBpbnN0ZWFkLiBUaGlzIGFyZ3VtZW50IGlzIHJlc2VydmVkIGZvciBmdXR1cmUgb3B0aW9ucyBhbmQgaXMgY3VycmVudGx5IGRpc2FsbG93ZWQuIFRyeSBjYWxsaW5nIFJlYWN0RE9NLnByZWZldGNoRE5TKCkgd2l0aCBqdXN0IGEgc2luZ2xlIHN0cmluZyBhcmd1bWVudCwgYGhyZWZgLlwiLFxuICAgICAgICAgICAgICBnZXRWYWx1ZURlc2NyaXB0b3JFeHBlY3RpbmdFbnVtRm9yV2FybmluZyhvcHRpb25zKVxuICAgICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBocmVmICYmIEludGVybmFscy5kLkQoaHJlZik7XG4gICAgfTtcbiAgICBleHBvcnRzLnByZWluaXQgPSBmdW5jdGlvbiAoaHJlZiwgb3B0aW9ucykge1xuICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYgJiYgaHJlZlxuICAgICAgICA/IG51bGwgPT0gb3B0aW9ucyB8fCBcIm9iamVjdFwiICE9PSB0eXBlb2Ygb3B0aW9uc1xuICAgICAgICAgID8gY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgXCJSZWFjdERPTS5wcmVpbml0KCk6IEV4cGVjdGVkIHRoZSBgb3B0aW9uc2AgYXJndW1lbnQgKHNlY29uZCkgdG8gYmUgYW4gb2JqZWN0IHdpdGggYW4gYGFzYCBwcm9wZXJ0eSBkZXNjcmliaW5nIHRoZSB0eXBlIG9mIHJlc291cmNlIHRvIGJlIHByZWluaXRpYWxpemVkIGJ1dCBlbmNvdW50ZXJlZCAlcyBpbnN0ZWFkLlwiLFxuICAgICAgICAgICAgICBnZXRWYWx1ZURlc2NyaXB0b3JFeHBlY3RpbmdFbnVtRm9yV2FybmluZyhvcHRpb25zKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIDogXCJzdHlsZVwiICE9PSBvcHRpb25zLmFzICYmXG4gICAgICAgICAgICBcInNjcmlwdFwiICE9PSBvcHRpb25zLmFzICYmXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAnUmVhY3RET00ucHJlaW5pdCgpOiBFeHBlY3RlZCB0aGUgYGFzYCBwcm9wZXJ0eSBpbiB0aGUgYG9wdGlvbnNgIGFyZ3VtZW50IChzZWNvbmQpIHRvIGNvbnRhaW4gYSB2YWxpZCB2YWx1ZSBkZXNjcmliaW5nIHRoZSB0eXBlIG9mIHJlc291cmNlIHRvIGJlIHByZWluaXRpYWxpemVkIGJ1dCBlbmNvdW50ZXJlZCAlcyBpbnN0ZWFkLiBWYWxpZCB2YWx1ZXMgZm9yIGBhc2AgYXJlIFwic3R5bGVcIiBhbmQgXCJzY3JpcHRcIi4nLFxuICAgICAgICAgICAgICBnZXRWYWx1ZURlc2NyaXB0b3JFeHBlY3RpbmdFbnVtRm9yV2FybmluZyhvcHRpb25zLmFzKVxuICAgICAgICAgICAgKVxuICAgICAgICA6IGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBcIlJlYWN0RE9NLnByZWluaXQoKTogRXhwZWN0ZWQgdGhlIGBocmVmYCBhcmd1bWVudCAoZmlyc3QpIHRvIGJlIGEgbm9uLWVtcHR5IHN0cmluZyBidXQgZW5jb3VudGVyZWQgJXMgaW5zdGVhZC5cIixcbiAgICAgICAgICAgIGdldFZhbHVlRGVzY3JpcHRvckV4cGVjdGluZ09iamVjdEZvcldhcm5pbmcoaHJlZilcbiAgICAgICAgICApO1xuICAgICAgaWYgKFxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZiAmJlxuICAgICAgICBvcHRpb25zICYmXG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmFzXG4gICAgICApIHtcbiAgICAgICAgdmFyIGFzID0gb3B0aW9ucy5hcyxcbiAgICAgICAgICBjcm9zc09yaWdpbiA9IGdldENyb3NzT3JpZ2luU3RyaW5nQXMoYXMsIG9wdGlvbnMuY3Jvc3NPcmlnaW4pLFxuICAgICAgICAgIGludGVncml0eSA9XG4gICAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5pbnRlZ3JpdHkgPyBvcHRpb25zLmludGVncml0eSA6IHZvaWQgMCxcbiAgICAgICAgICBmZXRjaFByaW9yaXR5ID1cbiAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmZldGNoUHJpb3JpdHlcbiAgICAgICAgICAgICAgPyBvcHRpb25zLmZldGNoUHJpb3JpdHlcbiAgICAgICAgICAgICAgOiB2b2lkIDA7XG4gICAgICAgIFwic3R5bGVcIiA9PT0gYXNcbiAgICAgICAgICA/IEludGVybmFscy5kLlMoXG4gICAgICAgICAgICAgIGhyZWYsXG4gICAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLnByZWNlZGVuY2VcbiAgICAgICAgICAgICAgICA/IG9wdGlvbnMucHJlY2VkZW5jZVxuICAgICAgICAgICAgICAgIDogdm9pZCAwLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY3Jvc3NPcmlnaW46IGNyb3NzT3JpZ2luLFxuICAgICAgICAgICAgICAgIGludGVncml0eTogaW50ZWdyaXR5LFxuICAgICAgICAgICAgICAgIGZldGNoUHJpb3JpdHk6IGZldGNoUHJpb3JpdHlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKVxuICAgICAgICAgIDogXCJzY3JpcHRcIiA9PT0gYXMgJiZcbiAgICAgICAgICAgIEludGVybmFscy5kLlgoaHJlZiwge1xuICAgICAgICAgICAgICBjcm9zc09yaWdpbjogY3Jvc3NPcmlnaW4sXG4gICAgICAgICAgICAgIGludGVncml0eTogaW50ZWdyaXR5LFxuICAgICAgICAgICAgICBmZXRjaFByaW9yaXR5OiBmZXRjaFByaW9yaXR5LFxuICAgICAgICAgICAgICBub25jZTogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMubm9uY2UgPyBvcHRpb25zLm5vbmNlIDogdm9pZCAwXG4gICAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGV4cG9ydHMucHJlaW5pdE1vZHVsZSA9IGZ1bmN0aW9uIChocmVmLCBvcHRpb25zKSB7XG4gICAgICB2YXIgZW5jb3VudGVyZWQgPSBcIlwiO1xuICAgICAgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBocmVmICYmIGhyZWYpIHx8XG4gICAgICAgIChlbmNvdW50ZXJlZCArPVxuICAgICAgICAgIFwiIFRoZSBgaHJlZmAgYXJndW1lbnQgZW5jb3VudGVyZWQgd2FzIFwiICtcbiAgICAgICAgICBnZXRWYWx1ZURlc2NyaXB0b3JFeHBlY3RpbmdPYmplY3RGb3JXYXJuaW5nKGhyZWYpICtcbiAgICAgICAgICBcIi5cIik7XG4gICAgICB2b2lkIDAgIT09IG9wdGlvbnMgJiYgXCJvYmplY3RcIiAhPT0gdHlwZW9mIG9wdGlvbnNcbiAgICAgICAgPyAoZW5jb3VudGVyZWQgKz1cbiAgICAgICAgICAgIFwiIFRoZSBgb3B0aW9uc2AgYXJndW1lbnQgZW5jb3VudGVyZWQgd2FzIFwiICtcbiAgICAgICAgICAgIGdldFZhbHVlRGVzY3JpcHRvckV4cGVjdGluZ09iamVjdEZvcldhcm5pbmcob3B0aW9ucykgK1xuICAgICAgICAgICAgXCIuXCIpXG4gICAgICAgIDogb3B0aW9ucyAmJlxuICAgICAgICAgIFwiYXNcIiBpbiBvcHRpb25zICYmXG4gICAgICAgICAgXCJzY3JpcHRcIiAhPT0gb3B0aW9ucy5hcyAmJlxuICAgICAgICAgIChlbmNvdW50ZXJlZCArPVxuICAgICAgICAgICAgXCIgVGhlIGBhc2Agb3B0aW9uIGVuY291bnRlcmVkIHdhcyBcIiArXG4gICAgICAgICAgICBnZXRWYWx1ZURlc2NyaXB0b3JFeHBlY3RpbmdFbnVtRm9yV2FybmluZyhvcHRpb25zLmFzKSArXG4gICAgICAgICAgICBcIi5cIik7XG4gICAgICBpZiAoZW5jb3VudGVyZWQpXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgXCJSZWFjdERPTS5wcmVpbml0TW9kdWxlKCk6IEV4cGVjdGVkIHVwIHRvIHR3byBhcmd1bWVudHMsIGEgbm9uLWVtcHR5IGBocmVmYCBzdHJpbmcgYW5kLCBvcHRpb25hbGx5LCBhbiBgb3B0aW9uc2Agb2JqZWN0IHdpdGggYSB2YWxpZCBgYXNgIHByb3BlcnR5LiVzXCIsXG4gICAgICAgICAgZW5jb3VudGVyZWRcbiAgICAgICAgKTtcbiAgICAgIGVsc2VcbiAgICAgICAgc3dpdGNoIChcbiAgICAgICAgICAoKGVuY291bnRlcmVkID1cbiAgICAgICAgICAgIG9wdGlvbnMgJiYgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuYXMgPyBvcHRpb25zLmFzIDogXCJzY3JpcHRcIiksXG4gICAgICAgICAgZW5jb3VudGVyZWQpXG4gICAgICAgICkge1xuICAgICAgICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAoZW5jb3VudGVyZWQgPVxuICAgICAgICAgICAgICBnZXRWYWx1ZURlc2NyaXB0b3JFeHBlY3RpbmdFbnVtRm9yV2FybmluZyhlbmNvdW50ZXJlZCkpLFxuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICdSZWFjdERPTS5wcmVpbml0TW9kdWxlKCk6IEN1cnJlbnRseSB0aGUgb25seSBzdXBwb3J0ZWQgXCJhc1wiIHR5cGUgZm9yIHRoaXMgZnVuY3Rpb24gaXMgXCJzY3JpcHRcIiBidXQgcmVjZWl2ZWQgXCIlc1wiIGluc3RlYWQuIFRoaXMgd2FybmluZyB3YXMgZ2VuZXJhdGVkIGZvciBgaHJlZmAgXCIlc1wiLiBJbiB0aGUgZnV0dXJlIG90aGVyIG1vZHVsZSB0eXBlcyB3aWxsIGJlIHN1cHBvcnRlZCwgYWxpZ25pbmcgd2l0aCB0aGUgaW1wb3J0LWF0dHJpYnV0ZXMgcHJvcG9zYWwuIExlYXJuIG1vcmUgaGVyZTogKGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWltcG9ydC1hdHRyaWJ1dGVzKScsXG4gICAgICAgICAgICAgICAgZW5jb3VudGVyZWQsXG4gICAgICAgICAgICAgICAgaHJlZlxuICAgICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYpXG4gICAgICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2Ygb3B0aW9ucyAmJiBudWxsICE9PSBvcHRpb25zKSB7XG4gICAgICAgICAgaWYgKG51bGwgPT0gb3B0aW9ucy5hcyB8fCBcInNjcmlwdFwiID09PSBvcHRpb25zLmFzKVxuICAgICAgICAgICAgKGVuY291bnRlcmVkID0gZ2V0Q3Jvc3NPcmlnaW5TdHJpbmdBcyhcbiAgICAgICAgICAgICAgb3B0aW9ucy5hcyxcbiAgICAgICAgICAgICAgb3B0aW9ucy5jcm9zc09yaWdpblxuICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgIEludGVybmFscy5kLk0oaHJlZiwge1xuICAgICAgICAgICAgICAgIGNyb3NzT3JpZ2luOiBlbmNvdW50ZXJlZCxcbiAgICAgICAgICAgICAgICBpbnRlZ3JpdHk6XG4gICAgICAgICAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5pbnRlZ3JpdHlcbiAgICAgICAgICAgICAgICAgICAgPyBvcHRpb25zLmludGVncml0eVxuICAgICAgICAgICAgICAgICAgICA6IHZvaWQgMCxcbiAgICAgICAgICAgICAgICBub25jZTpcbiAgICAgICAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLm5vbmNlID8gb3B0aW9ucy5ub25jZSA6IHZvaWQgMFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIG51bGwgPT0gb3B0aW9ucyAmJiBJbnRlcm5hbHMuZC5NKGhyZWYpO1xuICAgIH07XG4gICAgZXhwb3J0cy5wcmVsb2FkID0gZnVuY3Rpb24gKGhyZWYsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBlbmNvdW50ZXJlZCA9IFwiXCI7XG4gICAgICAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYgJiYgaHJlZikgfHxcbiAgICAgICAgKGVuY291bnRlcmVkICs9XG4gICAgICAgICAgXCIgVGhlIGBocmVmYCBhcmd1bWVudCBlbmNvdW50ZXJlZCB3YXMgXCIgK1xuICAgICAgICAgIGdldFZhbHVlRGVzY3JpcHRvckV4cGVjdGluZ09iamVjdEZvcldhcm5pbmcoaHJlZikgK1xuICAgICAgICAgIFwiLlwiKTtcbiAgICAgIG51bGwgPT0gb3B0aW9ucyB8fCBcIm9iamVjdFwiICE9PSB0eXBlb2Ygb3B0aW9uc1xuICAgICAgICA/IChlbmNvdW50ZXJlZCArPVxuICAgICAgICAgICAgXCIgVGhlIGBvcHRpb25zYCBhcmd1bWVudCBlbmNvdW50ZXJlZCB3YXMgXCIgK1xuICAgICAgICAgICAgZ2V0VmFsdWVEZXNjcmlwdG9yRXhwZWN0aW5nT2JqZWN0Rm9yV2FybmluZyhvcHRpb25zKSArXG4gICAgICAgICAgICBcIi5cIilcbiAgICAgICAgOiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuYXMgJiYgb3B0aW9ucy5hcykgfHxcbiAgICAgICAgICAoZW5jb3VudGVyZWQgKz1cbiAgICAgICAgICAgIFwiIFRoZSBgYXNgIG9wdGlvbiBlbmNvdW50ZXJlZCB3YXMgXCIgK1xuICAgICAgICAgICAgZ2V0VmFsdWVEZXNjcmlwdG9yRXhwZWN0aW5nT2JqZWN0Rm9yV2FybmluZyhvcHRpb25zLmFzKSArXG4gICAgICAgICAgICBcIi5cIik7XG4gICAgICBlbmNvdW50ZXJlZCAmJlxuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICdSZWFjdERPTS5wcmVsb2FkKCk6IEV4cGVjdGVkIHR3byBhcmd1bWVudHMsIGEgbm9uLWVtcHR5IGBocmVmYCBzdHJpbmcgYW5kIGFuIGBvcHRpb25zYCBvYmplY3Qgd2l0aCBhbiBgYXNgIHByb3BlcnR5IHZhbGlkIGZvciBhIGA8bGluayByZWw9XCJwcmVsb2FkXCIgYXM9XCIuLi5cIiAvPmAgdGFnLiVzJyxcbiAgICAgICAgICBlbmNvdW50ZXJlZFxuICAgICAgICApO1xuICAgICAgaWYgKFxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZiAmJlxuICAgICAgICBcIm9iamVjdFwiID09PSB0eXBlb2Ygb3B0aW9ucyAmJlxuICAgICAgICBudWxsICE9PSBvcHRpb25zICYmXG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmFzXG4gICAgICApIHtcbiAgICAgICAgZW5jb3VudGVyZWQgPSBvcHRpb25zLmFzO1xuICAgICAgICB2YXIgY3Jvc3NPcmlnaW4gPSBnZXRDcm9zc09yaWdpblN0cmluZ0FzKFxuICAgICAgICAgIGVuY291bnRlcmVkLFxuICAgICAgICAgIG9wdGlvbnMuY3Jvc3NPcmlnaW5cbiAgICAgICAgKTtcbiAgICAgICAgSW50ZXJuYWxzLmQuTChocmVmLCBlbmNvdW50ZXJlZCwge1xuICAgICAgICAgIGNyb3NzT3JpZ2luOiBjcm9zc09yaWdpbixcbiAgICAgICAgICBpbnRlZ3JpdHk6XG4gICAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5pbnRlZ3JpdHkgPyBvcHRpb25zLmludGVncml0eSA6IHZvaWQgMCxcbiAgICAgICAgICBub25jZTogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMubm9uY2UgPyBvcHRpb25zLm5vbmNlIDogdm9pZCAwLFxuICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLnR5cGUgPyBvcHRpb25zLnR5cGUgOiB2b2lkIDAsXG4gICAgICAgICAgZmV0Y2hQcmlvcml0eTpcbiAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmZldGNoUHJpb3JpdHlcbiAgICAgICAgICAgICAgPyBvcHRpb25zLmZldGNoUHJpb3JpdHlcbiAgICAgICAgICAgICAgOiB2b2lkIDAsXG4gICAgICAgICAgcmVmZXJyZXJQb2xpY3k6XG4gICAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5yZWZlcnJlclBvbGljeVxuICAgICAgICAgICAgICA/IG9wdGlvbnMucmVmZXJyZXJQb2xpY3lcbiAgICAgICAgICAgICAgOiB2b2lkIDAsXG4gICAgICAgICAgaW1hZ2VTcmNTZXQ6XG4gICAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5pbWFnZVNyY1NldFxuICAgICAgICAgICAgICA/IG9wdGlvbnMuaW1hZ2VTcmNTZXRcbiAgICAgICAgICAgICAgOiB2b2lkIDAsXG4gICAgICAgICAgaW1hZ2VTaXplczpcbiAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmltYWdlU2l6ZXNcbiAgICAgICAgICAgICAgPyBvcHRpb25zLmltYWdlU2l6ZXNcbiAgICAgICAgICAgICAgOiB2b2lkIDAsXG4gICAgICAgICAgbWVkaWE6IFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLm1lZGlhID8gb3B0aW9ucy5tZWRpYSA6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGV4cG9ydHMucHJlbG9hZE1vZHVsZSA9IGZ1bmN0aW9uIChocmVmLCBvcHRpb25zKSB7XG4gICAgICB2YXIgZW5jb3VudGVyZWQgPSBcIlwiO1xuICAgICAgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBocmVmICYmIGhyZWYpIHx8XG4gICAgICAgIChlbmNvdW50ZXJlZCArPVxuICAgICAgICAgIFwiIFRoZSBgaHJlZmAgYXJndW1lbnQgZW5jb3VudGVyZWQgd2FzIFwiICtcbiAgICAgICAgICBnZXRWYWx1ZURlc2NyaXB0b3JFeHBlY3RpbmdPYmplY3RGb3JXYXJuaW5nKGhyZWYpICtcbiAgICAgICAgICBcIi5cIik7XG4gICAgICB2b2lkIDAgIT09IG9wdGlvbnMgJiYgXCJvYmplY3RcIiAhPT0gdHlwZW9mIG9wdGlvbnNcbiAgICAgICAgPyAoZW5jb3VudGVyZWQgKz1cbiAgICAgICAgICAgIFwiIFRoZSBgb3B0aW9uc2AgYXJndW1lbnQgZW5jb3VudGVyZWQgd2FzIFwiICtcbiAgICAgICAgICAgIGdldFZhbHVlRGVzY3JpcHRvckV4cGVjdGluZ09iamVjdEZvcldhcm5pbmcob3B0aW9ucykgK1xuICAgICAgICAgICAgXCIuXCIpXG4gICAgICAgIDogb3B0aW9ucyAmJlxuICAgICAgICAgIFwiYXNcIiBpbiBvcHRpb25zICYmXG4gICAgICAgICAgXCJzdHJpbmdcIiAhPT0gdHlwZW9mIG9wdGlvbnMuYXMgJiZcbiAgICAgICAgICAoZW5jb3VudGVyZWQgKz1cbiAgICAgICAgICAgIFwiIFRoZSBgYXNgIG9wdGlvbiBlbmNvdW50ZXJlZCB3YXMgXCIgK1xuICAgICAgICAgICAgZ2V0VmFsdWVEZXNjcmlwdG9yRXhwZWN0aW5nT2JqZWN0Rm9yV2FybmluZyhvcHRpb25zLmFzKSArXG4gICAgICAgICAgICBcIi5cIik7XG4gICAgICBlbmNvdW50ZXJlZCAmJlxuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICdSZWFjdERPTS5wcmVsb2FkTW9kdWxlKCk6IEV4cGVjdGVkIHR3byBhcmd1bWVudHMsIGEgbm9uLWVtcHR5IGBocmVmYCBzdHJpbmcgYW5kLCBvcHRpb25hbGx5LCBhbiBgb3B0aW9uc2Agb2JqZWN0IHdpdGggYW4gYGFzYCBwcm9wZXJ0eSB2YWxpZCBmb3IgYSBgPGxpbmsgcmVsPVwibW9kdWxlcHJlbG9hZFwiIGFzPVwiLi4uXCIgLz5gIHRhZy4lcycsXG4gICAgICAgICAgZW5jb3VudGVyZWRcbiAgICAgICAgKTtcbiAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBocmVmICYmXG4gICAgICAgIChvcHRpb25zXG4gICAgICAgICAgPyAoKGVuY291bnRlcmVkID0gZ2V0Q3Jvc3NPcmlnaW5TdHJpbmdBcyhcbiAgICAgICAgICAgICAgb3B0aW9ucy5hcyxcbiAgICAgICAgICAgICAgb3B0aW9ucy5jcm9zc09yaWdpblxuICAgICAgICAgICAgKSksXG4gICAgICAgICAgICBJbnRlcm5hbHMuZC5tKGhyZWYsIHtcbiAgICAgICAgICAgICAgYXM6XG4gICAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuYXMgJiYgXCJzY3JpcHRcIiAhPT0gb3B0aW9ucy5hc1xuICAgICAgICAgICAgICAgICAgPyBvcHRpb25zLmFzXG4gICAgICAgICAgICAgICAgICA6IHZvaWQgMCxcbiAgICAgICAgICAgICAgY3Jvc3NPcmlnaW46IGVuY291bnRlcmVkLFxuICAgICAgICAgICAgICBpbnRlZ3JpdHk6XG4gICAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuaW50ZWdyaXR5XG4gICAgICAgICAgICAgICAgICA/IG9wdGlvbnMuaW50ZWdyaXR5XG4gICAgICAgICAgICAgICAgICA6IHZvaWQgMFxuICAgICAgICAgICAgfSkpXG4gICAgICAgICAgOiBJbnRlcm5hbHMuZC5tKGhyZWYpKTtcbiAgICB9O1xuICAgIGV4cG9ydHMudmVyc2lvbiA9IFwiMTkuMi4wLWNhbmFyeS0wYmRiOTIwNi0yMDI1MDgxOFwiO1xuICB9KSgpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom.react-server.development.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/next/dist/compiled/react-dom/react-dom.react-server.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-dom/react-dom.react-server.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-dom.react-server.development.js */ \"(middleware)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom.react-server.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC1kb20vcmVhY3QtZG9tLnJlYWN0LXNlcnZlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJLEtBQXFDLEVBQUUsRUFFMUMsQ0FBQztBQUNGLEVBQUUsNkxBQXVFO0FBQ3pFIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEhQXFxEZXNrdG9wXFxCZXlvbmRfY2hhdFxcY2xpZW50XFxub2RlX21vZHVsZXNcXG5leHRcXGRpc3RcXGNvbXBpbGVkXFxyZWFjdC1kb21cXHJlYWN0LWRvbS5yZWFjdC1zZXJ2ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5yZWFjdC1zZXJ2ZXIucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucmVhY3Qtc2VydmVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/next/dist/compiled/react-dom/react-dom.react-server.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.edge.development.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.edge.development.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/**\n * @license React\n * react-server-dom-webpack-server.edge.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \n true && function() {\n    function voidHandler() {}\n    function getIteratorFn(maybeIterable) {\n        if (null === maybeIterable || \"object\" !== typeof maybeIterable) return null;\n        maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[\"@@iterator\"];\n        return \"function\" === typeof maybeIterable ? maybeIterable : null;\n    }\n    function _defineProperty(obj, key, value) {\n        a: if (\"object\" == typeof key && key) {\n            var e = key[Symbol.toPrimitive];\n            if (void 0 !== e) {\n                key = e.call(key, \"string\");\n                if (\"object\" != typeof key) break a;\n                throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n            }\n            key = String(key);\n        }\n        key = \"symbol\" == typeof key ? key : key + \"\";\n        key in obj ? Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: !0,\n            configurable: !0,\n            writable: !0\n        }) : obj[key] = value;\n        return obj;\n    }\n    function handleErrorInNextTick(error) {\n        setTimeout(function() {\n            throw error;\n        });\n    }\n    function writeChunkAndReturn(destination, chunk) {\n        if (0 !== chunk.byteLength) if (2048 < chunk.byteLength) 0 < writtenBytes && (destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes)), currentView = new Uint8Array(2048), writtenBytes = 0), destination.enqueue(chunk);\n        else {\n            var allowableBytes = currentView.length - writtenBytes;\n            allowableBytes < chunk.byteLength && (0 === allowableBytes ? destination.enqueue(currentView) : (currentView.set(chunk.subarray(0, allowableBytes), writtenBytes), destination.enqueue(currentView), chunk = chunk.subarray(allowableBytes)), currentView = new Uint8Array(2048), writtenBytes = 0);\n            currentView.set(chunk, writtenBytes);\n            writtenBytes += chunk.byteLength;\n        }\n        return !0;\n    }\n    function completeWriting(destination) {\n        currentView && 0 < writtenBytes && (destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes)), currentView = null, writtenBytes = 0);\n    }\n    function stringToChunk(content) {\n        return textEncoder.encode(content);\n    }\n    function byteLengthOfChunk(chunk) {\n        return chunk.byteLength;\n    }\n    function closeWithError(destination, error) {\n        \"function\" === typeof destination.error ? destination.error(error) : destination.close();\n    }\n    function isClientReference(reference) {\n        return reference.$$typeof === CLIENT_REFERENCE_TAG$1;\n    }\n    function registerClientReferenceImpl(proxyImplementation, id, async) {\n        return Object.defineProperties(proxyImplementation, {\n            $$typeof: {\n                value: CLIENT_REFERENCE_TAG$1\n            },\n            $$id: {\n                value: id\n            },\n            $$async: {\n                value: async\n            }\n        });\n    }\n    function bind() {\n        var newFn = FunctionBind.apply(this, arguments);\n        if (this.$$typeof === SERVER_REFERENCE_TAG) {\n            null != arguments[0] && console.error('Cannot bind \"this\" of a Server Action. Pass null or undefined as the first argument to .bind().');\n            var args = ArraySlice.call(arguments, 1), $$typeof = {\n                value: SERVER_REFERENCE_TAG\n            }, $$id = {\n                value: this.$$id\n            };\n            args = {\n                value: this.$$bound ? this.$$bound.concat(args) : args\n            };\n            return Object.defineProperties(newFn, {\n                $$typeof: $$typeof,\n                $$id: $$id,\n                $$bound: args,\n                $$location: {\n                    value: this.$$location,\n                    configurable: !0\n                },\n                bind: {\n                    value: bind,\n                    configurable: !0\n                }\n            });\n        }\n        return newFn;\n    }\n    function getReference(target, name) {\n        switch(name){\n            case \"$$typeof\":\n                return target.$$typeof;\n            case \"$$id\":\n                return target.$$id;\n            case \"$$async\":\n                return target.$$async;\n            case \"name\":\n                return target.name;\n            case \"defaultProps\":\n                return;\n            case \"_debugInfo\":\n                return;\n            case \"toJSON\":\n                return;\n            case Symbol.toPrimitive:\n                return Object.prototype[Symbol.toPrimitive];\n            case Symbol.toStringTag:\n                return Object.prototype[Symbol.toStringTag];\n            case \"__esModule\":\n                var moduleId = target.$$id;\n                target.default = registerClientReferenceImpl(function() {\n                    throw Error(\"Attempted to call the default export of \" + moduleId + \" from the server but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\");\n                }, target.$$id + \"#\", target.$$async);\n                return !0;\n            case \"then\":\n                if (target.then) return target.then;\n                if (target.$$async) return;\n                var clientReference = registerClientReferenceImpl({}, target.$$id, !0), proxy = new Proxy(clientReference, proxyHandlers$1);\n                target.status = \"fulfilled\";\n                target.value = proxy;\n                return target.then = registerClientReferenceImpl(function(resolve) {\n                    return Promise.resolve(resolve(proxy));\n                }, target.$$id + \"#then\", !1);\n        }\n        if (\"symbol\" === typeof name) throw Error(\"Cannot read Symbol exports. Only named exports are supported on a client module imported on the server.\");\n        clientReference = target[name];\n        clientReference || (clientReference = registerClientReferenceImpl(function() {\n            throw Error(\"Attempted to call \" + String(name) + \"() from the server but \" + String(name) + \" is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\");\n        }, target.$$id + \"#\" + name, target.$$async), Object.defineProperty(clientReference, \"name\", {\n            value: name\n        }), clientReference = target[name] = new Proxy(clientReference, deepProxyHandlers));\n        return clientReference;\n    }\n    function resolveClientReferenceMetadata(config, clientReference) {\n        var modulePath = clientReference.$$id, name = \"\", resolvedModuleData = config[modulePath];\n        if (resolvedModuleData) name = resolvedModuleData.name;\n        else {\n            var idx = modulePath.lastIndexOf(\"#\");\n            -1 !== idx && (name = modulePath.slice(idx + 1), resolvedModuleData = config[modulePath.slice(0, idx)]);\n            if (!resolvedModuleData) throw Error('Could not find the module \"' + modulePath + '\" in the React Client Manifest. This is probably a bug in the React Server Components bundler.');\n        }\n        if (!0 === resolvedModuleData.async && !0 === clientReference.$$async) throw Error('The module \"' + modulePath + '\" is marked as an async ESM module but was loaded as a CJS proxy. This is probably a bug in the React Server Components bundler.');\n        return !0 === resolvedModuleData.async || !0 === clientReference.$$async ? [\n            resolvedModuleData.id,\n            resolvedModuleData.chunks,\n            name,\n            1\n        ] : [\n            resolvedModuleData.id,\n            resolvedModuleData.chunks,\n            name\n        ];\n    }\n    function trimOptions(options) {\n        if (null == options) return null;\n        var hasProperties = !1, trimmed = {}, key;\n        for(key in options)null != options[key] && (hasProperties = !0, trimmed[key] = options[key]);\n        return hasProperties ? trimmed : null;\n    }\n    function collectStackTracePrivate(error, structuredStackTrace) {\n        error = [];\n        for(var i = framesToSkip; i < structuredStackTrace.length; i++){\n            var callSite = structuredStackTrace[i], name = callSite.getFunctionName() || \"<anonymous>\";\n            if (name.includes(\"react_stack_bottom_frame\")) break;\n            else if (callSite.isNative()) callSite = callSite.isAsync(), error.push([\n                name,\n                \"\",\n                0,\n                0,\n                0,\n                0,\n                callSite\n            ]);\n            else {\n                if (callSite.isConstructor()) name = \"new \" + name;\n                else if (!callSite.isToplevel()) {\n                    var callSite$jscomp$0 = callSite;\n                    name = callSite$jscomp$0.getTypeName();\n                    var methodName = callSite$jscomp$0.getMethodName();\n                    callSite$jscomp$0 = callSite$jscomp$0.getFunctionName();\n                    var result = \"\";\n                    callSite$jscomp$0 ? (name && identifierRegExp.test(callSite$jscomp$0) && callSite$jscomp$0 !== name && (result += name + \".\"), result += callSite$jscomp$0, !methodName || callSite$jscomp$0 === methodName || callSite$jscomp$0.endsWith(\".\" + methodName) || callSite$jscomp$0.endsWith(\" \" + methodName) || (result += \" [as \" + methodName + \"]\")) : (name && (result += name + \".\"), result = methodName ? result + methodName : result + \"<anonymous>\");\n                    name = result;\n                }\n                \"<anonymous>\" === name && (name = \"\");\n                methodName = callSite.getScriptNameOrSourceURL() || \"<anonymous>\";\n                \"<anonymous>\" === methodName && (methodName = \"\", callSite.isEval() && (callSite$jscomp$0 = callSite.getEvalOrigin()) && (methodName = callSite$jscomp$0.toString() + \", <anonymous>\"));\n                callSite$jscomp$0 = callSite.getLineNumber() || 0;\n                result = callSite.getColumnNumber() || 0;\n                var enclosingLine = \"function\" === typeof callSite.getEnclosingLineNumber ? callSite.getEnclosingLineNumber() || 0 : 0, enclosingCol = \"function\" === typeof callSite.getEnclosingColumnNumber ? callSite.getEnclosingColumnNumber() || 0 : 0;\n                callSite = callSite.isAsync();\n                error.push([\n                    name,\n                    methodName,\n                    callSite$jscomp$0,\n                    result,\n                    enclosingLine,\n                    enclosingCol,\n                    callSite\n                ]);\n            }\n        }\n        collectedStackTrace = error;\n        return \"\";\n    }\n    function collectStackTrace(error, structuredStackTrace) {\n        collectStackTracePrivate(error, structuredStackTrace);\n        error = (error.name || \"Error\") + \": \" + (error.message || \"\");\n        for(var i = 0; i < structuredStackTrace.length; i++)error += \"\\n    at \" + structuredStackTrace[i].toString();\n        return error;\n    }\n    function parseStackTrace(error, skipFrames) {\n        var existing = stackTraceCache.get(error);\n        if (void 0 !== existing) return existing;\n        collectedStackTrace = null;\n        framesToSkip = skipFrames;\n        existing = Error.prepareStackTrace;\n        Error.prepareStackTrace = collectStackTrace;\n        try {\n            var stack = String(error.stack);\n        } finally{\n            Error.prepareStackTrace = existing;\n        }\n        if (null !== collectedStackTrace) return stack = collectedStackTrace, collectedStackTrace = null, stackTraceCache.set(error, stack), stack;\n        stack.startsWith(\"Error: react-stack-top-frame\\n\") && (stack = stack.slice(29));\n        existing = stack.indexOf(\"react_stack_bottom_frame\");\n        -1 !== existing && (existing = stack.lastIndexOf(\"\\n\", existing));\n        -1 !== existing && (stack = stack.slice(0, existing));\n        stack = stack.split(\"\\n\");\n        for(existing = []; skipFrames < stack.length; skipFrames++){\n            var parsed = frameRegExp.exec(stack[skipFrames]);\n            if (parsed) {\n                var name = parsed[1] || \"\", isAsync = \"async \" === parsed[8];\n                \"<anonymous>\" === name ? name = \"\" : name.startsWith(\"async \") && (name = name.slice(5), isAsync = !0);\n                var filename = parsed[2] || parsed[5] || \"\";\n                \"<anonymous>\" === filename && (filename = \"\");\n                existing.push([\n                    name,\n                    filename,\n                    +(parsed[3] || parsed[6]),\n                    +(parsed[4] || parsed[7]),\n                    0,\n                    0,\n                    isAsync\n                ]);\n            }\n        }\n        stackTraceCache.set(error, existing);\n        return existing;\n    }\n    function createTemporaryReference(temporaryReferences, id) {\n        var reference = Object.defineProperties(function() {\n            throw Error(\"Attempted to call a temporary Client Reference from the server but it is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\");\n        }, {\n            $$typeof: {\n                value: TEMPORARY_REFERENCE_TAG\n            }\n        });\n        reference = new Proxy(reference, proxyHandlers);\n        temporaryReferences.set(reference, id);\n        return reference;\n    }\n    function noop() {}\n    function trackUsedThenable(thenableState, thenable, index) {\n        index = thenableState[index];\n        void 0 === index ? (thenableState.push(thenable), (thenableState._stacks || (thenableState._stacks = [])).push(Error())) : index !== thenable && (thenable.then(noop, noop), thenable = index);\n        switch(thenable.status){\n            case \"fulfilled\":\n                return thenable.value;\n            case \"rejected\":\n                throw thenable.reason;\n            default:\n                \"string\" === typeof thenable.status ? thenable.then(noop, noop) : (thenableState = thenable, thenableState.status = \"pending\", thenableState.then(function(fulfilledValue) {\n                    if (\"pending\" === thenable.status) {\n                        var fulfilledThenable = thenable;\n                        fulfilledThenable.status = \"fulfilled\";\n                        fulfilledThenable.value = fulfilledValue;\n                    }\n                }, function(error) {\n                    if (\"pending\" === thenable.status) {\n                        var rejectedThenable = thenable;\n                        rejectedThenable.status = \"rejected\";\n                        rejectedThenable.reason = error;\n                    }\n                }));\n                switch(thenable.status){\n                    case \"fulfilled\":\n                        return thenable.value;\n                    case \"rejected\":\n                        throw thenable.reason;\n                }\n                suspendedThenable = thenable;\n                throw SuspenseException;\n        }\n    }\n    function getSuspendedThenable() {\n        if (null === suspendedThenable) throw Error(\"Expected a suspended thenable. This is a bug in React. Please file an issue.\");\n        var thenable = suspendedThenable;\n        suspendedThenable = null;\n        return thenable;\n    }\n    function getThenableStateAfterSuspending() {\n        var state = thenableState || [];\n        state._componentDebugInfo = currentComponentDebugInfo;\n        thenableState = currentComponentDebugInfo = null;\n        return state;\n    }\n    function unsupportedHook() {\n        throw Error(\"This Hook is not supported in Server Components.\");\n    }\n    function unsupportedRefresh() {\n        throw Error(\"Refreshing the cache is not supported in Server Components.\");\n    }\n    function unsupportedContext() {\n        throw Error(\"Cannot read a Client Context from a Server Component.\");\n    }\n    function resolveOwner() {\n        if (currentOwner) return currentOwner;\n        if (supportsComponentStorage) {\n            var owner = componentStorage.getStore();\n            if (owner) return owner;\n        }\n        return null;\n    }\n    function prepareStackTrace(error, structuredStackTrace) {\n        error = (error.name || \"Error\") + \": \" + (error.message || \"\");\n        for(var i = 0; i < structuredStackTrace.length; i++)error += \"\\n    at \" + structuredStackTrace[i].toString();\n        return error;\n    }\n    function resetOwnerStackLimit() {\n        var now = getCurrentTime();\n        1e3 < now - lastResetTime && (ReactSharedInternalsServer.recentlyCreatedOwnerStacks = 0, lastResetTime = now);\n    }\n    function isObjectPrototype(object) {\n        if (!object) return !1;\n        var ObjectPrototype = Object.prototype;\n        if (object === ObjectPrototype) return !0;\n        if (getPrototypeOf(object)) return !1;\n        object = Object.getOwnPropertyNames(object);\n        for(var i = 0; i < object.length; i++)if (!(object[i] in ObjectPrototype)) return !1;\n        return !0;\n    }\n    function isGetter(object, name) {\n        if (object === Object.prototype || null === object) return !1;\n        var descriptor = Object.getOwnPropertyDescriptor(object, name);\n        return void 0 === descriptor ? isGetter(getPrototypeOf(object), name) : \"function\" === typeof descriptor.get;\n    }\n    function isSimpleObject(object) {\n        if (!isObjectPrototype(getPrototypeOf(object))) return !1;\n        for(var names = Object.getOwnPropertyNames(object), i = 0; i < names.length; i++){\n            var descriptor = Object.getOwnPropertyDescriptor(object, names[i]);\n            if (!descriptor || !descriptor.enumerable && (\"key\" !== names[i] && \"ref\" !== names[i] || \"function\" !== typeof descriptor.get)) return !1;\n        }\n        return !0;\n    }\n    function objectName(object) {\n        object = Object.prototype.toString.call(object);\n        return object.slice(8, object.length - 1);\n    }\n    function describeKeyForErrorMessage(key) {\n        var encodedKey = JSON.stringify(key);\n        return '\"' + key + '\"' === encodedKey ? key : encodedKey;\n    }\n    function describeValueForErrorMessage(value) {\n        switch(typeof value){\n            case \"string\":\n                return JSON.stringify(10 >= value.length ? value : value.slice(0, 10) + \"...\");\n            case \"object\":\n                if (isArrayImpl(value)) return \"[...]\";\n                if (null !== value && value.$$typeof === CLIENT_REFERENCE_TAG) return \"client\";\n                value = objectName(value);\n                return \"Object\" === value ? \"{...}\" : value;\n            case \"function\":\n                return value.$$typeof === CLIENT_REFERENCE_TAG ? \"client\" : (value = value.displayName || value.name) ? \"function \" + value : \"function\";\n            default:\n                return String(value);\n        }\n    }\n    function describeElementType(type) {\n        if (\"string\" === typeof type) return type;\n        switch(type){\n            case REACT_SUSPENSE_TYPE:\n                return \"Suspense\";\n            case REACT_SUSPENSE_LIST_TYPE:\n                return \"SuspenseList\";\n        }\n        if (\"object\" === typeof type) switch(type.$$typeof){\n            case REACT_FORWARD_REF_TYPE:\n                return describeElementType(type.render);\n            case REACT_MEMO_TYPE:\n                return describeElementType(type.type);\n            case REACT_LAZY_TYPE:\n                var payload = type._payload;\n                type = type._init;\n                try {\n                    return describeElementType(type(payload));\n                } catch (x) {}\n        }\n        return \"\";\n    }\n    function describeObjectForErrorMessage(objectOrArray, expandedName) {\n        var objKind = objectName(objectOrArray);\n        if (\"Object\" !== objKind && \"Array\" !== objKind) return objKind;\n        var start = -1, length = 0;\n        if (isArrayImpl(objectOrArray)) if (jsxChildrenParents.has(objectOrArray)) {\n            var type = jsxChildrenParents.get(objectOrArray);\n            objKind = \"<\" + describeElementType(type) + \">\";\n            for(var i = 0; i < objectOrArray.length; i++){\n                var value = objectOrArray[i];\n                value = \"string\" === typeof value ? value : \"object\" === typeof value && null !== value ? \"{\" + describeObjectForErrorMessage(value) + \"}\" : \"{\" + describeValueForErrorMessage(value) + \"}\";\n                \"\" + i === expandedName ? (start = objKind.length, length = value.length, objKind += value) : objKind = 15 > value.length && 40 > objKind.length + value.length ? objKind + value : objKind + \"{...}\";\n            }\n            objKind += \"</\" + describeElementType(type) + \">\";\n        } else {\n            objKind = \"[\";\n            for(type = 0; type < objectOrArray.length; type++)0 < type && (objKind += \", \"), i = objectOrArray[type], i = \"object\" === typeof i && null !== i ? describeObjectForErrorMessage(i) : describeValueForErrorMessage(i), \"\" + type === expandedName ? (start = objKind.length, length = i.length, objKind += i) : objKind = 10 > i.length && 40 > objKind.length + i.length ? objKind + i : objKind + \"...\";\n            objKind += \"]\";\n        }\n        else if (objectOrArray.$$typeof === REACT_ELEMENT_TYPE) objKind = \"<\" + describeElementType(objectOrArray.type) + \"/>\";\n        else {\n            if (objectOrArray.$$typeof === CLIENT_REFERENCE_TAG) return \"client\";\n            if (jsxPropsParents.has(objectOrArray)) {\n                objKind = jsxPropsParents.get(objectOrArray);\n                objKind = \"<\" + (describeElementType(objKind) || \"...\");\n                type = Object.keys(objectOrArray);\n                for(i = 0; i < type.length; i++){\n                    objKind += \" \";\n                    value = type[i];\n                    objKind += describeKeyForErrorMessage(value) + \"=\";\n                    var _value2 = objectOrArray[value];\n                    var _substr2 = value === expandedName && \"object\" === typeof _value2 && null !== _value2 ? describeObjectForErrorMessage(_value2) : describeValueForErrorMessage(_value2);\n                    \"string\" !== typeof _value2 && (_substr2 = \"{\" + _substr2 + \"}\");\n                    value === expandedName ? (start = objKind.length, length = _substr2.length, objKind += _substr2) : objKind = 10 > _substr2.length && 40 > objKind.length + _substr2.length ? objKind + _substr2 : objKind + \"...\";\n                }\n                objKind += \">\";\n            } else {\n                objKind = \"{\";\n                type = Object.keys(objectOrArray);\n                for(i = 0; i < type.length; i++)0 < i && (objKind += \", \"), value = type[i], objKind += describeKeyForErrorMessage(value) + \": \", _value2 = objectOrArray[value], _value2 = \"object\" === typeof _value2 && null !== _value2 ? describeObjectForErrorMessage(_value2) : describeValueForErrorMessage(_value2), value === expandedName ? (start = objKind.length, length = _value2.length, objKind += _value2) : objKind = 10 > _value2.length && 40 > objKind.length + _value2.length ? objKind + _value2 : objKind + \"...\";\n                objKind += \"}\";\n            }\n        }\n        return void 0 === expandedName ? objKind : -1 < start && 0 < length ? (objectOrArray = \" \".repeat(start) + \"^\".repeat(length), \"\\n  \" + objKind + \"\\n  \" + objectOrArray) : \"\\n  \" + objKind;\n    }\n    function defaultFilterStackFrame(filename) {\n        return \"\" !== filename && !filename.startsWith(\"node:\") && !filename.includes(\"node_modules\");\n    }\n    function filterStackTrace(request, stack) {\n        request = request.filterStackFrame;\n        for(var filteredStack = [], i = 0; i < stack.length; i++){\n            var callsite = stack[i], functionName = callsite[0];\n            var url = callsite[1];\n            if (url.startsWith(\"about://React/\")) {\n                var envIdx = url.indexOf(\"/\", 14), suffixIdx = url.lastIndexOf(\"?\");\n                -1 < envIdx && -1 < suffixIdx && (url = decodeURI(url.slice(envIdx + 1, suffixIdx)));\n            }\n            request(url, functionName, callsite[2], callsite[3]) && (callsite = callsite.slice(0), callsite[1] = url, filteredStack.push(callsite));\n        }\n        return filteredStack;\n    }\n    function patchConsole(consoleInst, methodName) {\n        var descriptor = Object.getOwnPropertyDescriptor(consoleInst, methodName);\n        if (descriptor && (descriptor.configurable || descriptor.writable) && \"function\" === typeof descriptor.value) {\n            var originalMethod = descriptor.value;\n            descriptor = Object.getOwnPropertyDescriptor(originalMethod, \"name\");\n            var wrapperMethod = function() {\n                var request = resolveRequest();\n                if ((\"assert\" !== methodName || !arguments[0]) && null !== request) {\n                    a: {\n                        var error = Error(\"react-stack-top-frame\");\n                        collectedStackTrace = null;\n                        framesToSkip = 1;\n                        var previousPrepare = Error.prepareStackTrace;\n                        Error.prepareStackTrace = collectStackTracePrivate;\n                        try {\n                            if (\"\" !== error.stack) {\n                                var JSCompiler_inline_result = null;\n                                break a;\n                            }\n                        } finally{\n                            Error.prepareStackTrace = previousPrepare;\n                        }\n                        JSCompiler_inline_result = collectedStackTrace;\n                    }\n                    JSCompiler_inline_result = filterStackTrace(request, JSCompiler_inline_result || []);\n                    request.pendingDebugChunks++;\n                    error = resolveOwner();\n                    previousPrepare = Array.from(arguments);\n                    a: {\n                        var env = 0;\n                        switch(methodName){\n                            case \"dir\":\n                            case \"dirxml\":\n                            case \"groupEnd\":\n                            case \"table\":\n                                env = null;\n                                break a;\n                            case \"assert\":\n                                env = 1;\n                        }\n                        var format = previousPrepare[env], style = previousPrepare[env + 1], badge = previousPrepare[env + 2];\n                        \"string\" === typeof format && format.startsWith(\"\\u001b[0m\\u001b[7m%c%s\\u001b[0m%c\") && \"background: #e6e6e6;background: light-dark(rgba(0,0,0,0.1), rgba(255,255,255,0.25));color: #000000;color: light-dark(#000000, #ffffff);border-radius: 2px\" === style && \"string\" === typeof badge ? (format = format.slice(18), \" \" === format[0] && (format = format.slice(1)), previousPrepare.splice(env, 4, format), env = badge.slice(1, badge.length - 1)) : env = null;\n                    }\n                    null === env && (env = (0, request.environmentName)());\n                    null != error && outlineComponentInfo(request, error);\n                    badge = [\n                        methodName,\n                        JSCompiler_inline_result,\n                        error,\n                        env\n                    ];\n                    badge.push.apply(badge, previousPrepare);\n                    previousPrepare = serializeDebugModel(request, (null === request.deferredDebugObjects ? 500 : 10) + JSCompiler_inline_result.length, badge);\n                    \"[\" !== previousPrepare[0] && (previousPrepare = serializeDebugModel(request, 10 + JSCompiler_inline_result.length, [\n                        methodName,\n                        JSCompiler_inline_result,\n                        error,\n                        env,\n                        \"Unknown Value: React could not send it from the server.\"\n                    ]));\n                    JSCompiler_inline_result = stringToChunk(\":W\" + previousPrepare + \"\\n\");\n                    request.completedDebugChunks.push(JSCompiler_inline_result);\n                }\n                return originalMethod.apply(this, arguments);\n            };\n            descriptor && Object.defineProperty(wrapperMethod, \"name\", descriptor);\n            Object.defineProperty(consoleInst, methodName, {\n                value: wrapperMethod\n            });\n        }\n    }\n    function getCurrentStackInDEV() {\n        var owner = resolveOwner();\n        if (null === owner) return \"\";\n        try {\n            var info = \"\";\n            if (owner.owner || \"string\" !== typeof owner.name) {\n                for(; owner;){\n                    var ownerStack = owner.debugStack;\n                    if (null != ownerStack) {\n                        if (owner = owner.owner) {\n                            var JSCompiler_temp_const = info;\n                            var error = ownerStack, prevPrepareStackTrace = Error.prepareStackTrace;\n                            Error.prepareStackTrace = prepareStackTrace;\n                            var stack = error.stack;\n                            Error.prepareStackTrace = prevPrepareStackTrace;\n                            stack.startsWith(\"Error: react-stack-top-frame\\n\") && (stack = stack.slice(29));\n                            var idx = stack.indexOf(\"\\n\");\n                            -1 !== idx && (stack = stack.slice(idx + 1));\n                            idx = stack.indexOf(\"react_stack_bottom_frame\");\n                            -1 !== idx && (idx = stack.lastIndexOf(\"\\n\", idx));\n                            var JSCompiler_inline_result = -1 !== idx ? stack = stack.slice(0, idx) : \"\";\n                            info = JSCompiler_temp_const + (\"\\n\" + JSCompiler_inline_result);\n                        }\n                    } else break;\n                }\n                var JSCompiler_inline_result$jscomp$0 = info;\n            } else {\n                JSCompiler_temp_const = owner.name;\n                if (void 0 === prefix) try {\n                    throw Error();\n                } catch (x) {\n                    prefix = (error = x.stack.trim().match(/\\n( *(at )?)/)) && error[1] || \"\", suffix = -1 < x.stack.indexOf(\"\\n    at\") ? \" (<anonymous>)\" : -1 < x.stack.indexOf(\"@\") ? \"@unknown:0:0\" : \"\";\n                }\n                JSCompiler_inline_result$jscomp$0 = \"\\n\" + prefix + JSCompiler_temp_const + suffix;\n            }\n        } catch (x) {\n            JSCompiler_inline_result$jscomp$0 = \"\\nError generating stack: \" + x.message + \"\\n\" + x.stack;\n        }\n        return JSCompiler_inline_result$jscomp$0;\n    }\n    function defaultErrorHandler(error) {\n        console.error(error);\n    }\n    function RequestInstance(type, model, bundlerConfig, onError, onPostpone, onAllReady, onFatalError, identifierPrefix, temporaryReferences, environmentName, filterStackFrame, keepDebugAlive) {\n        if (null !== ReactSharedInternalsServer.A && ReactSharedInternalsServer.A !== DefaultAsyncDispatcher) throw Error(\"Currently React only supports one RSC renderer at a time.\");\n        ReactSharedInternalsServer.A = DefaultAsyncDispatcher;\n        ReactSharedInternalsServer.getCurrentStack = getCurrentStackInDEV;\n        var abortSet = new Set(), pingedTasks = [], hints = new Set();\n        this.type = type;\n        this.status = 10;\n        this.flushScheduled = !1;\n        this.destination = this.fatalError = null;\n        this.bundlerConfig = bundlerConfig;\n        this.cache = new Map();\n        this.cacheController = new AbortController();\n        this.pendingChunks = this.nextChunkId = 0;\n        this.hints = hints;\n        this.abortableTasks = abortSet;\n        this.pingedTasks = pingedTasks;\n        this.completedImportChunks = [];\n        this.completedHintChunks = [];\n        this.completedRegularChunks = [];\n        this.completedErrorChunks = [];\n        this.writtenSymbols = new Map();\n        this.writtenClientReferences = new Map();\n        this.writtenServerReferences = new Map();\n        this.writtenObjects = new WeakMap();\n        this.temporaryReferences = temporaryReferences;\n        this.identifierPrefix = identifierPrefix || \"\";\n        this.identifierCount = 1;\n        this.taintCleanupQueue = [];\n        this.onError = void 0 === onError ? defaultErrorHandler : onError;\n        this.onPostpone = void 0 === onPostpone ? defaultPostponeHandler : onPostpone;\n        this.onAllReady = onAllReady;\n        this.onFatalError = onFatalError;\n        this.pendingDebugChunks = 0;\n        this.completedDebugChunks = [];\n        this.debugDestination = null;\n        this.environmentName = void 0 === environmentName ? function() {\n            return \"Server\";\n        } : \"function\" !== typeof environmentName ? function() {\n            return environmentName;\n        } : environmentName;\n        this.filterStackFrame = void 0 === filterStackFrame ? defaultFilterStackFrame : filterStackFrame;\n        this.didWarnForKey = null;\n        this.writtenDebugObjects = new WeakMap();\n        this.deferredDebugObjects = keepDebugAlive ? {\n            retained: new Map(),\n            existing: new Map()\n        } : null;\n        type = this.timeOrigin = performance.now();\n        emitTimeOriginChunk(this, type + performance.timeOrigin);\n        this.abortTime = -0;\n        model = createTask(this, model, null, !1, abortSet, type, null, null, null);\n        pingedTasks.push(model);\n    }\n    function createRequest(model, bundlerConfig, onError, identifierPrefix, onPostpone, temporaryReferences, environmentName, filterStackFrame, keepDebugAlive) {\n        resetOwnerStackLimit();\n        return new RequestInstance(20, model, bundlerConfig, onError, onPostpone, noop, noop, identifierPrefix, temporaryReferences, environmentName, filterStackFrame, keepDebugAlive);\n    }\n    function createPrerenderRequest(model, bundlerConfig, onAllReady, onFatalError, onError, identifierPrefix, onPostpone, temporaryReferences, environmentName, filterStackFrame, keepDebugAlive) {\n        resetOwnerStackLimit();\n        return new RequestInstance(21, model, bundlerConfig, onError, onPostpone, onAllReady, onFatalError, identifierPrefix, temporaryReferences, environmentName, filterStackFrame, keepDebugAlive);\n    }\n    function resolveRequest() {\n        if (currentRequest) return currentRequest;\n        if (supportsRequestStorage) {\n            var store = requestStorage.getStore();\n            if (store) return store;\n        }\n        return null;\n    }\n    function serializeDebugThenable(request, counter, thenable) {\n        request.pendingDebugChunks++;\n        var id = request.nextChunkId++, ref = \"$@\" + id.toString(16);\n        request.writtenDebugObjects.set(thenable, ref);\n        switch(thenable.status){\n            case \"fulfilled\":\n                return emitOutlinedDebugModelChunk(request, id, counter, thenable.value), ref;\n            case \"rejected\":\n                return emitErrorChunk(request, id, \"\", thenable.reason, !0), ref;\n        }\n        if (request.status === ABORTING) return emitDebugHaltChunk(request, id), ref;\n        var deferredDebugObjects = request.deferredDebugObjects;\n        if (null !== deferredDebugObjects) return deferredDebugObjects.retained.set(id, thenable), ref = \"$Y@\" + id.toString(16), request.writtenDebugObjects.set(thenable, ref), ref;\n        var cancelled = !1;\n        thenable.then(function(value) {\n            cancelled || (cancelled = !0, request.status === ABORTING ? emitDebugHaltChunk(request, id) : emitOutlinedDebugModelChunk(request, id, counter, value), enqueueFlush(request));\n        }, function(reason) {\n            cancelled || (cancelled = !0, request.status === ABORTING ? emitDebugHaltChunk(request, id) : emitErrorChunk(request, id, \"\", reason, !0), enqueueFlush(request));\n        });\n        Promise.resolve().then(function() {\n            cancelled || (cancelled = !0, emitDebugHaltChunk(request, id), enqueueFlush(request), counter = request = null);\n        });\n        return ref;\n    }\n    function emitRequestedDebugThenable(request, id, counter, thenable) {\n        thenable.then(function(value) {\n            request.status === ABORTING ? emitDebugHaltChunk(request, id) : emitOutlinedDebugModelChunk(request, id, counter, value);\n            enqueueFlush(request);\n        }, function(reason) {\n            request.status === ABORTING ? emitDebugHaltChunk(request, id) : emitErrorChunk(request, id, \"\", reason, !0);\n            enqueueFlush(request);\n        });\n    }\n    function serializeThenable(request, task, thenable) {\n        var newTask = createTask(request, thenable, task.keyPath, task.implicitSlot, request.abortableTasks, task.time, task.debugOwner, task.debugStack, task.debugTask);\n        switch(thenable.status){\n            case \"fulfilled\":\n                return forwardDebugInfoFromThenable(request, newTask, thenable, null, null), newTask.model = thenable.value, pingTask(request, newTask), newTask.id;\n            case \"rejected\":\n                return forwardDebugInfoFromThenable(request, newTask, thenable, null, null), erroredTask(request, newTask, thenable.reason), newTask.id;\n            default:\n                if (request.status === ABORTING) return request.abortableTasks.delete(newTask), task = request.fatalError, abortTask(newTask), finishAbortedTask(newTask, request, task), newTask.id;\n                \"string\" !== typeof thenable.status && (thenable.status = \"pending\", thenable.then(function(fulfilledValue) {\n                    \"pending\" === thenable.status && (thenable.status = \"fulfilled\", thenable.value = fulfilledValue);\n                }, function(error) {\n                    \"pending\" === thenable.status && (thenable.status = \"rejected\", thenable.reason = error);\n                }));\n        }\n        thenable.then(function(value) {\n            forwardDebugInfoFromCurrentContext(request, newTask, thenable);\n            newTask.model = value;\n            pingTask(request, newTask);\n        }, function(reason) {\n            0 === newTask.status && (newTask.timed = !0, erroredTask(request, newTask, reason), enqueueFlush(request));\n        });\n        return newTask.id;\n    }\n    function serializeReadableStream(request, task, stream) {\n        function progress(entry) {\n            if (0 === streamTask.status) if (entry.done) streamTask.status = 1, entry = streamTask.id.toString(16) + \":C\\n\", request.completedRegularChunks.push(stringToChunk(entry)), request.abortableTasks.delete(streamTask), request.cacheController.signal.removeEventListener(\"abort\", abortStream), enqueueFlush(request), callOnAllReadyIfReady(request);\n            else try {\n                streamTask.model = entry.value, request.pendingChunks++, tryStreamTask(request, streamTask), enqueueFlush(request), reader.read().then(progress, error);\n            } catch (x$0) {\n                error(x$0);\n            }\n        }\n        function error(reason) {\n            0 === streamTask.status && (request.cacheController.signal.removeEventListener(\"abort\", abortStream), erroredTask(request, streamTask, reason), enqueueFlush(request), reader.cancel(reason).then(error, error));\n        }\n        function abortStream() {\n            if (0 === streamTask.status) {\n                var signal = request.cacheController.signal;\n                signal.removeEventListener(\"abort\", abortStream);\n                signal = signal.reason;\n                erroredTask(request, streamTask, signal);\n                enqueueFlush(request);\n                reader.cancel(signal).then(error, error);\n            }\n        }\n        var supportsBYOB = stream.supportsBYOB;\n        if (void 0 === supportsBYOB) try {\n            stream.getReader({\n                mode: \"byob\"\n            }).releaseLock(), supportsBYOB = !0;\n        } catch (x) {\n            supportsBYOB = !1;\n        }\n        var reader = stream.getReader(), streamTask = createTask(request, task.model, task.keyPath, task.implicitSlot, request.abortableTasks, task.time, task.debugOwner, task.debugStack, task.debugTask);\n        request.pendingChunks++;\n        task = streamTask.id.toString(16) + \":\" + (supportsBYOB ? \"r\" : \"R\") + \"\\n\";\n        request.completedRegularChunks.push(stringToChunk(task));\n        request.cacheController.signal.addEventListener(\"abort\", abortStream);\n        reader.read().then(progress, error);\n        return serializeByValueID(streamTask.id);\n    }\n    function serializeAsyncIterable(request, task, iterable, iterator) {\n        function progress(entry) {\n            if (0 === streamTask.status) if (entry.done) {\n                streamTask.status = 1;\n                if (void 0 === entry.value) var endStreamRow = streamTask.id.toString(16) + \":C\\n\";\n                else try {\n                    var chunkId = outlineModel(request, entry.value);\n                    endStreamRow = streamTask.id.toString(16) + \":C\" + stringify(serializeByValueID(chunkId)) + \"\\n\";\n                } catch (x) {\n                    error(x);\n                    return;\n                }\n                request.completedRegularChunks.push(stringToChunk(endStreamRow));\n                request.abortableTasks.delete(streamTask);\n                request.cacheController.signal.removeEventListener(\"abort\", abortIterable);\n                enqueueFlush(request);\n                callOnAllReadyIfReady(request);\n            } else try {\n                streamTask.model = entry.value, request.pendingChunks++, tryStreamTask(request, streamTask), enqueueFlush(request), callIteratorInDEV(iterator, progress, error);\n            } catch (x$1) {\n                error(x$1);\n            }\n        }\n        function error(reason) {\n            0 === streamTask.status && (request.cacheController.signal.removeEventListener(\"abort\", abortIterable), erroredTask(request, streamTask, reason), enqueueFlush(request), \"function\" === typeof iterator.throw && iterator.throw(reason).then(error, error));\n        }\n        function abortIterable() {\n            if (0 === streamTask.status) {\n                var signal = request.cacheController.signal;\n                signal.removeEventListener(\"abort\", abortIterable);\n                var reason = signal.reason;\n                erroredTask(request, streamTask, signal.reason);\n                enqueueFlush(request);\n                \"function\" === typeof iterator.throw && iterator.throw(reason).then(error, error);\n            }\n        }\n        var isIterator = iterable === iterator, streamTask = createTask(request, task.model, task.keyPath, task.implicitSlot, request.abortableTasks, task.time, task.debugOwner, task.debugStack, task.debugTask);\n        (task = iterable._debugInfo) && forwardDebugInfo(request, streamTask, task);\n        request.pendingChunks++;\n        isIterator = streamTask.id.toString(16) + \":\" + (isIterator ? \"x\" : \"X\") + \"\\n\";\n        request.completedRegularChunks.push(stringToChunk(isIterator));\n        request.cacheController.signal.addEventListener(\"abort\", abortIterable);\n        callIteratorInDEV(iterator, progress, error);\n        return serializeByValueID(streamTask.id);\n    }\n    function emitHint(request, code, model) {\n        model = stringify(model);\n        code = stringToChunk(\":H\" + code + model + \"\\n\");\n        request.completedHintChunks.push(code);\n        enqueueFlush(request);\n    }\n    function readThenable(thenable) {\n        if (\"fulfilled\" === thenable.status) return thenable.value;\n        if (\"rejected\" === thenable.status) throw thenable.reason;\n        throw thenable;\n    }\n    function createLazyWrapperAroundWakeable(request, task, wakeable) {\n        switch(wakeable.status){\n            case \"fulfilled\":\n                return forwardDebugInfoFromThenable(request, task, wakeable, null, null), wakeable.value;\n            case \"rejected\":\n                forwardDebugInfoFromThenable(request, task, wakeable, null, null);\n                break;\n            default:\n                \"string\" !== typeof wakeable.status && (wakeable.status = \"pending\", wakeable.then(function(fulfilledValue) {\n                    forwardDebugInfoFromCurrentContext(request, task, wakeable);\n                    \"pending\" === wakeable.status && (wakeable.status = \"fulfilled\", wakeable.value = fulfilledValue);\n                }, function(error) {\n                    forwardDebugInfoFromCurrentContext(request, task, wakeable);\n                    \"pending\" === wakeable.status && (wakeable.status = \"rejected\", wakeable.reason = error);\n                }));\n        }\n        return {\n            $$typeof: REACT_LAZY_TYPE,\n            _payload: wakeable,\n            _init: readThenable\n        };\n    }\n    function callWithDebugContextInDEV(request, task, callback, arg) {\n        var componentDebugInfo = {\n            name: \"\",\n            env: task.environmentName,\n            key: null,\n            owner: task.debugOwner\n        };\n        componentDebugInfo.stack = null === task.debugStack ? null : filterStackTrace(request, parseStackTrace(task.debugStack, 1));\n        componentDebugInfo.debugStack = task.debugStack;\n        request = componentDebugInfo.debugTask = task.debugTask;\n        currentOwner = componentDebugInfo;\n        try {\n            return request ? request.run(callback.bind(null, arg)) : callback(arg);\n        } finally{\n            currentOwner = null;\n        }\n    }\n    function processServerComponentReturnValue(request, task, Component, result) {\n        if (\"object\" !== typeof result || null === result || isClientReference(result)) return result;\n        if (\"function\" === typeof result.then) return result.then(function(resolvedValue) {\n            \"object\" === typeof resolvedValue && null !== resolvedValue && resolvedValue.$$typeof === REACT_ELEMENT_TYPE && (resolvedValue._store.validated = 1);\n        }, voidHandler), createLazyWrapperAroundWakeable(request, task, result);\n        result.$$typeof === REACT_ELEMENT_TYPE && (result._store.validated = 1);\n        var iteratorFn = getIteratorFn(result);\n        if (iteratorFn) {\n            var multiShot = _defineProperty({}, Symbol.iterator, function() {\n                var iterator = iteratorFn.call(result);\n                iterator !== result || \"[object GeneratorFunction]\" === Object.prototype.toString.call(Component) && \"[object Generator]\" === Object.prototype.toString.call(result) || callWithDebugContextInDEV(request, task, function() {\n                    console.error(\"Returning an Iterator from a Server Component is not supported since it cannot be looped over more than once. \");\n                });\n                return iterator;\n            });\n            multiShot._debugInfo = result._debugInfo;\n            return multiShot;\n        }\n        return \"function\" !== typeof result[ASYNC_ITERATOR] || \"function\" === typeof ReadableStream && result instanceof ReadableStream ? result : (multiShot = _defineProperty({}, ASYNC_ITERATOR, function() {\n            var iterator = result[ASYNC_ITERATOR]();\n            iterator !== result || \"[object AsyncGeneratorFunction]\" === Object.prototype.toString.call(Component) && \"[object AsyncGenerator]\" === Object.prototype.toString.call(result) || callWithDebugContextInDEV(request, task, function() {\n                console.error(\"Returning an AsyncIterator from a Server Component is not supported since it cannot be looped over more than once. \");\n            });\n            return iterator;\n        }), multiShot._debugInfo = result._debugInfo, multiShot);\n    }\n    function renderFunctionComponent(request, task, key, Component, props, validated) {\n        var prevThenableState = task.thenableState;\n        task.thenableState = null;\n        if (canEmitDebugInfo) if (null !== prevThenableState) var componentDebugInfo = prevThenableState._componentDebugInfo;\n        else {\n            var componentDebugID = task.id;\n            componentDebugInfo = Component.displayName || Component.name || \"\";\n            var componentEnv = (0, request.environmentName)();\n            request.pendingChunks++;\n            componentDebugInfo = {\n                name: componentDebugInfo,\n                env: componentEnv,\n                key: key,\n                owner: task.debugOwner\n            };\n            componentDebugInfo.stack = null === task.debugStack ? null : filterStackTrace(request, parseStackTrace(task.debugStack, 1));\n            componentDebugInfo.props = props;\n            componentDebugInfo.debugStack = task.debugStack;\n            componentDebugInfo.debugTask = task.debugTask;\n            outlineComponentInfo(request, componentDebugInfo);\n            var timestamp = performance.now();\n            timestamp > task.time && (task.time = timestamp);\n            task.timed = !0;\n            emitDebugChunk(request, componentDebugID, componentDebugInfo);\n            task.environmentName = componentEnv;\n            2 === validated && warnForMissingKey(request, key, componentDebugInfo, task.debugTask);\n        }\n        else return outlineTask(request, task);\n        thenableIndexCounter = 0;\n        thenableState = prevThenableState;\n        currentComponentDebugInfo = componentDebugInfo;\n        props = supportsComponentStorage ? task.debugTask ? task.debugTask.run(componentStorage.run.bind(componentStorage, componentDebugInfo, callComponentInDEV, Component, props, componentDebugInfo)) : componentStorage.run(componentDebugInfo, callComponentInDEV, Component, props, componentDebugInfo) : task.debugTask ? task.debugTask.run(callComponentInDEV.bind(null, Component, props, componentDebugInfo)) : callComponentInDEV(Component, props, componentDebugInfo);\n        if (request.status === ABORTING) throw \"object\" !== typeof props || null === props || \"function\" !== typeof props.then || isClientReference(props) || props.then(voidHandler, voidHandler), null;\n        validated = thenableState;\n        if (null !== validated) for(prevThenableState = validated._stacks || (validated._stacks = []), componentDebugID = 0; componentDebugID < validated.length; componentDebugID++)forwardDebugInfoFromThenable(request, task, validated[componentDebugID], componentDebugInfo, prevThenableState[componentDebugID]);\n        props = processServerComponentReturnValue(request, task, Component, props);\n        task.debugOwner = componentDebugInfo;\n        task.debugStack = null;\n        task.debugTask = null;\n        Component = task.keyPath;\n        componentDebugInfo = task.implicitSlot;\n        null !== key ? task.keyPath = null === Component ? key : Component + \",\" + key : null === Component && (task.implicitSlot = !0);\n        request = renderModelDestructive(request, task, emptyRoot, \"\", props);\n        task.keyPath = Component;\n        task.implicitSlot = componentDebugInfo;\n        return request;\n    }\n    function warnForMissingKey(request, key, componentDebugInfo, debugTask) {\n        function logKeyError() {\n            console.error('Each child in a list should have a unique \"key\" prop.%s%s See https://react.dev/link/warning-keys for more information.', \"\", \"\");\n        }\n        key = request.didWarnForKey;\n        null == key && (key = request.didWarnForKey = new WeakSet());\n        request = componentDebugInfo.owner;\n        if (null != request) {\n            if (key.has(request)) return;\n            key.add(request);\n        }\n        supportsComponentStorage ? debugTask ? debugTask.run(componentStorage.run.bind(componentStorage, componentDebugInfo, callComponentInDEV, logKeyError, null, componentDebugInfo)) : componentStorage.run(componentDebugInfo, callComponentInDEV, logKeyError, null, componentDebugInfo) : debugTask ? debugTask.run(callComponentInDEV.bind(null, logKeyError, null, componentDebugInfo)) : callComponentInDEV(logKeyError, null, componentDebugInfo);\n    }\n    function renderFragment(request, task, children) {\n        for(var i = 0; i < children.length; i++){\n            var child = children[i];\n            null === child || \"object\" !== typeof child || child.$$typeof !== REACT_ELEMENT_TYPE || null !== child.key || child._store.validated || (child._store.validated = 2);\n        }\n        if (null !== task.keyPath) return request = [\n            REACT_ELEMENT_TYPE,\n            REACT_FRAGMENT_TYPE,\n            task.keyPath,\n            {\n                children: children\n            },\n            null,\n            null,\n            0\n        ], task.implicitSlot ? [\n            request\n        ] : request;\n        if (i = children._debugInfo) {\n            if (canEmitDebugInfo) forwardDebugInfo(request, task, i);\n            else return outlineTask(request, task);\n            children = Array.from(children);\n        }\n        return children;\n    }\n    function renderAsyncFragment(request, task, children, getAsyncIterator) {\n        if (null !== task.keyPath) return request = [\n            REACT_ELEMENT_TYPE,\n            REACT_FRAGMENT_TYPE,\n            task.keyPath,\n            {\n                children: children\n            },\n            null,\n            null,\n            0\n        ], task.implicitSlot ? [\n            request\n        ] : request;\n        getAsyncIterator = getAsyncIterator.call(children);\n        return serializeAsyncIterable(request, task, children, getAsyncIterator);\n    }\n    function deferTask(request, task) {\n        task = createTask(request, task.model, task.keyPath, task.implicitSlot, request.abortableTasks, task.time, task.debugOwner, task.debugStack, task.debugTask);\n        pingTask(request, task);\n        return serializeLazyID(task.id);\n    }\n    function outlineTask(request, task) {\n        task = createTask(request, task.model, task.keyPath, task.implicitSlot, request.abortableTasks, task.time, task.debugOwner, task.debugStack, task.debugTask);\n        retryTask(request, task);\n        return 1 === task.status ? serializeByValueID(task.id) : serializeLazyID(task.id);\n    }\n    function renderElement(request, task, type, key, ref, props, validated) {\n        if (null !== ref && void 0 !== ref) throw Error(\"Refs cannot be used in Server Components, nor passed to Client Components.\");\n        jsxPropsParents.set(props, type);\n        \"object\" === typeof props.children && null !== props.children && jsxChildrenParents.set(props.children, type);\n        if (\"function\" !== typeof type || isClientReference(type) || type.$$typeof === TEMPORARY_REFERENCE_TAG) {\n            if (type === REACT_FRAGMENT_TYPE && null === key) return 2 === validated && (validated = {\n                name: \"Fragment\",\n                env: (0, request.environmentName)(),\n                key: key,\n                owner: task.debugOwner,\n                stack: null === task.debugStack ? null : filterStackTrace(request, parseStackTrace(task.debugStack, 1)),\n                props: props,\n                debugStack: task.debugStack,\n                debugTask: task.debugTask\n            }, warnForMissingKey(request, key, validated, task.debugTask)), validated = task.implicitSlot, null === task.keyPath && (task.implicitSlot = !0), request = renderModelDestructive(request, task, emptyRoot, \"\", props.children), task.implicitSlot = validated, request;\n            if (null != type && \"object\" === typeof type && !isClientReference(type)) switch(type.$$typeof){\n                case REACT_LAZY_TYPE:\n                    type = callLazyInitInDEV(type);\n                    if (request.status === ABORTING) throw null;\n                    return renderElement(request, task, type, key, ref, props, validated);\n                case REACT_FORWARD_REF_TYPE:\n                    return renderFunctionComponent(request, task, key, type.render, props, validated);\n                case REACT_MEMO_TYPE:\n                    return renderElement(request, task, type.type, key, ref, props, validated);\n                case REACT_ELEMENT_TYPE:\n                    type._store.validated = 1;\n            }\n        } else return renderFunctionComponent(request, task, key, type, props, validated);\n        ref = task.keyPath;\n        null === key ? key = ref : null !== ref && (key = ref + \",\" + key);\n        var debugStack = null;\n        ref = task.debugOwner;\n        null !== ref && outlineComponentInfo(request, ref);\n        if (null !== task.debugStack) {\n            debugStack = filterStackTrace(request, parseStackTrace(task.debugStack, 1));\n            var id = outlineDebugModel(request, {\n                objectLimit: 2 * debugStack.length + 1\n            }, debugStack);\n            request.writtenObjects.set(debugStack, serializeByValueID(id));\n        }\n        request = [\n            REACT_ELEMENT_TYPE,\n            type,\n            key,\n            props,\n            ref,\n            debugStack,\n            validated\n        ];\n        task = task.implicitSlot && null !== key ? [\n            request\n        ] : request;\n        return task;\n    }\n    function pingTask(request, task) {\n        task.timed = !0;\n        var pingedTasks = request.pingedTasks;\n        pingedTasks.push(task);\n        1 === pingedTasks.length && (request.flushScheduled = null !== request.destination, 21 === request.type || 10 === request.status ? scheduleMicrotask(function() {\n            return performWork(request);\n        }) : setTimeout(function() {\n            return performWork(request);\n        }, 0));\n    }\n    function createTask(request, model, keyPath, implicitSlot, abortSet, lastTimestamp, debugOwner, debugStack, debugTask) {\n        request.pendingChunks++;\n        var id = request.nextChunkId++;\n        \"object\" !== typeof model || null === model || null !== keyPath || implicitSlot || request.writtenObjects.set(model, serializeByValueID(id));\n        var task = {\n            id: id,\n            status: 0,\n            model: model,\n            keyPath: keyPath,\n            implicitSlot: implicitSlot,\n            ping: function() {\n                return pingTask(request, task);\n            },\n            toJSON: function(parentPropertyName, value) {\n                var parent = this, originalValue = parent[parentPropertyName];\n                \"object\" !== typeof originalValue || originalValue === value || originalValue instanceof Date || callWithDebugContextInDEV(request, task, function() {\n                    \"Object\" !== objectName(originalValue) ? \"string\" === typeof jsxChildrenParents.get(parent) ? console.error(\"%s objects cannot be rendered as text children. Try formatting it using toString().%s\", objectName(originalValue), describeObjectForErrorMessage(parent, parentPropertyName)) : console.error(\"Only plain objects can be passed to Client Components from Server Components. %s objects are not supported.%s\", objectName(originalValue), describeObjectForErrorMessage(parent, parentPropertyName)) : console.error(\"Only plain objects can be passed to Client Components from Server Components. Objects with toJSON methods are not supported. Convert it manually to a simple value before passing it to props.%s\", describeObjectForErrorMessage(parent, parentPropertyName));\n                });\n                return renderModel(request, task, parent, parentPropertyName, value);\n            },\n            thenableState: null,\n            timed: !1\n        };\n        task.time = lastTimestamp;\n        task.environmentName = request.environmentName();\n        task.debugOwner = debugOwner;\n        task.debugStack = debugStack;\n        task.debugTask = debugTask;\n        abortSet.add(task);\n        return task;\n    }\n    function serializeByValueID(id) {\n        return \"$\" + id.toString(16);\n    }\n    function serializeLazyID(id) {\n        return \"$L\" + id.toString(16);\n    }\n    function serializeDeferredObject(request, value) {\n        var deferredDebugObjects = request.deferredDebugObjects;\n        return null !== deferredDebugObjects ? (request.pendingDebugChunks++, request = request.nextChunkId++, deferredDebugObjects.existing.set(value, request), deferredDebugObjects.retained.set(request, value), \"$Y\" + request.toString(16)) : \"$Y\";\n    }\n    function serializeNumber(number) {\n        return Number.isFinite(number) ? 0 === number && -Infinity === 1 / number ? \"$-0\" : number : Infinity === number ? \"$Infinity\" : -Infinity === number ? \"$-Infinity\" : \"$NaN\";\n    }\n    function encodeReferenceChunk(request, id, reference) {\n        request = stringify(reference);\n        id = id.toString(16) + \":\" + request + \"\\n\";\n        return stringToChunk(id);\n    }\n    function serializeClientReference(request, parent, parentPropertyName, clientReference) {\n        var clientReferenceKey = clientReference.$$async ? clientReference.$$id + \"#async\" : clientReference.$$id, writtenClientReferences = request.writtenClientReferences, existingId = writtenClientReferences.get(clientReferenceKey);\n        if (void 0 !== existingId) return parent[0] === REACT_ELEMENT_TYPE && \"1\" === parentPropertyName ? serializeLazyID(existingId) : serializeByValueID(existingId);\n        try {\n            var clientReferenceMetadata = resolveClientReferenceMetadata(request.bundlerConfig, clientReference);\n            request.pendingChunks++;\n            var importId = request.nextChunkId++;\n            emitImportChunk(request, importId, clientReferenceMetadata, !1);\n            writtenClientReferences.set(clientReferenceKey, importId);\n            return parent[0] === REACT_ELEMENT_TYPE && \"1\" === parentPropertyName ? serializeLazyID(importId) : serializeByValueID(importId);\n        } catch (x) {\n            return request.pendingChunks++, parent = request.nextChunkId++, parentPropertyName = logRecoverableError(request, x, null), emitErrorChunk(request, parent, parentPropertyName, x, !1), serializeByValueID(parent);\n        }\n    }\n    function serializeDebugClientReference(request, parent, parentPropertyName, clientReference) {\n        var existingId = request.writtenClientReferences.get(clientReference.$$async ? clientReference.$$id + \"#async\" : clientReference.$$id);\n        if (void 0 !== existingId) return parent[0] === REACT_ELEMENT_TYPE && \"1\" === parentPropertyName ? serializeLazyID(existingId) : serializeByValueID(existingId);\n        try {\n            var clientReferenceMetadata = resolveClientReferenceMetadata(request.bundlerConfig, clientReference);\n            request.pendingDebugChunks++;\n            var importId = request.nextChunkId++;\n            emitImportChunk(request, importId, clientReferenceMetadata, !0);\n            return parent[0] === REACT_ELEMENT_TYPE && \"1\" === parentPropertyName ? serializeLazyID(importId) : serializeByValueID(importId);\n        } catch (x) {\n            return request.pendingDebugChunks++, parent = request.nextChunkId++, parentPropertyName = logRecoverableError(request, x, null), emitErrorChunk(request, parent, parentPropertyName, x, !0), serializeByValueID(parent);\n        }\n    }\n    function outlineModel(request, value) {\n        value = createTask(request, value, null, !1, request.abortableTasks, performance.now(), null, null, null);\n        retryTask(request, value);\n        return value.id;\n    }\n    function serializeServerReference(request, serverReference) {\n        var writtenServerReferences = request.writtenServerReferences, existingId = writtenServerReferences.get(serverReference);\n        if (void 0 !== existingId) return \"$F\" + existingId.toString(16);\n        existingId = serverReference.$$bound;\n        existingId = null === existingId ? null : Promise.resolve(existingId);\n        var id = serverReference.$$id, location = null, error = serverReference.$$location;\n        error && (error = parseStackTrace(error, 1), 0 < error.length && (location = error[0], location = [\n            location[0],\n            location[1],\n            location[2],\n            location[3]\n        ]));\n        existingId = null !== location ? {\n            id: id,\n            bound: existingId,\n            name: \"function\" === typeof serverReference ? serverReference.name : \"\",\n            env: (0, request.environmentName)(),\n            location: location\n        } : {\n            id: id,\n            bound: existingId\n        };\n        request = outlineModel(request, existingId);\n        writtenServerReferences.set(serverReference, request);\n        return \"$F\" + request.toString(16);\n    }\n    function serializeLargeTextString(request, text) {\n        request.pendingChunks++;\n        var textId = request.nextChunkId++;\n        emitTextChunk(request, textId, text, !1);\n        return serializeByValueID(textId);\n    }\n    function serializeMap(request, map) {\n        map = Array.from(map);\n        return \"$Q\" + outlineModel(request, map).toString(16);\n    }\n    function serializeFormData(request, formData) {\n        formData = Array.from(formData.entries());\n        return \"$K\" + outlineModel(request, formData).toString(16);\n    }\n    function serializeSet(request, set) {\n        set = Array.from(set);\n        return \"$W\" + outlineModel(request, set).toString(16);\n    }\n    function serializeTypedArray(request, tag, typedArray) {\n        request.pendingChunks++;\n        var bufferId = request.nextChunkId++;\n        emitTypedArrayChunk(request, bufferId, tag, typedArray, !1);\n        return serializeByValueID(bufferId);\n    }\n    function serializeDebugTypedArray(request, tag, typedArray) {\n        request.pendingDebugChunks++;\n        var bufferId = request.nextChunkId++;\n        emitTypedArrayChunk(request, bufferId, tag, typedArray, !0);\n        return serializeByValueID(bufferId);\n    }\n    function serializeDebugBlob(request, blob) {\n        function progress(entry) {\n            if (entry.done) emitOutlinedDebugModelChunk(request, id, {\n                objectLimit: model.length + 2\n            }, model), enqueueFlush(request);\n            else return model.push(entry.value), reader.read().then(progress).catch(error);\n        }\n        function error(reason) {\n            emitErrorChunk(request, id, \"\", reason, !0);\n            enqueueFlush(request);\n            reader.cancel(reason).then(noop, noop);\n        }\n        var model = [\n            blob.type\n        ], reader = blob.stream().getReader();\n        request.pendingDebugChunks++;\n        var id = request.nextChunkId++;\n        reader.read().then(progress).catch(error);\n        return \"$B\" + id.toString(16);\n    }\n    function serializeBlob(request, blob) {\n        function progress(entry) {\n            if (0 === newTask.status) if (entry.done) request.cacheController.signal.removeEventListener(\"abort\", abortBlob), pingTask(request, newTask);\n            else return model.push(entry.value), reader.read().then(progress).catch(error);\n        }\n        function error(reason) {\n            0 === newTask.status && (request.cacheController.signal.removeEventListener(\"abort\", abortBlob), erroredTask(request, newTask, reason), enqueueFlush(request), reader.cancel(reason).then(error, error));\n        }\n        function abortBlob() {\n            if (0 === newTask.status) {\n                var signal = request.cacheController.signal;\n                signal.removeEventListener(\"abort\", abortBlob);\n                signal = signal.reason;\n                erroredTask(request, newTask, signal);\n                enqueueFlush(request);\n                reader.cancel(signal).then(error, error);\n            }\n        }\n        var model = [\n            blob.type\n        ], newTask = createTask(request, model, null, !1, request.abortableTasks, performance.now(), null, null, null), reader = blob.stream().getReader();\n        request.cacheController.signal.addEventListener(\"abort\", abortBlob);\n        reader.read().then(progress).catch(error);\n        return \"$B\" + newTask.id.toString(16);\n    }\n    function renderModel(request, task, parent, key, value) {\n        serializedSize += key.length;\n        var prevKeyPath = task.keyPath, prevImplicitSlot = task.implicitSlot;\n        try {\n            return renderModelDestructive(request, task, parent, key, value);\n        } catch (thrownValue) {\n            parent = task.model;\n            parent = \"object\" === typeof parent && null !== parent && (parent.$$typeof === REACT_ELEMENT_TYPE || parent.$$typeof === REACT_LAZY_TYPE);\n            if (request.status === ABORTING) return task.status = 3, task = request.fatalError, parent ? serializeLazyID(task) : serializeByValueID(task);\n            key = thrownValue === SuspenseException ? getSuspendedThenable() : thrownValue;\n            if (\"object\" === typeof key && null !== key && \"function\" === typeof key.then) return request = createTask(request, task.model, task.keyPath, task.implicitSlot, request.abortableTasks, task.time, task.debugOwner, task.debugStack, task.debugTask), value = request.ping, key.then(value, value), request.thenableState = getThenableStateAfterSuspending(), task.keyPath = prevKeyPath, task.implicitSlot = prevImplicitSlot, parent ? serializeLazyID(request.id) : serializeByValueID(request.id);\n            task.keyPath = prevKeyPath;\n            task.implicitSlot = prevImplicitSlot;\n            request.pendingChunks++;\n            prevKeyPath = request.nextChunkId++;\n            task = logRecoverableError(request, key, task);\n            emitErrorChunk(request, prevKeyPath, task, key, !1);\n            return parent ? serializeLazyID(prevKeyPath) : serializeByValueID(prevKeyPath);\n        }\n    }\n    function renderModelDestructive(request, task, parent, parentPropertyName, value) {\n        task.model = value;\n        if (value === REACT_ELEMENT_TYPE) return \"$\";\n        if (null === value) return null;\n        if (\"object\" === typeof value) {\n            switch(value.$$typeof){\n                case REACT_ELEMENT_TYPE:\n                    var elementReference = null, _writtenObjects = request.writtenObjects;\n                    if (null === task.keyPath && !task.implicitSlot) {\n                        var _existingReference = _writtenObjects.get(value);\n                        if (void 0 !== _existingReference) if (modelRoot === value) modelRoot = null;\n                        else return _existingReference;\n                        else -1 === parentPropertyName.indexOf(\":\") && (_existingReference = _writtenObjects.get(parent), void 0 !== _existingReference && (elementReference = _existingReference + \":\" + parentPropertyName, _writtenObjects.set(value, elementReference)));\n                    }\n                    if (serializedSize > MAX_ROW_SIZE) return deferTask(request, task);\n                    if (_existingReference = value._debugInfo) if (canEmitDebugInfo) forwardDebugInfo(request, task, _existingReference);\n                    else return outlineTask(request, task);\n                    _existingReference = value.props;\n                    var refProp = _existingReference.ref;\n                    refProp = void 0 !== refProp ? refProp : null;\n                    task.debugOwner = value._owner;\n                    task.debugStack = value._debugStack;\n                    task.debugTask = value._debugTask;\n                    if (void 0 === value._owner || void 0 === value._debugStack || void 0 === value._debugTask) {\n                        var key = \"\";\n                        null !== value.key && (key = ' key=\"' + value.key + '\"');\n                        console.error(\"Attempted to render <%s%s> without development properties. This is not supported. It can happen if:\\n- The element is created with a production version of React but rendered in development.\\n- The element was cloned with a custom function instead of `React.cloneElement`.\\nThe props of this element may help locate this element: %o\", value.type, key, value.props);\n                    }\n                    request = renderElement(request, task, value.type, value.key, refProp, _existingReference, value._store.validated);\n                    \"object\" === typeof request && null !== request && null !== elementReference && (_writtenObjects.has(request) || _writtenObjects.set(request, elementReference));\n                    return request;\n                case REACT_LAZY_TYPE:\n                    if (serializedSize > MAX_ROW_SIZE) return deferTask(request, task);\n                    task.thenableState = null;\n                    elementReference = callLazyInitInDEV(value);\n                    if (request.status === ABORTING) throw null;\n                    if (_writtenObjects = value._debugInfo) if (canEmitDebugInfo) forwardDebugInfo(request, task, _writtenObjects);\n                    else return outlineTask(request, task);\n                    return renderModelDestructive(request, task, emptyRoot, \"\", elementReference);\n                case REACT_LEGACY_ELEMENT_TYPE:\n                    throw Error('A React Element from an older version of React was rendered. This is not supported. It can happen if:\\n- Multiple copies of the \"react\" package is used.\\n- A library pre-bundled an old copy of \"react\" or \"react/jsx-runtime\".\\n- A compiler tries to \"inline\" JSX instead of using the runtime.');\n            }\n            if (isClientReference(value)) return serializeClientReference(request, parent, parentPropertyName, value);\n            if (void 0 !== request.temporaryReferences && (elementReference = request.temporaryReferences.get(value), void 0 !== elementReference)) return \"$T\" + elementReference;\n            elementReference = request.writtenObjects;\n            _writtenObjects = elementReference.get(value);\n            if (\"function\" === typeof value.then) {\n                if (void 0 !== _writtenObjects) {\n                    if (null !== task.keyPath || task.implicitSlot) return \"$@\" + serializeThenable(request, task, value).toString(16);\n                    if (modelRoot === value) modelRoot = null;\n                    else return _writtenObjects;\n                }\n                request = \"$@\" + serializeThenable(request, task, value).toString(16);\n                elementReference.set(value, request);\n                return request;\n            }\n            if (void 0 !== _writtenObjects) if (modelRoot === value) {\n                if (_writtenObjects !== serializeByValueID(task.id)) return _writtenObjects;\n                modelRoot = null;\n            } else return _writtenObjects;\n            else if (-1 === parentPropertyName.indexOf(\":\") && (_writtenObjects = elementReference.get(parent), void 0 !== _writtenObjects)) {\n                _existingReference = parentPropertyName;\n                if (isArrayImpl(parent) && parent[0] === REACT_ELEMENT_TYPE) switch(parentPropertyName){\n                    case \"1\":\n                        _existingReference = \"type\";\n                        break;\n                    case \"2\":\n                        _existingReference = \"key\";\n                        break;\n                    case \"3\":\n                        _existingReference = \"props\";\n                        break;\n                    case \"4\":\n                        _existingReference = \"_owner\";\n                }\n                elementReference.set(value, _writtenObjects + \":\" + _existingReference);\n            }\n            if (isArrayImpl(value)) return renderFragment(request, task, value);\n            if (value instanceof Map) return serializeMap(request, value);\n            if (value instanceof Set) return serializeSet(request, value);\n            if (\"function\" === typeof FormData && value instanceof FormData) return serializeFormData(request, value);\n            if (value instanceof Error) return serializeErrorValue(request, value);\n            if (value instanceof ArrayBuffer) return serializeTypedArray(request, \"A\", new Uint8Array(value));\n            if (value instanceof Int8Array) return serializeTypedArray(request, \"O\", value);\n            if (value instanceof Uint8Array) return serializeTypedArray(request, \"o\", value);\n            if (value instanceof Uint8ClampedArray) return serializeTypedArray(request, \"U\", value);\n            if (value instanceof Int16Array) return serializeTypedArray(request, \"S\", value);\n            if (value instanceof Uint16Array) return serializeTypedArray(request, \"s\", value);\n            if (value instanceof Int32Array) return serializeTypedArray(request, \"L\", value);\n            if (value instanceof Uint32Array) return serializeTypedArray(request, \"l\", value);\n            if (value instanceof Float32Array) return serializeTypedArray(request, \"G\", value);\n            if (value instanceof Float64Array) return serializeTypedArray(request, \"g\", value);\n            if (value instanceof BigInt64Array) return serializeTypedArray(request, \"M\", value);\n            if (value instanceof BigUint64Array) return serializeTypedArray(request, \"m\", value);\n            if (value instanceof DataView) return serializeTypedArray(request, \"V\", value);\n            if (\"function\" === typeof Blob && value instanceof Blob) return serializeBlob(request, value);\n            if (elementReference = getIteratorFn(value)) return elementReference = elementReference.call(value), elementReference === value ? \"$i\" + outlineModel(request, Array.from(elementReference)).toString(16) : renderFragment(request, task, Array.from(elementReference));\n            if (\"function\" === typeof ReadableStream && value instanceof ReadableStream) return serializeReadableStream(request, task, value);\n            elementReference = value[ASYNC_ITERATOR];\n            if (\"function\" === typeof elementReference) return renderAsyncFragment(request, task, value, elementReference);\n            if (value instanceof Date) return \"$D\" + value.toJSON();\n            elementReference = getPrototypeOf(value);\n            if (elementReference !== ObjectPrototype && (null === elementReference || null !== getPrototypeOf(elementReference))) throw Error(\"Only plain objects, and a few built-ins, can be passed to Client Components from Server Components. Classes or null prototypes are not supported.\" + describeObjectForErrorMessage(parent, parentPropertyName));\n            if (\"Object\" !== objectName(value)) callWithDebugContextInDEV(request, task, function() {\n                console.error(\"Only plain objects can be passed to Client Components from Server Components. %s objects are not supported.%s\", objectName(value), describeObjectForErrorMessage(parent, parentPropertyName));\n            });\n            else if (!isSimpleObject(value)) callWithDebugContextInDEV(request, task, function() {\n                console.error(\"Only plain objects can be passed to Client Components from Server Components. Classes or other objects with methods are not supported.%s\", describeObjectForErrorMessage(parent, parentPropertyName));\n            });\n            else if (Object.getOwnPropertySymbols) {\n                var symbols = Object.getOwnPropertySymbols(value);\n                0 < symbols.length && callWithDebugContextInDEV(request, task, function() {\n                    console.error(\"Only plain objects can be passed to Client Components from Server Components. Objects with symbol properties like %s are not supported.%s\", symbols[0].description, describeObjectForErrorMessage(parent, parentPropertyName));\n                });\n            }\n            return value;\n        }\n        if (\"string\" === typeof value) return serializedSize += value.length, \"Z\" === value[value.length - 1] && parent[parentPropertyName] instanceof Date ? \"$D\" + value : 1024 <= value.length && null !== byteLengthOfChunk ? serializeLargeTextString(request, value) : \"$\" === value[0] ? \"$\" + value : value;\n        if (\"boolean\" === typeof value) return value;\n        if (\"number\" === typeof value) return serializeNumber(value);\n        if (\"undefined\" === typeof value) return \"$undefined\";\n        if (\"function\" === typeof value) {\n            if (isClientReference(value)) return serializeClientReference(request, parent, parentPropertyName, value);\n            if (value.$$typeof === SERVER_REFERENCE_TAG) return serializeServerReference(request, value);\n            if (void 0 !== request.temporaryReferences && (request = request.temporaryReferences.get(value), void 0 !== request)) return \"$T\" + request;\n            if (value.$$typeof === TEMPORARY_REFERENCE_TAG) throw Error(\"Could not reference an opaque temporary reference. This is likely due to misconfiguring the temporaryReferences options on the server.\");\n            if (/^on[A-Z]/.test(parentPropertyName)) throw Error(\"Event handlers cannot be passed to Client Component props.\" + describeObjectForErrorMessage(parent, parentPropertyName) + \"\\nIf you need interactivity, consider converting part of this to a Client Component.\");\n            if (jsxChildrenParents.has(parent) || jsxPropsParents.has(parent) && \"children\" === parentPropertyName) throw request = value.displayName || value.name || \"Component\", Error(\"Functions are not valid as a child of Client Components. This may happen if you return \" + request + \" instead of <\" + request + \" /> from render. Or maybe you meant to call this function rather than return it.\" + describeObjectForErrorMessage(parent, parentPropertyName));\n            throw Error('Functions cannot be passed directly to Client Components unless you explicitly expose it by marking it with \"use server\". Or maybe you meant to call this function rather than return it.' + describeObjectForErrorMessage(parent, parentPropertyName));\n        }\n        if (\"symbol\" === typeof value) {\n            task = request.writtenSymbols;\n            elementReference = task.get(value);\n            if (void 0 !== elementReference) return serializeByValueID(elementReference);\n            elementReference = value.description;\n            if (Symbol.for(elementReference) !== value) throw Error(\"Only global symbols received from Symbol.for(...) can be passed to Client Components. The symbol Symbol.for(\" + (value.description + \") cannot be found among global symbols.\") + describeObjectForErrorMessage(parent, parentPropertyName));\n            request.pendingChunks++;\n            _writtenObjects = request.nextChunkId++;\n            emitSymbolChunk(request, _writtenObjects, elementReference);\n            task.set(value, _writtenObjects);\n            return serializeByValueID(_writtenObjects);\n        }\n        if (\"bigint\" === typeof value) return \"$n\" + value.toString(10);\n        throw Error(\"Type \" + typeof value + \" is not supported in Client Component props.\" + describeObjectForErrorMessage(parent, parentPropertyName));\n    }\n    function logRecoverableError(request, error, task) {\n        var prevRequest = currentRequest;\n        currentRequest = null;\n        try {\n            var onError = request.onError;\n            var errorDigest = null !== task ? supportsRequestStorage ? requestStorage.run(void 0, callWithDebugContextInDEV, request, task, onError, error) : callWithDebugContextInDEV(request, task, onError, error) : supportsRequestStorage ? requestStorage.run(void 0, onError, error) : onError(error);\n        } finally{\n            currentRequest = prevRequest;\n        }\n        if (null != errorDigest && \"string\" !== typeof errorDigest) throw Error('onError returned something with a type other than \"string\". onError should return a string and may return null or undefined but must not return anything else. It received something of type \"' + typeof errorDigest + '\" instead');\n        return errorDigest || \"\";\n    }\n    function fatalError(request, error) {\n        var onFatalError = request.onFatalError;\n        onFatalError(error);\n        null !== request.destination ? (request.status = CLOSED, closeWithError(request.destination, error)) : (request.status = 13, request.fatalError = error);\n        request.cacheController.abort(Error(\"The render was aborted due to a fatal error.\", {\n            cause: error\n        }));\n    }\n    function serializeErrorValue(request, error) {\n        var name = \"Error\", env = (0, request.environmentName)();\n        try {\n            name = error.name;\n            var message = String(error.message);\n            var stack = filterStackTrace(request, parseStackTrace(error, 0));\n            var errorEnv = error.environmentName;\n            \"string\" === typeof errorEnv && (env = errorEnv);\n        } catch (x) {\n            message = \"An error occurred but serializing the error message failed.\", stack = [];\n        }\n        return \"$Z\" + outlineModel(request, {\n            name: name,\n            message: message,\n            stack: stack,\n            env: env\n        }).toString(16);\n    }\n    function emitErrorChunk(request, id, digest, error, debug) {\n        var name = \"Error\", env = (0, request.environmentName)();\n        try {\n            if (error instanceof Error) {\n                name = error.name;\n                var message = String(error.message);\n                var stack = filterStackTrace(request, parseStackTrace(error, 0));\n                var errorEnv = error.environmentName;\n                \"string\" === typeof errorEnv && (env = errorEnv);\n            } else message = \"object\" === typeof error && null !== error ? describeObjectForErrorMessage(error) : String(error), stack = [];\n        } catch (x) {\n            message = \"An error occurred but serializing the error message failed.\", stack = [];\n        }\n        digest = {\n            digest: digest,\n            name: name,\n            message: message,\n            stack: stack,\n            env: env\n        };\n        id = id.toString(16) + \":E\" + stringify(digest) + \"\\n\";\n        id = stringToChunk(id);\n        debug ? request.completedDebugChunks.push(id) : request.completedErrorChunks.push(id);\n    }\n    function emitImportChunk(request, id, clientReferenceMetadata, debug) {\n        clientReferenceMetadata = stringify(clientReferenceMetadata);\n        id = id.toString(16) + \":I\" + clientReferenceMetadata + \"\\n\";\n        id = stringToChunk(id);\n        debug ? request.completedDebugChunks.push(id) : request.completedImportChunks.push(id);\n    }\n    function emitSymbolChunk(request, id, name) {\n        id = encodeReferenceChunk(request, id, \"$S\" + name);\n        request.completedImportChunks.push(id);\n    }\n    function emitModelChunk(request, id, json) {\n        id = id.toString(16) + \":\" + json + \"\\n\";\n        id = stringToChunk(id);\n        request.completedRegularChunks.push(id);\n    }\n    function emitDebugHaltChunk(request, id) {\n        id = id.toString(16) + \":\\n\";\n        id = stringToChunk(id);\n        request.completedDebugChunks.push(id);\n    }\n    function emitDebugChunk(request, id, debugInfo) {\n        var json = serializeDebugModel(request, 500, debugInfo);\n        null !== request.debugDestination ? (debugInfo = request.nextChunkId++, json = debugInfo.toString(16) + \":\" + json + \"\\n\", request.pendingDebugChunks++, request.completedDebugChunks.push(stringToChunk(json)), id = id.toString(16) + ':D\"$' + debugInfo.toString(16) + '\"\\n', request.completedRegularChunks.push(stringToChunk(id))) : (id = id.toString(16) + \":D\" + json + \"\\n\", request.completedRegularChunks.push(stringToChunk(id)));\n    }\n    function outlineComponentInfo(request, componentInfo) {\n        if (!request.writtenDebugObjects.has(componentInfo)) {\n            null != componentInfo.owner && outlineComponentInfo(request, componentInfo.owner);\n            var objectLimit = 10;\n            null != componentInfo.stack && (objectLimit += componentInfo.stack.length);\n            objectLimit = {\n                objectLimit: objectLimit\n            };\n            var componentDebugInfo = {\n                name: componentInfo.name,\n                key: componentInfo.key\n            };\n            null != componentInfo.env && (componentDebugInfo.env = componentInfo.env);\n            null != componentInfo.owner && (componentDebugInfo.owner = componentInfo.owner);\n            null == componentInfo.stack && null != componentInfo.debugStack ? componentDebugInfo.stack = filterStackTrace(request, parseStackTrace(componentInfo.debugStack, 1)) : null != componentInfo.stack && (componentDebugInfo.stack = componentInfo.stack);\n            componentDebugInfo.props = componentInfo.props;\n            objectLimit = outlineDebugModel(request, objectLimit, componentDebugInfo);\n            objectLimit = serializeByValueID(objectLimit);\n            request.writtenDebugObjects.set(componentInfo, objectLimit);\n            request.writtenObjects.set(componentInfo, objectLimit);\n        }\n    }\n    function emitTypedArrayChunk(request, id, tag, typedArray, debug) {\n        debug ? request.pendingDebugChunks++ : request.pendingChunks++;\n        var buffer = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n        typedArray = 2048 < typedArray.byteLength ? buffer.slice() : buffer;\n        buffer = typedArray.byteLength;\n        id = id.toString(16) + \":\" + tag + buffer.toString(16) + \",\";\n        id = stringToChunk(id);\n        debug ? request.completedDebugChunks.push(id, typedArray) : request.completedRegularChunks.push(id, typedArray);\n    }\n    function emitTextChunk(request, id, text, debug) {\n        if (null === byteLengthOfChunk) throw Error(\"Existence of byteLengthOfChunk should have already been checked. This is a bug in React.\");\n        debug ? request.pendingDebugChunks++ : request.pendingChunks++;\n        text = stringToChunk(text);\n        var binaryLength = text.byteLength;\n        id = id.toString(16) + \":T\" + binaryLength.toString(16) + \",\";\n        id = stringToChunk(id);\n        debug ? request.completedDebugChunks.push(id, text) : request.completedRegularChunks.push(id, text);\n    }\n    function renderDebugModel(request, counter, parent, parentPropertyName, value) {\n        if (null === value) return null;\n        if (value === REACT_ELEMENT_TYPE) return \"$\";\n        if (\"object\" === typeof value) {\n            if (isClientReference(value)) return serializeDebugClientReference(request, parent, parentPropertyName, value);\n            if (value.$$typeof === CONSTRUCTOR_MARKER) {\n                value = value.constructor;\n                var ref = request.writtenDebugObjects.get(value);\n                void 0 === ref && (request = outlineDebugModel(request, counter, value), ref = serializeByValueID(request));\n                return \"$P\" + ref.slice(1);\n            }\n            if (void 0 !== request.temporaryReferences) {\n                var tempRef = request.temporaryReferences.get(value);\n                if (void 0 !== tempRef) return \"$T\" + tempRef;\n            }\n            tempRef = request.writtenDebugObjects;\n            var existingDebugReference = tempRef.get(value);\n            if (void 0 !== existingDebugReference) if (debugModelRoot === value) debugModelRoot = null;\n            else return existingDebugReference;\n            else if (-1 === parentPropertyName.indexOf(\":\")) {\n                if (existingDebugReference = tempRef.get(parent), void 0 !== existingDebugReference) {\n                    if (0 >= counter.objectLimit && !doNotLimit.has(value)) return serializeDeferredObject(request, value);\n                    var propertyName = parentPropertyName;\n                    if (isArrayImpl(parent) && parent[0] === REACT_ELEMENT_TYPE) switch(parentPropertyName){\n                        case \"1\":\n                            propertyName = \"type\";\n                            break;\n                        case \"2\":\n                            propertyName = \"key\";\n                            break;\n                        case \"3\":\n                            propertyName = \"props\";\n                            break;\n                        case \"4\":\n                            propertyName = \"_owner\";\n                    }\n                    tempRef.set(value, existingDebugReference + \":\" + propertyName);\n                } else if (debugNoOutline !== value) {\n                    if (\"function\" === typeof value.then) return serializeDebugThenable(request, counter, value);\n                    request = outlineDebugModel(request, counter, value);\n                    return serializeByValueID(request);\n                }\n            }\n            parent = request.writtenObjects.get(value);\n            if (void 0 !== parent) return parent;\n            if (0 >= counter.objectLimit && !doNotLimit.has(value)) return serializeDeferredObject(request, value);\n            counter.objectLimit--;\n            parent = request.deferredDebugObjects;\n            if (null !== parent && (parentPropertyName = parent.existing.get(value), void 0 !== parentPropertyName)) return parent.existing.delete(value), parent.retained.delete(parentPropertyName), emitOutlinedDebugModelChunk(request, parentPropertyName, counter, value), serializeByValueID(parentPropertyName);\n            switch(value.$$typeof){\n                case REACT_ELEMENT_TYPE:\n                    null != value._owner && outlineComponentInfo(request, value._owner);\n                    \"object\" === typeof value.type && null !== value.type && doNotLimit.add(value.type);\n                    \"object\" === typeof value.key && null !== value.key && doNotLimit.add(value.key);\n                    doNotLimit.add(value.props);\n                    null !== value._owner && doNotLimit.add(value._owner);\n                    counter = null;\n                    if (null != value._debugStack) for(counter = filterStackTrace(request, parseStackTrace(value._debugStack, 1)), doNotLimit.add(counter), request = 0; request < counter.length; request++)doNotLimit.add(counter[request]);\n                    return [\n                        REACT_ELEMENT_TYPE,\n                        value.type,\n                        value.key,\n                        value.props,\n                        value._owner,\n                        counter,\n                        value._store.validated\n                    ];\n            }\n            if (\"function\" === typeof value.then) return serializeDebugThenable(request, counter, value);\n            if (isArrayImpl(value)) return value;\n            if (value instanceof Map) {\n                value = Array.from(value);\n                counter.objectLimit++;\n                for(ref = 0; ref < value.length; ref++){\n                    var entry = value[ref];\n                    doNotLimit.add(entry);\n                    var key = entry[0];\n                    entry = entry[1];\n                    \"object\" === typeof key && null !== key && doNotLimit.add(key);\n                    \"object\" === typeof entry && null !== entry && doNotLimit.add(entry);\n                }\n                return \"$Q\" + outlineDebugModel(request, counter, value).toString(16);\n            }\n            if (value instanceof Set) {\n                value = Array.from(value);\n                counter.objectLimit++;\n                for(ref = 0; ref < value.length; ref++)key = value[ref], \"object\" === typeof key && null !== key && doNotLimit.add(key);\n                return \"$W\" + outlineDebugModel(request, counter, value).toString(16);\n            }\n            if (\"function\" === typeof FormData && value instanceof FormData) return value = Array.from(value.entries()), \"$K\" + outlineDebugModel(request, {\n                objectLimit: 2 * value.length + 1\n            }, value).toString(16);\n            if (value instanceof Error) {\n                counter = \"Error\";\n                var env = (0, request.environmentName)();\n                try {\n                    counter = value.name, ref = String(value.message), key = filterStackTrace(request, parseStackTrace(value, 0)), entry = value.environmentName, \"string\" === typeof entry && (env = entry);\n                } catch (x) {\n                    ref = \"An error occurred but serializing the error message failed.\", key = [];\n                }\n                request = \"$Z\" + outlineDebugModel(request, {\n                    objectLimit: 2 * key.length + 1\n                }, {\n                    name: counter,\n                    message: ref,\n                    stack: key,\n                    env: env\n                }).toString(16);\n                return request;\n            }\n            if (value instanceof ArrayBuffer) return serializeDebugTypedArray(request, \"A\", new Uint8Array(value));\n            if (value instanceof Int8Array) return serializeDebugTypedArray(request, \"O\", value);\n            if (value instanceof Uint8Array) return serializeDebugTypedArray(request, \"o\", value);\n            if (value instanceof Uint8ClampedArray) return serializeDebugTypedArray(request, \"U\", value);\n            if (value instanceof Int16Array) return serializeDebugTypedArray(request, \"S\", value);\n            if (value instanceof Uint16Array) return serializeDebugTypedArray(request, \"s\", value);\n            if (value instanceof Int32Array) return serializeDebugTypedArray(request, \"L\", value);\n            if (value instanceof Uint32Array) return serializeDebugTypedArray(request, \"l\", value);\n            if (value instanceof Float32Array) return serializeDebugTypedArray(request, \"G\", value);\n            if (value instanceof Float64Array) return serializeDebugTypedArray(request, \"g\", value);\n            if (value instanceof BigInt64Array) return serializeDebugTypedArray(request, \"M\", value);\n            if (value instanceof BigUint64Array) return serializeDebugTypedArray(request, \"m\", value);\n            if (value instanceof DataView) return serializeDebugTypedArray(request, \"V\", value);\n            if (\"function\" === typeof Blob && value instanceof Blob) return serializeDebugBlob(request, value);\n            if (getIteratorFn(value)) return Array.from(value);\n            request = getPrototypeOf(value);\n            if (request !== ObjectPrototype && null !== request) {\n                counter = Object.create(null);\n                for(env in value)if (hasOwnProperty.call(value, env) || isGetter(request, env)) counter[env] = value[env];\n                ref = request.constructor;\n                \"function\" !== typeof ref || ref.prototype !== request || hasOwnProperty.call(value, \"\") || isGetter(request, \"\") || (counter[\"\"] = {\n                    $$typeof: CONSTRUCTOR_MARKER,\n                    constructor: ref\n                });\n                return counter;\n            }\n            return value;\n        }\n        if (\"string\" === typeof value) {\n            if (\"Z\" === value[value.length - 1] && parent[parentPropertyName] instanceof Date) return \"$D\" + value;\n            if (1024 <= value.length) {\n                if (0 >= counter.objectLimit) return serializeDeferredObject(request, value);\n                counter.objectLimit--;\n                request.pendingDebugChunks++;\n                counter = request.nextChunkId++;\n                emitTextChunk(request, counter, value, !0);\n                return serializeByValueID(counter);\n            }\n            return \"$\" === value[0] ? \"$\" + value : value;\n        }\n        if (\"boolean\" === typeof value) return value;\n        if (\"number\" === typeof value) return serializeNumber(value);\n        if (\"undefined\" === typeof value) return \"$undefined\";\n        if (\"function\" === typeof value) {\n            if (isClientReference(value)) return serializeDebugClientReference(request, parent, parentPropertyName, value);\n            if (void 0 !== request.temporaryReferences && (counter = request.temporaryReferences.get(value), void 0 !== counter)) return \"$T\" + counter;\n            counter = request.writtenDebugObjects;\n            ref = counter.get(value);\n            if (void 0 !== ref) return ref;\n            ref = Function.prototype.toString.call(value);\n            key = value.name;\n            key = \"$E\" + (\"string\" === typeof key ? \"Object.defineProperty(\" + ref + ',\"name\",{value:' + JSON.stringify(key) + \"})\" : \"(\" + ref + \")\");\n            request.pendingDebugChunks++;\n            ref = request.nextChunkId++;\n            key = encodeReferenceChunk(request, ref, key);\n            request.completedDebugChunks.push(key);\n            request = serializeByValueID(ref);\n            counter.set(value, request);\n            return request;\n        }\n        if (\"symbol\" === typeof value) {\n            counter = request.writtenSymbols.get(value);\n            if (void 0 !== counter) return serializeByValueID(counter);\n            value = value.description;\n            request.pendingChunks++;\n            counter = request.nextChunkId++;\n            emitSymbolChunk(request, counter, value);\n            return serializeByValueID(counter);\n        }\n        return \"bigint\" === typeof value ? \"$n\" + value.toString(10) : value instanceof Date ? \"$D\" + value.toJSON() : \"unknown type \" + typeof value;\n    }\n    function serializeDebugModel(request, objectLimit, model) {\n        function replacer(parentPropertyName, value) {\n            try {\n                return renderDebugModel(request, counter, this, parentPropertyName, value);\n            } catch (x) {\n                return \"Unknown Value: React could not send it from the server.\\n\" + x.message;\n            }\n        }\n        var counter = {\n            objectLimit: objectLimit\n        };\n        objectLimit = debugNoOutline;\n        debugNoOutline = model;\n        try {\n            return stringify(model, replacer);\n        } catch (x) {\n            return stringify(\"Unknown Value: React could not send it from the server.\\n\" + x.message);\n        } finally{\n            debugNoOutline = objectLimit;\n        }\n    }\n    function emitOutlinedDebugModelChunk(request, id, counter, model) {\n        function replacer(parentPropertyName, value) {\n            try {\n                return renderDebugModel(request, counter, this, parentPropertyName, value);\n            } catch (x) {\n                return \"Unknown Value: React could not send it from the server.\\n\" + x.message;\n            }\n        }\n        \"object\" === typeof model && null !== model && doNotLimit.add(model);\n        var prevModelRoot = debugModelRoot;\n        debugModelRoot = model;\n        \"object\" === typeof model && null !== model && request.writtenDebugObjects.set(model, serializeByValueID(id));\n        try {\n            var json = stringify(model, replacer);\n        } catch (x) {\n            json = stringify(\"Unknown Value: React could not send it from the server.\\n\" + x.message);\n        } finally{\n            debugModelRoot = prevModelRoot;\n        }\n        id = id.toString(16) + \":\" + json + \"\\n\";\n        id = stringToChunk(id);\n        request.completedDebugChunks.push(id);\n    }\n    function outlineDebugModel(request, counter, model) {\n        var id = request.nextChunkId++;\n        request.pendingDebugChunks++;\n        emitOutlinedDebugModelChunk(request, id, counter, model);\n        return id;\n    }\n    function emitTimeOriginChunk(request, timeOrigin) {\n        request.pendingDebugChunks++;\n        timeOrigin = stringToChunk(\":N\" + timeOrigin + \"\\n\");\n        request.completedDebugChunks.push(timeOrigin);\n    }\n    function forwardDebugInfo(request$jscomp$1, task, debugInfo) {\n        for(var id = task.id, i = 0; i < debugInfo.length; i++){\n            var info = debugInfo[i];\n            if (\"number\" === typeof info.time) markOperationEndTime(request$jscomp$1, task, info.time);\n            else if (\"string\" === typeof info.name) outlineComponentInfo(request$jscomp$1, info), request$jscomp$1.pendingChunks++, emitDebugChunk(request$jscomp$1, id, info);\n            else if (info.awaited) {\n                var ioInfo = info.awaited;\n                if (!(ioInfo.end <= request$jscomp$1.timeOrigin)) {\n                    var request = request$jscomp$1, ioInfo$jscomp$0 = ioInfo;\n                    if (!request.writtenObjects.has(ioInfo$jscomp$0)) {\n                        request.pendingDebugChunks++;\n                        var id$jscomp$0 = request.nextChunkId++, owner = ioInfo$jscomp$0.owner;\n                        null != owner && outlineComponentInfo(request, owner);\n                        var debugStack = null == ioInfo$jscomp$0.stack && null != ioInfo$jscomp$0.debugStack ? filterStackTrace(request, parseStackTrace(ioInfo$jscomp$0.debugStack, 1)) : ioInfo$jscomp$0.stack;\n                        var request$jscomp$0 = request, id$jscomp$1 = id$jscomp$0, value = ioInfo$jscomp$0.value, env = ioInfo$jscomp$0.env, objectLimit = 10;\n                        debugStack && (objectLimit += debugStack.length);\n                        var debugIOInfo = {\n                            name: ioInfo$jscomp$0.name,\n                            start: ioInfo$jscomp$0.start - request$jscomp$0.timeOrigin,\n                            end: ioInfo$jscomp$0.end - request$jscomp$0.timeOrigin\n                        };\n                        null != env && (debugIOInfo.env = env);\n                        null != debugStack && (debugIOInfo.stack = debugStack);\n                        null != owner && (debugIOInfo.owner = owner);\n                        void 0 !== value && (debugIOInfo.value = value);\n                        value = serializeDebugModel(request$jscomp$0, objectLimit, debugIOInfo);\n                        id$jscomp$1 = id$jscomp$1.toString(16) + \":J\" + value + \"\\n\";\n                        id$jscomp$1 = stringToChunk(id$jscomp$1);\n                        request$jscomp$0.completedDebugChunks.push(id$jscomp$1);\n                        request.writtenDebugObjects.set(ioInfo$jscomp$0, serializeByValueID(id$jscomp$0));\n                    }\n                    request = null == info.stack && null != info.debugStack ? filterStackTrace(request$jscomp$1, parseStackTrace(info.debugStack, 1)) : info.stack;\n                    ioInfo = {\n                        awaited: ioInfo\n                    };\n                    null != info.env && (ioInfo.env = info.env);\n                    null != info.owner && (ioInfo.owner = info.owner);\n                    null != request && (ioInfo.stack = request);\n                    request$jscomp$1.pendingChunks++;\n                    emitDebugChunk(request$jscomp$1, id, ioInfo);\n                }\n            } else request$jscomp$1.pendingChunks++, emitDebugChunk(request$jscomp$1, id, info);\n        }\n    }\n    function forwardDebugInfoFromThenable(request, task, thenable) {\n        (thenable = thenable._debugInfo) && forwardDebugInfo(request, task, thenable);\n    }\n    function forwardDebugInfoFromCurrentContext(request, task, thenable) {\n        (thenable = thenable._debugInfo) && forwardDebugInfo(request, task, thenable);\n    }\n    function markOperationEndTime(request, task, timestamp) {\n        !(request.status === ABORTING && timestamp > request.abortTime) && timestamp > task.time && (task.time = timestamp);\n    }\n    function emitChunk(request, task, value) {\n        var id = task.id;\n        \"string\" === typeof value && null !== byteLengthOfChunk ? emitTextChunk(request, id, value, !1) : value instanceof ArrayBuffer ? emitTypedArrayChunk(request, id, \"A\", new Uint8Array(value), !1) : value instanceof Int8Array ? emitTypedArrayChunk(request, id, \"O\", value, !1) : value instanceof Uint8Array ? emitTypedArrayChunk(request, id, \"o\", value, !1) : value instanceof Uint8ClampedArray ? emitTypedArrayChunk(request, id, \"U\", value, !1) : value instanceof Int16Array ? emitTypedArrayChunk(request, id, \"S\", value, !1) : value instanceof Uint16Array ? emitTypedArrayChunk(request, id, \"s\", value, !1) : value instanceof Int32Array ? emitTypedArrayChunk(request, id, \"L\", value, !1) : value instanceof Uint32Array ? emitTypedArrayChunk(request, id, \"l\", value, !1) : value instanceof Float32Array ? emitTypedArrayChunk(request, id, \"G\", value, !1) : value instanceof Float64Array ? emitTypedArrayChunk(request, id, \"g\", value, !1) : value instanceof BigInt64Array ? emitTypedArrayChunk(request, id, \"M\", value, !1) : value instanceof BigUint64Array ? emitTypedArrayChunk(request, id, \"m\", value, !1) : value instanceof DataView ? emitTypedArrayChunk(request, id, \"V\", value, !1) : (value = stringify(value, task.toJSON), emitModelChunk(request, task.id, value));\n    }\n    function erroredTask(request, task, error) {\n        task.timed && markOperationEndTime(request, task, performance.now());\n        task.status = 4;\n        var digest = logRecoverableError(request, error, task);\n        emitErrorChunk(request, task.id, digest, error, !1);\n        request.abortableTasks.delete(task);\n        callOnAllReadyIfReady(request);\n    }\n    function retryTask(request, task) {\n        if (0 === task.status) {\n            var prevCanEmitDebugInfo = canEmitDebugInfo;\n            task.status = 5;\n            var parentSerializedSize = serializedSize;\n            try {\n                modelRoot = task.model;\n                canEmitDebugInfo = !0;\n                var resolvedModel = renderModelDestructive(request, task, emptyRoot, \"\", task.model);\n                canEmitDebugInfo = !1;\n                modelRoot = resolvedModel;\n                task.keyPath = null;\n                task.implicitSlot = !1;\n                var currentEnv = (0, request.environmentName)();\n                currentEnv !== task.environmentName && (request.pendingChunks++, emitDebugChunk(request, task.id, {\n                    env: currentEnv\n                }));\n                task.timed && markOperationEndTime(request, task, performance.now());\n                if (\"object\" === typeof resolvedModel && null !== resolvedModel) request.writtenObjects.set(resolvedModel, serializeByValueID(task.id)), emitChunk(request, task, resolvedModel);\n                else {\n                    var json = stringify(resolvedModel);\n                    emitModelChunk(request, task.id, json);\n                }\n                task.status = 1;\n                request.abortableTasks.delete(task);\n                callOnAllReadyIfReady(request);\n            } catch (thrownValue) {\n                if (request.status === ABORTING) {\n                    request.abortableTasks.delete(task);\n                    task.status = 0;\n                    var errorId = request.fatalError;\n                    abortTask(task);\n                    finishAbortedTask(task, request, errorId);\n                } else {\n                    var x = thrownValue === SuspenseException ? getSuspendedThenable() : thrownValue;\n                    if (\"object\" === typeof x && null !== x && \"function\" === typeof x.then) {\n                        task.status = 0;\n                        task.thenableState = getThenableStateAfterSuspending();\n                        var ping = task.ping;\n                        x.then(ping, ping);\n                    } else erroredTask(request, task, x);\n                }\n            } finally{\n                canEmitDebugInfo = prevCanEmitDebugInfo, serializedSize = parentSerializedSize;\n            }\n        }\n    }\n    function tryStreamTask(request, task) {\n        var prevCanEmitDebugInfo = canEmitDebugInfo;\n        canEmitDebugInfo = !1;\n        var parentSerializedSize = serializedSize;\n        try {\n            emitChunk(request, task, task.model);\n        } finally{\n            serializedSize = parentSerializedSize, canEmitDebugInfo = prevCanEmitDebugInfo;\n        }\n    }\n    function performWork(request) {\n        var prevDispatcher = ReactSharedInternalsServer.H;\n        ReactSharedInternalsServer.H = HooksDispatcher;\n        var prevRequest = currentRequest;\n        currentRequest$1 = currentRequest = request;\n        try {\n            var pingedTasks = request.pingedTasks;\n            request.pingedTasks = [];\n            for(var i = 0; i < pingedTasks.length; i++)retryTask(request, pingedTasks[i]);\n            flushCompletedChunks(request);\n        } catch (error) {\n            logRecoverableError(request, error, null), fatalError(request, error);\n        } finally{\n            ReactSharedInternalsServer.H = prevDispatcher, currentRequest$1 = null, currentRequest = prevRequest;\n        }\n    }\n    function abortTask(task) {\n        0 === task.status && (task.status = 3);\n    }\n    function finishAbortedTask(task, request, errorId) {\n        if (3 === task.status) {\n            var model = task.model;\n            \"object\" === typeof model && null !== model && (model = model._debugInfo) && forwardDebugInfo(request, task, model);\n            task.timed && markOperationEndTime(request, task, request.abortTime);\n            errorId = serializeByValueID(errorId);\n            task = encodeReferenceChunk(request, task.id, errorId);\n            request.completedErrorChunks.push(task);\n        }\n    }\n    function flushCompletedChunks(request) {\n        if (null !== request.debugDestination) {\n            var debugDestination = request.debugDestination;\n            currentView = new Uint8Array(2048);\n            writtenBytes = 0;\n            try {\n                for(var debugChunks = request.completedDebugChunks, i = 0; i < debugChunks.length; i++)request.pendingDebugChunks--, writeChunkAndReturn(debugDestination, debugChunks[i]);\n                debugChunks.splice(0, i);\n            } finally{\n                completeWriting(debugDestination);\n            }\n        }\n        debugDestination = request.destination;\n        if (null !== debugDestination) {\n            currentView = new Uint8Array(2048);\n            writtenBytes = 0;\n            try {\n                var importsChunks = request.completedImportChunks;\n                for(debugChunks = 0; debugChunks < importsChunks.length; debugChunks++)if (request.pendingChunks--, !writeChunkAndReturn(debugDestination, importsChunks[debugChunks])) {\n                    request.destination = null;\n                    debugChunks++;\n                    break;\n                }\n                importsChunks.splice(0, debugChunks);\n                var hintChunks = request.completedHintChunks;\n                for(debugChunks = 0; debugChunks < hintChunks.length; debugChunks++)if (!writeChunkAndReturn(debugDestination, hintChunks[debugChunks])) {\n                    request.destination = null;\n                    debugChunks++;\n                    break;\n                }\n                hintChunks.splice(0, debugChunks);\n                if (null === request.debugDestination) {\n                    var _debugChunks = request.completedDebugChunks;\n                    for(debugChunks = 0; debugChunks < _debugChunks.length; debugChunks++)if (request.pendingDebugChunks--, !writeChunkAndReturn(debugDestination, _debugChunks[debugChunks])) {\n                        request.destination = null;\n                        debugChunks++;\n                        break;\n                    }\n                    _debugChunks.splice(0, debugChunks);\n                }\n                var regularChunks = request.completedRegularChunks;\n                for(debugChunks = 0; debugChunks < regularChunks.length; debugChunks++)if (request.pendingChunks--, !writeChunkAndReturn(debugDestination, regularChunks[debugChunks])) {\n                    request.destination = null;\n                    debugChunks++;\n                    break;\n                }\n                regularChunks.splice(0, debugChunks);\n                var errorChunks = request.completedErrorChunks;\n                for(debugChunks = 0; debugChunks < errorChunks.length; debugChunks++)if (request.pendingChunks--, !writeChunkAndReturn(debugDestination, errorChunks[debugChunks])) {\n                    request.destination = null;\n                    debugChunks++;\n                    break;\n                }\n                errorChunks.splice(0, debugChunks);\n            } finally{\n                request.flushScheduled = !1, completeWriting(debugDestination);\n            }\n        }\n        0 === request.pendingChunks && (importsChunks = request.debugDestination, 0 === request.pendingDebugChunks ? (null !== importsChunks && (importsChunks.close(), request.debugDestination = null), request.status < ABORTING && request.cacheController.abort(Error(\"This render completed successfully. All cacheSignals are now aborted to allow clean up of any unused resources.\")), null !== request.destination && (request.status = CLOSED, request.destination.close(), request.destination = null), null !== request.debugDestination && (request.debugDestination.close(), request.debugDestination = null)) : null !== importsChunks && null !== request.destination && (request.status = CLOSED, request.destination.close(), request.destination = null));\n    }\n    function startWork(request) {\n        request.flushScheduled = null !== request.destination;\n        supportsRequestStorage ? scheduleMicrotask(function() {\n            requestStorage.run(request, performWork, request);\n        }) : scheduleMicrotask(function() {\n            return performWork(request);\n        });\n        setTimeout(function() {\n            10 === request.status && (request.status = 11);\n        }, 0);\n    }\n    function enqueueFlush(request) {\n        !1 !== request.flushScheduled || 0 !== request.pingedTasks.length || null === request.destination && null === request.debugDestination || (request.flushScheduled = !0, setTimeout(function() {\n            request.flushScheduled = !1;\n            flushCompletedChunks(request);\n        }, 0));\n    }\n    function callOnAllReadyIfReady(request) {\n        0 === request.abortableTasks.size && (request = request.onAllReady, request());\n    }\n    function startFlowing(request, destination) {\n        if (13 === request.status) request.status = CLOSED, closeWithError(destination, request.fatalError);\n        else if (request.status !== CLOSED && null === request.destination) {\n            request.destination = destination;\n            try {\n                flushCompletedChunks(request);\n            } catch (error) {\n                logRecoverableError(request, error, null), fatalError(request, error);\n            }\n        }\n    }\n    function finishAbort(request, abortedTasks, errorId) {\n        try {\n            abortedTasks.forEach(function(task) {\n                return finishAbortedTask(task, request, errorId);\n            });\n            var onAllReady = request.onAllReady;\n            onAllReady();\n            flushCompletedChunks(request);\n        } catch (error) {\n            logRecoverableError(request, error, null), fatalError(request, error);\n        }\n    }\n    function abort(request, reason) {\n        if (!(11 < request.status)) try {\n            request.status = ABORTING;\n            request.abortTime = performance.now();\n            request.cacheController.abort(reason);\n            var abortableTasks = request.abortableTasks;\n            if (0 < abortableTasks.size) {\n                var error = void 0 === reason ? Error(\"The render was aborted by the server without a reason.\") : \"object\" === typeof reason && null !== reason && \"function\" === typeof reason.then ? Error(\"The render was aborted by the server with a promise.\") : reason, digest = logRecoverableError(request, error, null), _errorId2 = request.nextChunkId++;\n                request.fatalError = _errorId2;\n                request.pendingChunks++;\n                emitErrorChunk(request, _errorId2, digest, error, !1);\n                abortableTasks.forEach(function(task) {\n                    return abortTask(task, request, _errorId2);\n                });\n                setTimeout(function() {\n                    return finishAbort(request, abortableTasks, _errorId2);\n                }, 0);\n            } else {\n                var onAllReady = request.onAllReady;\n                onAllReady();\n                flushCompletedChunks(request);\n            }\n        } catch (error$2) {\n            logRecoverableError(request, error$2, null), fatalError(request, error$2);\n        }\n    }\n    function fromHex(str) {\n        return parseInt(str, 16);\n    }\n    function closeDebugChannel(request) {\n        var deferredDebugObjects = request.deferredDebugObjects;\n        if (null === deferredDebugObjects) throw Error(\"resolveDebugMessage/closeDebugChannel should not be called for a Request that wasn't kept alive. This is a bug in React.\");\n        deferredDebugObjects.retained.forEach(function(value, id) {\n            request.pendingDebugChunks--;\n            deferredDebugObjects.retained.delete(id);\n            deferredDebugObjects.existing.delete(value);\n        });\n        enqueueFlush(request);\n    }\n    function resolveServerReference(bundlerConfig, id) {\n        var name = \"\", resolvedModuleData = bundlerConfig[id];\n        if (resolvedModuleData) name = resolvedModuleData.name;\n        else {\n            var idx = id.lastIndexOf(\"#\");\n            -1 !== idx && (name = id.slice(idx + 1), resolvedModuleData = bundlerConfig[id.slice(0, idx)]);\n            if (!resolvedModuleData) throw Error('Could not find the module \"' + id + '\" in the React Server Manifest. This is probably a bug in the React Server Components bundler.');\n        }\n        return resolvedModuleData.async ? [\n            resolvedModuleData.id,\n            resolvedModuleData.chunks,\n            name,\n            1\n        ] : [\n            resolvedModuleData.id,\n            resolvedModuleData.chunks,\n            name\n        ];\n    }\n    function requireAsyncModule(id) {\n        var promise = globalThis.__next_require__(id);\n        if (\"function\" !== typeof promise.then || \"fulfilled\" === promise.status) return null;\n        promise.then(function(value) {\n            promise.status = \"fulfilled\";\n            promise.value = value;\n        }, function(reason) {\n            promise.status = \"rejected\";\n            promise.reason = reason;\n        });\n        return promise;\n    }\n    function ignoreReject() {}\n    function preloadModule(metadata) {\n        for(var chunks = metadata[1], promises = [], i = 0; i < chunks.length;){\n            var chunkId = chunks[i++];\n            chunks[i++];\n            var entry = chunkCache.get(chunkId);\n            if (void 0 === entry) {\n                entry = __webpack_require__.e(chunkId);\n                promises.push(entry);\n                var resolve = chunkCache.set.bind(chunkCache, chunkId, null);\n                entry.then(resolve, ignoreReject);\n                chunkCache.set(chunkId, entry);\n            } else null !== entry && promises.push(entry);\n        }\n        return 4 === metadata.length ? 0 === promises.length ? requireAsyncModule(metadata[0]) : Promise.all(promises).then(function() {\n            return requireAsyncModule(metadata[0]);\n        }) : 0 < promises.length ? Promise.all(promises) : null;\n    }\n    function requireModule(metadata) {\n        var moduleExports = globalThis.__next_require__(metadata[0]);\n        if (4 === metadata.length && \"function\" === typeof moduleExports.then) if (\"fulfilled\" === moduleExports.status) moduleExports = moduleExports.value;\n        else throw moduleExports.reason;\n        return \"*\" === metadata[2] ? moduleExports : \"\" === metadata[2] ? moduleExports.__esModule ? moduleExports.default : moduleExports : moduleExports[metadata[2]];\n    }\n    function Chunk(status, value, reason, response) {\n        this.status = status;\n        this.value = value;\n        this.reason = reason;\n        this._response = response;\n    }\n    function createPendingChunk(response) {\n        return new Chunk(\"pending\", null, null, response);\n    }\n    function wakeChunk(listeners, value) {\n        for(var i = 0; i < listeners.length; i++)(0, listeners[i])(value);\n    }\n    function triggerErrorOnChunk(chunk, error) {\n        if (\"pending\" !== chunk.status && \"blocked\" !== chunk.status) chunk.reason.error(error);\n        else {\n            var listeners = chunk.reason;\n            chunk.status = \"rejected\";\n            chunk.reason = error;\n            null !== listeners && wakeChunk(listeners, error);\n        }\n    }\n    function resolveModelChunk(chunk, value, id) {\n        if (\"pending\" !== chunk.status) chunk = chunk.reason, \"C\" === value[0] ? chunk.close(\"C\" === value ? '\"$undefined\"' : value.slice(1)) : chunk.enqueueModel(value);\n        else {\n            var resolveListeners = chunk.value, rejectListeners = chunk.reason;\n            chunk.status = \"resolved_model\";\n            chunk.value = value;\n            chunk.reason = id;\n            if (null !== resolveListeners) switch(initializeModelChunk(chunk), chunk.status){\n                case \"fulfilled\":\n                    wakeChunk(resolveListeners, chunk.value);\n                    break;\n                case \"pending\":\n                case \"blocked\":\n                case \"cyclic\":\n                    if (chunk.value) for(value = 0; value < resolveListeners.length; value++)chunk.value.push(resolveListeners[value]);\n                    else chunk.value = resolveListeners;\n                    if (chunk.reason) {\n                        if (rejectListeners) for(value = 0; value < rejectListeners.length; value++)chunk.reason.push(rejectListeners[value]);\n                    } else chunk.reason = rejectListeners;\n                    break;\n                case \"rejected\":\n                    rejectListeners && wakeChunk(rejectListeners, chunk.reason);\n            }\n        }\n    }\n    function createResolvedIteratorResultChunk(response, value, done) {\n        return new Chunk(\"resolved_model\", (done ? '{\"done\":true,\"value\":' : '{\"done\":false,\"value\":') + value + \"}\", -1, response);\n    }\n    function resolveIteratorResultChunk(chunk, value, done) {\n        resolveModelChunk(chunk, (done ? '{\"done\":true,\"value\":' : '{\"done\":false,\"value\":') + value + \"}\", -1);\n    }\n    function loadServerReference$1(response, id, bound, parentChunk, parentObject, key) {\n        var serverReference = resolveServerReference(response._bundlerConfig, id);\n        id = preloadModule(serverReference);\n        if (bound) bound = Promise.all([\n            bound,\n            id\n        ]).then(function(_ref) {\n            _ref = _ref[0];\n            var fn = requireModule(serverReference);\n            return fn.bind.apply(fn, [\n                null\n            ].concat(_ref));\n        });\n        else if (id) bound = Promise.resolve(id).then(function() {\n            return requireModule(serverReference);\n        });\n        else return requireModule(serverReference);\n        bound.then(createModelResolver(parentChunk, parentObject, key, !1, response, createModel, []), createModelReject(parentChunk));\n        return null;\n    }\n    function reviveModel(response, parentObj, parentKey, value, reference) {\n        if (\"string\" === typeof value) return parseModelString(response, parentObj, parentKey, value, reference);\n        if (\"object\" === typeof value && null !== value) if (void 0 !== reference && void 0 !== response._temporaryReferences && response._temporaryReferences.set(value, reference), Array.isArray(value)) for(var i = 0; i < value.length; i++)value[i] = reviveModel(response, value, \"\" + i, value[i], void 0 !== reference ? reference + \":\" + i : void 0);\n        else for(i in value)hasOwnProperty.call(value, i) && (parentObj = void 0 !== reference && -1 === i.indexOf(\":\") ? reference + \":\" + i : void 0, parentObj = reviveModel(response, value, i, value[i], parentObj), void 0 !== parentObj ? value[i] = parentObj : delete value[i]);\n        return value;\n    }\n    function initializeModelChunk(chunk) {\n        var prevChunk = initializingChunk, prevBlocked = initializingChunkBlockedModel;\n        initializingChunk = chunk;\n        initializingChunkBlockedModel = null;\n        var rootReference = -1 === chunk.reason ? void 0 : chunk.reason.toString(16), resolvedModel = chunk.value;\n        chunk.status = \"cyclic\";\n        chunk.value = null;\n        chunk.reason = null;\n        try {\n            var rawModel = JSON.parse(resolvedModel), value = reviveModel(chunk._response, {\n                \"\": rawModel\n            }, \"\", rawModel, rootReference);\n            if (null !== initializingChunkBlockedModel && 0 < initializingChunkBlockedModel.deps) initializingChunkBlockedModel.value = value, chunk.status = \"blocked\";\n            else {\n                var resolveListeners = chunk.value;\n                chunk.status = \"fulfilled\";\n                chunk.value = value;\n                null !== resolveListeners && wakeChunk(resolveListeners, value);\n            }\n        } catch (error) {\n            chunk.status = \"rejected\", chunk.reason = error;\n        } finally{\n            initializingChunk = prevChunk, initializingChunkBlockedModel = prevBlocked;\n        }\n    }\n    function reportGlobalError(response, error) {\n        response._closed = !0;\n        response._closedReason = error;\n        response._chunks.forEach(function(chunk) {\n            \"pending\" === chunk.status && triggerErrorOnChunk(chunk, error);\n        });\n    }\n    function getChunk(response, id) {\n        var chunks = response._chunks, chunk = chunks.get(id);\n        chunk || (chunk = response._formData.get(response._prefix + id), chunk = null != chunk ? new Chunk(\"resolved_model\", chunk, id, response) : response._closed ? new Chunk(\"rejected\", null, response._closedReason, response) : createPendingChunk(response), chunks.set(id, chunk));\n        return chunk;\n    }\n    function createModelResolver(chunk, parentObject, key, cyclic, response, map, path) {\n        if (initializingChunkBlockedModel) {\n            var blocked = initializingChunkBlockedModel;\n            cyclic || blocked.deps++;\n        } else blocked = initializingChunkBlockedModel = {\n            deps: cyclic ? 0 : 1,\n            value: null\n        };\n        return function(value) {\n            for(var i = 1; i < path.length; i++)value = value[path[i]];\n            parentObject[key] = map(response, value);\n            \"\" === key && null === blocked.value && (blocked.value = parentObject[key]);\n            blocked.deps--;\n            0 === blocked.deps && \"blocked\" === chunk.status && (value = chunk.value, chunk.status = \"fulfilled\", chunk.value = blocked.value, null !== value && wakeChunk(value, blocked.value));\n        };\n    }\n    function createModelReject(chunk) {\n        return function(error) {\n            return triggerErrorOnChunk(chunk, error);\n        };\n    }\n    function getOutlinedModel(response, reference, parentObject, key, map) {\n        reference = reference.split(\":\");\n        var id = parseInt(reference[0], 16);\n        id = getChunk(response, id);\n        switch(id.status){\n            case \"resolved_model\":\n                initializeModelChunk(id);\n        }\n        switch(id.status){\n            case \"fulfilled\":\n                parentObject = id.value;\n                for(key = 1; key < reference.length; key++)parentObject = parentObject[reference[key]];\n                return map(response, parentObject);\n            case \"pending\":\n            case \"blocked\":\n            case \"cyclic\":\n                var parentChunk = initializingChunk;\n                id.then(createModelResolver(parentChunk, parentObject, key, \"cyclic\" === id.status, response, map, reference), createModelReject(parentChunk));\n                return null;\n            default:\n                throw id.reason;\n        }\n    }\n    function createMap(response, model) {\n        return new Map(model);\n    }\n    function createSet(response, model) {\n        return new Set(model);\n    }\n    function extractIterator(response, model) {\n        return model[Symbol.iterator]();\n    }\n    function createModel(response, model) {\n        return model;\n    }\n    function parseTypedArray(response, reference, constructor, bytesPerElement, parentObject, parentKey) {\n        reference = parseInt(reference.slice(2), 16);\n        reference = response._formData.get(response._prefix + reference);\n        reference = constructor === ArrayBuffer ? reference.arrayBuffer() : reference.arrayBuffer().then(function(buffer) {\n            return new constructor(buffer);\n        });\n        bytesPerElement = initializingChunk;\n        reference.then(createModelResolver(bytesPerElement, parentObject, parentKey, !1, response, createModel, []), createModelReject(bytesPerElement));\n        return null;\n    }\n    function resolveStream(response, id, stream, controller) {\n        var chunks = response._chunks;\n        stream = new Chunk(\"fulfilled\", stream, controller, response);\n        chunks.set(id, stream);\n        response = response._formData.getAll(response._prefix + id);\n        for(id = 0; id < response.length; id++)chunks = response[id], \"C\" === chunks[0] ? controller.close(\"C\" === chunks ? '\"$undefined\"' : chunks.slice(1)) : controller.enqueueModel(chunks);\n    }\n    function parseReadableStream(response, reference, type) {\n        reference = parseInt(reference.slice(2), 16);\n        var controller = null;\n        type = new ReadableStream({\n            type: type,\n            start: function(c) {\n                controller = c;\n            }\n        });\n        var previousBlockedChunk = null;\n        resolveStream(response, reference, type, {\n            enqueueModel: function(json) {\n                if (null === previousBlockedChunk) {\n                    var chunk = new Chunk(\"resolved_model\", json, -1, response);\n                    initializeModelChunk(chunk);\n                    \"fulfilled\" === chunk.status ? controller.enqueue(chunk.value) : (chunk.then(function(v) {\n                        return controller.enqueue(v);\n                    }, function(e) {\n                        return controller.error(e);\n                    }), previousBlockedChunk = chunk);\n                } else {\n                    chunk = previousBlockedChunk;\n                    var _chunk = createPendingChunk(response);\n                    _chunk.then(function(v) {\n                        return controller.enqueue(v);\n                    }, function(e) {\n                        return controller.error(e);\n                    });\n                    previousBlockedChunk = _chunk;\n                    chunk.then(function() {\n                        previousBlockedChunk === _chunk && (previousBlockedChunk = null);\n                        resolveModelChunk(_chunk, json, -1);\n                    });\n                }\n            },\n            close: function() {\n                if (null === previousBlockedChunk) controller.close();\n                else {\n                    var blockedChunk = previousBlockedChunk;\n                    previousBlockedChunk = null;\n                    blockedChunk.then(function() {\n                        return controller.close();\n                    });\n                }\n            },\n            error: function(error) {\n                if (null === previousBlockedChunk) controller.error(error);\n                else {\n                    var blockedChunk = previousBlockedChunk;\n                    previousBlockedChunk = null;\n                    blockedChunk.then(function() {\n                        return controller.error(error);\n                    });\n                }\n            }\n        });\n        return type;\n    }\n    function asyncIterator() {\n        return this;\n    }\n    function createIterator(next) {\n        next = {\n            next: next\n        };\n        next[ASYNC_ITERATOR] = asyncIterator;\n        return next;\n    }\n    function parseAsyncIterable(response, reference, iterator) {\n        reference = parseInt(reference.slice(2), 16);\n        var buffer = [], closed = !1, nextWriteIndex = 0, iterable = _defineProperty({}, ASYNC_ITERATOR, function() {\n            var nextReadIndex = 0;\n            return createIterator(function(arg) {\n                if (void 0 !== arg) throw Error(\"Values cannot be passed to next() of AsyncIterables passed to Client Components.\");\n                if (nextReadIndex === buffer.length) {\n                    if (closed) return new Chunk(\"fulfilled\", {\n                        done: !0,\n                        value: void 0\n                    }, null, response);\n                    buffer[nextReadIndex] = createPendingChunk(response);\n                }\n                return buffer[nextReadIndex++];\n            });\n        });\n        iterator = iterator ? iterable[ASYNC_ITERATOR]() : iterable;\n        resolveStream(response, reference, iterator, {\n            enqueueModel: function(value) {\n                nextWriteIndex === buffer.length ? buffer[nextWriteIndex] = createResolvedIteratorResultChunk(response, value, !1) : resolveIteratorResultChunk(buffer[nextWriteIndex], value, !1);\n                nextWriteIndex++;\n            },\n            close: function(value) {\n                closed = !0;\n                nextWriteIndex === buffer.length ? buffer[nextWriteIndex] = createResolvedIteratorResultChunk(response, value, !0) : resolveIteratorResultChunk(buffer[nextWriteIndex], value, !0);\n                for(nextWriteIndex++; nextWriteIndex < buffer.length;)resolveIteratorResultChunk(buffer[nextWriteIndex++], '\"$undefined\"', !0);\n            },\n            error: function(error) {\n                closed = !0;\n                for(nextWriteIndex === buffer.length && (buffer[nextWriteIndex] = createPendingChunk(response)); nextWriteIndex < buffer.length;)triggerErrorOnChunk(buffer[nextWriteIndex++], error);\n            }\n        });\n        return iterator;\n    }\n    function parseModelString(response, obj, key, value, reference) {\n        if (\"$\" === value[0]) {\n            switch(value[1]){\n                case \"$\":\n                    return value.slice(1);\n                case \"@\":\n                    return obj = parseInt(value.slice(2), 16), getChunk(response, obj);\n                case \"F\":\n                    return value = value.slice(2), value = getOutlinedModel(response, value, obj, key, createModel), loadServerReference$1(response, value.id, value.bound, initializingChunk, obj, key);\n                case \"T\":\n                    if (void 0 === reference || void 0 === response._temporaryReferences) throw Error(\"Could not reference an opaque temporary reference. This is likely due to misconfiguring the temporaryReferences options on the server.\");\n                    return createTemporaryReference(response._temporaryReferences, reference);\n                case \"Q\":\n                    return value = value.slice(2), getOutlinedModel(response, value, obj, key, createMap);\n                case \"W\":\n                    return value = value.slice(2), getOutlinedModel(response, value, obj, key, createSet);\n                case \"K\":\n                    obj = value.slice(2);\n                    var formPrefix = response._prefix + obj + \"_\", data = new FormData();\n                    response._formData.forEach(function(entry, entryKey) {\n                        entryKey.startsWith(formPrefix) && data.append(entryKey.slice(formPrefix.length), entry);\n                    });\n                    return data;\n                case \"i\":\n                    return value = value.slice(2), getOutlinedModel(response, value, obj, key, extractIterator);\n                case \"I\":\n                    return Infinity;\n                case \"-\":\n                    return \"$-0\" === value ? -0 : -Infinity;\n                case \"N\":\n                    return NaN;\n                case \"u\":\n                    return;\n                case \"D\":\n                    return new Date(Date.parse(value.slice(2)));\n                case \"n\":\n                    return BigInt(value.slice(2));\n            }\n            switch(value[1]){\n                case \"A\":\n                    return parseTypedArray(response, value, ArrayBuffer, 1, obj, key);\n                case \"O\":\n                    return parseTypedArray(response, value, Int8Array, 1, obj, key);\n                case \"o\":\n                    return parseTypedArray(response, value, Uint8Array, 1, obj, key);\n                case \"U\":\n                    return parseTypedArray(response, value, Uint8ClampedArray, 1, obj, key);\n                case \"S\":\n                    return parseTypedArray(response, value, Int16Array, 2, obj, key);\n                case \"s\":\n                    return parseTypedArray(response, value, Uint16Array, 2, obj, key);\n                case \"L\":\n                    return parseTypedArray(response, value, Int32Array, 4, obj, key);\n                case \"l\":\n                    return parseTypedArray(response, value, Uint32Array, 4, obj, key);\n                case \"G\":\n                    return parseTypedArray(response, value, Float32Array, 4, obj, key);\n                case \"g\":\n                    return parseTypedArray(response, value, Float64Array, 8, obj, key);\n                case \"M\":\n                    return parseTypedArray(response, value, BigInt64Array, 8, obj, key);\n                case \"m\":\n                    return parseTypedArray(response, value, BigUint64Array, 8, obj, key);\n                case \"V\":\n                    return parseTypedArray(response, value, DataView, 1, obj, key);\n                case \"B\":\n                    return obj = parseInt(value.slice(2), 16), response._formData.get(response._prefix + obj);\n            }\n            switch(value[1]){\n                case \"R\":\n                    return parseReadableStream(response, value, void 0);\n                case \"r\":\n                    return parseReadableStream(response, value, \"bytes\");\n                case \"X\":\n                    return parseAsyncIterable(response, value, !1);\n                case \"x\":\n                    return parseAsyncIterable(response, value, !0);\n            }\n            value = value.slice(1);\n            return getOutlinedModel(response, value, obj, key, createModel);\n        }\n        return value;\n    }\n    function createResponse(bundlerConfig, formFieldPrefix, temporaryReferences) {\n        var backingFormData = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : new FormData(), chunks = new Map();\n        return {\n            _bundlerConfig: bundlerConfig,\n            _prefix: formFieldPrefix,\n            _formData: backingFormData,\n            _chunks: chunks,\n            _closed: !1,\n            _closedReason: null,\n            _temporaryReferences: temporaryReferences\n        };\n    }\n    function close(response) {\n        reportGlobalError(response, Error(\"Connection closed.\"));\n    }\n    function loadServerReference(bundlerConfig, id, bound) {\n        var serverReference = resolveServerReference(bundlerConfig, id);\n        bundlerConfig = preloadModule(serverReference);\n        return bound ? Promise.all([\n            bound,\n            bundlerConfig\n        ]).then(function(_ref) {\n            _ref = _ref[0];\n            var fn = requireModule(serverReference);\n            return fn.bind.apply(fn, [\n                null\n            ].concat(_ref));\n        }) : bundlerConfig ? Promise.resolve(bundlerConfig).then(function() {\n            return requireModule(serverReference);\n        }) : Promise.resolve(requireModule(serverReference));\n    }\n    function decodeBoundActionMetaData(body, serverManifest, formFieldPrefix) {\n        body = createResponse(serverManifest, formFieldPrefix, void 0, body);\n        close(body);\n        body = getChunk(body, 0);\n        body.then(function() {});\n        if (\"fulfilled\" !== body.status) throw body.reason;\n        return body.value;\n    }\n    function startReadingFromDebugChannelReadableStream(request$jscomp$0, stream) {\n        function progress(_ref) {\n            var done = _ref.done, buffer = _ref.value;\n            _ref = stringBuffer;\n            done ? (buffer = new Uint8Array(0), buffer = stringDecoder.decode(buffer)) : buffer = stringDecoder.decode(buffer, decoderOptions);\n            stringBuffer = _ref + buffer;\n            _ref = stringBuffer.split(\"\\n\");\n            for(buffer = 0; buffer < _ref.length - 1; buffer++){\n                var request = request$jscomp$0, message = _ref[buffer], deferredDebugObjects = request.deferredDebugObjects;\n                if (null === deferredDebugObjects) throw Error(\"resolveDebugMessage/closeDebugChannel should not be called for a Request that wasn't kept alive. This is a bug in React.\");\n                if (\"\" === message) closeDebugChannel(request);\n                else {\n                    var command = message.charCodeAt(0);\n                    message = message.slice(2).split(\",\").map(fromHex);\n                    switch(command){\n                        case 82:\n                            for(command = 0; command < message.length; command++){\n                                var id = message[command], retainedValue = deferredDebugObjects.retained.get(id);\n                                void 0 !== retainedValue && (request.pendingDebugChunks--, deferredDebugObjects.retained.delete(id), deferredDebugObjects.existing.delete(retainedValue), enqueueFlush(request));\n                            }\n                            break;\n                        case 81:\n                            for(command = 0; command < message.length; command++)id = message[command], retainedValue = deferredDebugObjects.retained.get(id), void 0 !== retainedValue && (deferredDebugObjects.retained.delete(id), deferredDebugObjects.existing.delete(retainedValue), emitOutlinedDebugModelChunk(request, id, {\n                                objectLimit: 10\n                            }, retainedValue), enqueueFlush(request));\n                            break;\n                        case 80:\n                            for(command = 0; command < message.length; command++)id = message[command], retainedValue = deferredDebugObjects.retained.get(id), void 0 !== retainedValue && (deferredDebugObjects.retained.delete(id), emitRequestedDebugThenable(request, id, {\n                                objectLimit: 10\n                            }, retainedValue));\n                            break;\n                        default:\n                            throw Error(\"Unknown command. The debugChannel was not wired up properly.\");\n                    }\n                }\n            }\n            stringBuffer = _ref[_ref.length - 1];\n            if (done) closeDebugChannel(request$jscomp$0);\n            else return reader.read().then(progress).catch(error);\n        }\n        function error(e) {\n            abort(request$jscomp$0, Error(\"Lost connection to the Debug Channel.\", {\n                cause: e\n            }));\n        }\n        var reader = stream.getReader(), stringDecoder = new TextDecoder(), stringBuffer = \"\";\n        reader.read().then(progress).catch(error);\n    }\n    var ReactDOM = __webpack_require__(/*! react-dom */ \"(middleware)/./node_modules/next/dist/compiled/react-dom/react-dom.react-server.js\"), React = __webpack_require__(/*! react */ \"(middleware)/./node_modules/next/dist/compiled/react/react.react-server.js\"), REACT_LEGACY_ELEMENT_TYPE = Symbol.for(\"react.element\"), REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"), REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"), REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"), REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"), REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"), REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"), REACT_MEMO_TYPE = Symbol.for(\"react.memo\"), REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"), REACT_MEMO_CACHE_SENTINEL = Symbol.for(\"react.memo_cache_sentinel\");\n    Symbol.for(\"react.postpone\");\n    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator, ASYNC_ITERATOR = Symbol.asyncIterator, LocalPromise = Promise, scheduleMicrotask = \"function\" === typeof queueMicrotask ? queueMicrotask : function(callback) {\n        LocalPromise.resolve(null).then(callback).catch(handleErrorInNextTick);\n    }, currentView = null, writtenBytes = 0, textEncoder = new TextEncoder(), CLIENT_REFERENCE_TAG$1 = Symbol.for(\"react.client.reference\"), SERVER_REFERENCE_TAG = Symbol.for(\"react.server.reference\"), FunctionBind = Function.prototype.bind, ArraySlice = Array.prototype.slice, PROMISE_PROTOTYPE = Promise.prototype, deepProxyHandlers = {\n        get: function(target, name) {\n            switch(name){\n                case \"$$typeof\":\n                    return target.$$typeof;\n                case \"$$id\":\n                    return target.$$id;\n                case \"$$async\":\n                    return target.$$async;\n                case \"name\":\n                    return target.name;\n                case \"displayName\":\n                    return;\n                case \"defaultProps\":\n                    return;\n                case \"_debugInfo\":\n                    return;\n                case \"toJSON\":\n                    return;\n                case Symbol.toPrimitive:\n                    return Object.prototype[Symbol.toPrimitive];\n                case Symbol.toStringTag:\n                    return Object.prototype[Symbol.toStringTag];\n                case \"Provider\":\n                    throw Error(\"Cannot render a Client Context Provider on the Server. Instead, you can export a Client Component wrapper that itself renders a Client Context Provider.\");\n                case \"then\":\n                    throw Error(\"Cannot await or return from a thenable. You cannot await a client module from a server component.\");\n            }\n            throw Error(\"Cannot access \" + (String(target.name) + \".\" + String(name)) + \" on the server. You cannot dot into a client module from a server component. You can only pass the imported name through.\");\n        },\n        set: function() {\n            throw Error(\"Cannot assign to a client module from a server module.\");\n        }\n    }, proxyHandlers$1 = {\n        get: function(target, name) {\n            return getReference(target, name);\n        },\n        getOwnPropertyDescriptor: function(target, name) {\n            var descriptor = Object.getOwnPropertyDescriptor(target, name);\n            descriptor || (descriptor = {\n                value: getReference(target, name),\n                writable: !1,\n                configurable: !1,\n                enumerable: !1\n            }, Object.defineProperty(target, name, descriptor));\n            return descriptor;\n        },\n        getPrototypeOf: function() {\n            return PROMISE_PROTOTYPE;\n        },\n        set: function() {\n            throw Error(\"Cannot assign to a client module from a server module.\");\n        }\n    }, ReactDOMSharedInternals = ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, previousDispatcher = ReactDOMSharedInternals.d;\n    ReactDOMSharedInternals.d = {\n        f: previousDispatcher.f,\n        r: previousDispatcher.r,\n        D: function(href) {\n            if (\"string\" === typeof href && href) {\n                var request = resolveRequest();\n                if (request) {\n                    var hints = request.hints, key = \"D|\" + href;\n                    hints.has(key) || (hints.add(key), emitHint(request, \"D\", href));\n                } else previousDispatcher.D(href);\n            }\n        },\n        C: function(href, crossOrigin) {\n            if (\"string\" === typeof href) {\n                var request = resolveRequest();\n                if (request) {\n                    var hints = request.hints, key = \"C|\" + (null == crossOrigin ? \"null\" : crossOrigin) + \"|\" + href;\n                    hints.has(key) || (hints.add(key), \"string\" === typeof crossOrigin ? emitHint(request, \"C\", [\n                        href,\n                        crossOrigin\n                    ]) : emitHint(request, \"C\", href));\n                } else previousDispatcher.C(href, crossOrigin);\n            }\n        },\n        L: function(href, as, options) {\n            if (\"string\" === typeof href) {\n                var request = resolveRequest();\n                if (request) {\n                    var hints = request.hints, key = \"L\";\n                    if (\"image\" === as && options) {\n                        var imageSrcSet = options.imageSrcSet, imageSizes = options.imageSizes, uniquePart = \"\";\n                        \"string\" === typeof imageSrcSet && \"\" !== imageSrcSet ? (uniquePart += \"[\" + imageSrcSet + \"]\", \"string\" === typeof imageSizes && (uniquePart += \"[\" + imageSizes + \"]\")) : uniquePart += \"[][]\" + href;\n                        key += \"[image]\" + uniquePart;\n                    } else key += \"[\" + as + \"]\" + href;\n                    hints.has(key) || (hints.add(key), (options = trimOptions(options)) ? emitHint(request, \"L\", [\n                        href,\n                        as,\n                        options\n                    ]) : emitHint(request, \"L\", [\n                        href,\n                        as\n                    ]));\n                } else previousDispatcher.L(href, as, options);\n            }\n        },\n        m: function(href, options) {\n            if (\"string\" === typeof href) {\n                var request = resolveRequest();\n                if (request) {\n                    var hints = request.hints, key = \"m|\" + href;\n                    if (hints.has(key)) return;\n                    hints.add(key);\n                    return (options = trimOptions(options)) ? emitHint(request, \"m\", [\n                        href,\n                        options\n                    ]) : emitHint(request, \"m\", href);\n                }\n                previousDispatcher.m(href, options);\n            }\n        },\n        X: function(src, options) {\n            if (\"string\" === typeof src) {\n                var request = resolveRequest();\n                if (request) {\n                    var hints = request.hints, key = \"X|\" + src;\n                    if (hints.has(key)) return;\n                    hints.add(key);\n                    return (options = trimOptions(options)) ? emitHint(request, \"X\", [\n                        src,\n                        options\n                    ]) : emitHint(request, \"X\", src);\n                }\n                previousDispatcher.X(src, options);\n            }\n        },\n        S: function(href, precedence, options) {\n            if (\"string\" === typeof href) {\n                var request = resolveRequest();\n                if (request) {\n                    var hints = request.hints, key = \"S|\" + href;\n                    if (hints.has(key)) return;\n                    hints.add(key);\n                    return (options = trimOptions(options)) ? emitHint(request, \"S\", [\n                        href,\n                        \"string\" === typeof precedence ? precedence : 0,\n                        options\n                    ]) : \"string\" === typeof precedence ? emitHint(request, \"S\", [\n                        href,\n                        precedence\n                    ]) : emitHint(request, \"S\", href);\n                }\n                previousDispatcher.S(href, precedence, options);\n            }\n        },\n        M: function(src, options) {\n            if (\"string\" === typeof src) {\n                var request = resolveRequest();\n                if (request) {\n                    var hints = request.hints, key = \"M|\" + src;\n                    if (hints.has(key)) return;\n                    hints.add(key);\n                    return (options = trimOptions(options)) ? emitHint(request, \"M\", [\n                        src,\n                        options\n                    ]) : emitHint(request, \"M\", src);\n                }\n                previousDispatcher.M(src, options);\n            }\n        }\n    };\n    var framesToSkip = 0, collectedStackTrace = null, identifierRegExp = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/, frameRegExp = /^ {3} at (?:(.+) \\((?:(.+):(\\d+):(\\d+)|<anonymous>)\\)|(?:async )?(.+):(\\d+):(\\d+)|<anonymous>)$/, stackTraceCache = new WeakMap(), supportsRequestStorage = \"function\" === typeof AsyncLocalStorage, requestStorage = supportsRequestStorage ? new AsyncLocalStorage() : null, supportsComponentStorage = supportsRequestStorage, componentStorage = supportsComponentStorage ? new AsyncLocalStorage() : null, TEMPORARY_REFERENCE_TAG = Symbol.for(\"react.temporary.reference\"), proxyHandlers = {\n        get: function(target, name) {\n            switch(name){\n                case \"$$typeof\":\n                    return target.$$typeof;\n                case \"name\":\n                    return;\n                case \"displayName\":\n                    return;\n                case \"defaultProps\":\n                    return;\n                case \"_debugInfo\":\n                    return;\n                case \"toJSON\":\n                    return;\n                case Symbol.toPrimitive:\n                    return Object.prototype[Symbol.toPrimitive];\n                case Symbol.toStringTag:\n                    return Object.prototype[Symbol.toStringTag];\n                case \"Provider\":\n                    throw Error(\"Cannot render a Client Context Provider on the Server. Instead, you can export a Client Component wrapper that itself renders a Client Context Provider.\");\n                case \"then\":\n                    return;\n            }\n            throw Error(\"Cannot access \" + String(name) + \" on the server. You cannot dot into a temporary client reference from a server component. You can only pass the value through to the client.\");\n        },\n        set: function() {\n            throw Error(\"Cannot assign to a temporary client reference from a server module.\");\n        }\n    }, SuspenseException = Error(\"Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\\n\\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`.\"), suspendedThenable = null, currentRequest$1 = null, thenableIndexCounter = 0, thenableState = null, currentComponentDebugInfo = null, HooksDispatcher = {\n        readContext: unsupportedContext,\n        use: function(usable) {\n            if (null !== usable && \"object\" === typeof usable || \"function\" === typeof usable) {\n                if (\"function\" === typeof usable.then) {\n                    var index = thenableIndexCounter;\n                    thenableIndexCounter += 1;\n                    null === thenableState && (thenableState = []);\n                    return trackUsedThenable(thenableState, usable, index);\n                }\n                usable.$$typeof === REACT_CONTEXT_TYPE && unsupportedContext();\n            }\n            if (isClientReference(usable)) {\n                if (null != usable.value && usable.value.$$typeof === REACT_CONTEXT_TYPE) throw Error(\"Cannot read a Client Context from a Server Component.\");\n                throw Error(\"Cannot use() an already resolved Client Reference.\");\n            }\n            throw Error(\"An unsupported type was passed to use(): \" + String(usable));\n        },\n        useCallback: function(callback) {\n            return callback;\n        },\n        useContext: unsupportedContext,\n        useEffect: unsupportedHook,\n        useImperativeHandle: unsupportedHook,\n        useLayoutEffect: unsupportedHook,\n        useInsertionEffect: unsupportedHook,\n        useMemo: function(nextCreate) {\n            return nextCreate();\n        },\n        useReducer: unsupportedHook,\n        useRef: unsupportedHook,\n        useState: unsupportedHook,\n        useDebugValue: function() {},\n        useDeferredValue: unsupportedHook,\n        useTransition: unsupportedHook,\n        useSyncExternalStore: unsupportedHook,\n        useId: function() {\n            if (null === currentRequest$1) throw Error(\"useId can only be used while React is rendering\");\n            var id = currentRequest$1.identifierCount++;\n            return \"_\" + currentRequest$1.identifierPrefix + \"S_\" + id.toString(32) + \"_\";\n        },\n        useHostTransitionStatus: unsupportedHook,\n        useFormState: unsupportedHook,\n        useActionState: unsupportedHook,\n        useOptimistic: unsupportedHook,\n        useMemoCache: function(size) {\n            for(var data = Array(size), i = 0; i < size; i++)data[i] = REACT_MEMO_CACHE_SENTINEL;\n            return data;\n        },\n        useCacheRefresh: function() {\n            return unsupportedRefresh;\n        }\n    }, currentOwner = null, DefaultAsyncDispatcher = {\n        getCacheForType: function(resourceType) {\n            var cache = (cache = resolveRequest()) ? cache.cache : new Map();\n            var entry = cache.get(resourceType);\n            void 0 === entry && (entry = resourceType(), cache.set(resourceType, entry));\n            return entry;\n        },\n        cacheSignal: function() {\n            var request = resolveRequest();\n            return request ? request.cacheController.signal : null;\n        }\n    };\n    DefaultAsyncDispatcher.getOwner = resolveOwner;\n    var ReactSharedInternalsServer = React.__SERVER_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;\n    if (!ReactSharedInternalsServer) throw Error('The \"react\" package in this environment is not configured correctly. The \"react-server\" condition must be enabled in any environment that runs React Server Components.');\n    var prefix, suffix;\n    new (\"function\" === typeof WeakMap ? WeakMap : Map)();\n    var lastResetTime = 0;\n    if (\"object\" === typeof performance && \"function\" === typeof performance.now) {\n        var localPerformance = performance;\n        var getCurrentTime = function() {\n            return localPerformance.now();\n        };\n    } else {\n        var localDate = Date;\n        getCurrentTime = function() {\n            return localDate.now();\n        };\n    }\n    var callComponent = {\n        react_stack_bottom_frame: function(Component, props, componentDebugInfo) {\n            currentOwner = componentDebugInfo;\n            try {\n                return Component(props, void 0);\n            } finally{\n                currentOwner = null;\n            }\n        }\n    }, callComponentInDEV = callComponent.react_stack_bottom_frame.bind(callComponent), callLazyInit = {\n        react_stack_bottom_frame: function(lazy) {\n            var init = lazy._init;\n            return init(lazy._payload);\n        }\n    }, callLazyInitInDEV = callLazyInit.react_stack_bottom_frame.bind(callLazyInit), callIterator = {\n        react_stack_bottom_frame: function(iterator, progress, error) {\n            iterator.next().then(progress, error);\n        }\n    }, callIteratorInDEV = callIterator.react_stack_bottom_frame.bind(callIterator), isArrayImpl = Array.isArray, getPrototypeOf = Object.getPrototypeOf, jsxPropsParents = new WeakMap(), jsxChildrenParents = new WeakMap(), CLIENT_REFERENCE_TAG = Symbol.for(\"react.client.reference\"), hasOwnProperty = Object.prototype.hasOwnProperty, doNotLimit = new WeakSet();\n    \"object\" === typeof console && null !== console && (patchConsole(console, \"assert\"), patchConsole(console, \"debug\"), patchConsole(console, \"dir\"), patchConsole(console, \"dirxml\"), patchConsole(console, \"error\"), patchConsole(console, \"group\"), patchConsole(console, \"groupCollapsed\"), patchConsole(console, \"groupEnd\"), patchConsole(console, \"info\"), patchConsole(console, \"log\"), patchConsole(console, \"table\"), patchConsole(console, \"trace\"), patchConsole(console, \"warn\"));\n    var ObjectPrototype = Object.prototype, stringify = JSON.stringify, ABORTING = 12, CLOSED = 14, defaultPostponeHandler = noop, currentRequest = null, canEmitDebugInfo = !1, serializedSize = 0, MAX_ROW_SIZE = 3200, modelRoot = !1, CONSTRUCTOR_MARKER = Symbol(), debugModelRoot = null, debugNoOutline = null, emptyRoot = {}, decoderOptions = {\n        stream: !0\n    }, chunkCache = new Map();\n    Chunk.prototype = Object.create(Promise.prototype);\n    Chunk.prototype.then = function(resolve, reject) {\n        switch(this.status){\n            case \"resolved_model\":\n                initializeModelChunk(this);\n        }\n        switch(this.status){\n            case \"fulfilled\":\n                resolve(this.value);\n                break;\n            case \"pending\":\n            case \"blocked\":\n            case \"cyclic\":\n                resolve && (null === this.value && (this.value = []), this.value.push(resolve));\n                reject && (null === this.reason && (this.reason = []), this.reason.push(reject));\n                break;\n            default:\n                reject(this.reason);\n        }\n    };\n    var initializingChunk = null, initializingChunkBlockedModel = null;\n    exports.createClientModuleProxy = function(moduleId) {\n        moduleId = registerClientReferenceImpl({}, moduleId, !1);\n        return new Proxy(moduleId, proxyHandlers$1);\n    };\n    exports.createTemporaryReferenceSet = function() {\n        return new WeakMap();\n    };\n    exports.decodeAction = function(body, serverManifest) {\n        var formData = new FormData(), action = null;\n        body.forEach(function(value, key) {\n            key.startsWith(\"$ACTION_\") ? key.startsWith(\"$ACTION_REF_\") ? (value = \"$ACTION_\" + key.slice(12) + \":\", value = decodeBoundActionMetaData(body, serverManifest, value), action = loadServerReference(serverManifest, value.id, value.bound)) : key.startsWith(\"$ACTION_ID_\") && (value = key.slice(11), action = loadServerReference(serverManifest, value, null)) : formData.append(key, value);\n        });\n        return null === action ? null : action.then(function(fn) {\n            return fn.bind(null, formData);\n        });\n    };\n    exports.decodeFormState = function(actionResult, body, serverManifest) {\n        var keyPath = body.get(\"$ACTION_KEY\");\n        if (\"string\" !== typeof keyPath) return Promise.resolve(null);\n        var metaData = null;\n        body.forEach(function(value, key) {\n            key.startsWith(\"$ACTION_REF_\") && (value = \"$ACTION_\" + key.slice(12) + \":\", metaData = decodeBoundActionMetaData(body, serverManifest, value));\n        });\n        if (null === metaData) return Promise.resolve(null);\n        var referenceId = metaData.id;\n        return Promise.resolve(metaData.bound).then(function(bound) {\n            return null === bound ? null : [\n                actionResult,\n                keyPath,\n                referenceId,\n                bound.length - 1\n            ];\n        });\n    };\n    exports.decodeReply = function(body, webpackMap, options) {\n        if (\"string\" === typeof body) {\n            var form = new FormData();\n            form.append(\"0\", body);\n            body = form;\n        }\n        body = createResponse(webpackMap, \"\", options ? options.temporaryReferences : void 0, body);\n        webpackMap = getChunk(body, 0);\n        close(body);\n        return webpackMap;\n    };\n    exports.decodeReplyFromAsyncIterable = function(iterable, webpackMap, options) {\n        function progress(entry) {\n            if (entry.done) close(response$jscomp$0);\n            else {\n                entry = entry.value;\n                var name = entry[0];\n                entry = entry[1];\n                if (\"string\" === typeof entry) {\n                    var response = response$jscomp$0;\n                    response._formData.append(name, entry);\n                    var prefix = response._prefix;\n                    name.startsWith(prefix) && (response = response._chunks, name = +name.slice(prefix.length), (prefix = response.get(name)) && resolveModelChunk(prefix, entry, name));\n                } else response$jscomp$0._formData.append(name, entry);\n                iterator.next().then(progress, error);\n            }\n        }\n        function error(reason) {\n            reportGlobalError(response$jscomp$0, reason);\n            \"function\" === typeof iterator.throw && iterator.throw(reason).then(error, error);\n        }\n        var iterator = iterable[ASYNC_ITERATOR](), response$jscomp$0 = createResponse(webpackMap, \"\", options ? options.temporaryReferences : void 0);\n        iterator.next().then(progress, error);\n        return getChunk(response$jscomp$0, 0);\n    };\n    exports.registerClientReference = function(proxyImplementation, id, exportName) {\n        return registerClientReferenceImpl(proxyImplementation, id + \"#\" + exportName, !1);\n    };\n    exports.registerServerReference = function(reference, id, exportName) {\n        return Object.defineProperties(reference, {\n            $$typeof: {\n                value: SERVER_REFERENCE_TAG\n            },\n            $$id: {\n                value: null === exportName ? id : id + \"#\" + exportName,\n                configurable: !0\n            },\n            $$bound: {\n                value: null,\n                configurable: !0\n            },\n            $$location: {\n                value: Error(\"react-stack-top-frame\"),\n                configurable: !0\n            },\n            bind: {\n                value: bind,\n                configurable: !0\n            }\n        });\n    };\n    exports.renderToReadableStream = function(model, webpackMap, options) {\n        var debugChannelReadable = options && options.debugChannel ? options.debugChannel.readable : void 0, debugChannelWritable = options && options.debugChannel ? options.debugChannel.writable : void 0, request = createRequest(model, webpackMap, options ? options.onError : void 0, options ? options.identifierPrefix : void 0, options ? options.onPostpone : void 0, options ? options.temporaryReferences : void 0, options ? options.environmentName : void 0, options ? options.filterStackFrame : void 0, void 0 !== debugChannelReadable);\n        if (options && options.signal) {\n            var signal = options.signal;\n            if (signal.aborted) abort(request, signal.reason);\n            else {\n                var listener = function() {\n                    abort(request, signal.reason);\n                    signal.removeEventListener(\"abort\", listener);\n                };\n                signal.addEventListener(\"abort\", listener);\n            }\n        }\n        void 0 !== debugChannelWritable && new ReadableStream({\n            type: \"bytes\",\n            pull: function(controller) {\n                if (13 === request.status) request.status = CLOSED, closeWithError(controller, request.fatalError);\n                else if (request.status !== CLOSED && null === request.debugDestination) {\n                    request.debugDestination = controller;\n                    try {\n                        flushCompletedChunks(request);\n                    } catch (error) {\n                        logRecoverableError(request, error, null), fatalError(request, error);\n                    }\n                }\n            }\n        }, {\n            highWaterMark: 0\n        }).pipeTo(debugChannelWritable);\n        void 0 !== debugChannelReadable && startReadingFromDebugChannelReadableStream(request, debugChannelReadable);\n        return new ReadableStream({\n            type: \"bytes\",\n            start: function() {\n                startWork(request);\n            },\n            pull: function(controller) {\n                startFlowing(request, controller);\n            },\n            cancel: function(reason) {\n                request.destination = null;\n                abort(request, reason);\n            }\n        }, {\n            highWaterMark: 0\n        });\n    };\n    exports.unstable_prerender = function(model, webpackMap, options) {\n        return new Promise(function(resolve, reject) {\n            var request = createPrerenderRequest(model, webpackMap, function() {\n                var stream = new ReadableStream({\n                    type: \"bytes\",\n                    pull: function(controller) {\n                        startFlowing(request, controller);\n                    },\n                    cancel: function(reason) {\n                        request.destination = null;\n                        abort(request, reason);\n                    }\n                }, {\n                    highWaterMark: 0\n                });\n                resolve({\n                    prelude: stream\n                });\n            }, reject, options ? options.onError : void 0, options ? options.identifierPrefix : void 0, options ? options.onPostpone : void 0, options ? options.temporaryReferences : void 0, options ? options.environmentName : void 0, options ? options.filterStackFrame : void 0, !1);\n            if (options && options.signal) {\n                var signal = options.signal;\n                if (signal.aborted) abort(request, signal.reason);\n                else {\n                    var listener = function() {\n                        abort(request, signal.reason);\n                        signal.removeEventListener(\"abort\", listener);\n                    };\n                    signal.addEventListener(\"abort\", listener);\n                }\n            }\n            startWork(request);\n        });\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC1zZXJ2ZXItZG9tLXdlYnBhY2svY2pzL3JlYWN0LXNlcnZlci1kb20td2VicGFjay1zZXJ2ZXIuZWRnZS5kZXZlbG9wbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Q0FRQyxHQUVZO0FBQ2IsS0F5QzBCLElBeEN4QjtJQUNFLFNBQVNBLGVBQWU7SUFDeEIsU0FBU0MsY0FBY0MsYUFBYTtRQUNsQyxJQUFJLFNBQVNBLGlCQUFpQixhQUFhLE9BQU9BLGVBQ2hELE9BQU87UUFDVEEsZ0JBQ0UseUJBQTBCQSxhQUFhLENBQUNDLHNCQUFzQixJQUM5REQsYUFBYSxDQUFDLGFBQWE7UUFDN0IsT0FBTyxlQUFlLE9BQU9BLGdCQUFnQkEsZ0JBQWdCO0lBQy9EO0lBQ0EsU0FBU0UsZ0JBQWdCQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsS0FBSztRQUN0Q0MsR0FBRyxJQUFJLFlBQVksT0FBT0YsT0FBT0EsS0FBSztZQUNwQyxJQUFJRyxJQUFJSCxHQUFHLENBQUNJLE9BQU9DLFdBQVcsQ0FBQztZQUMvQixJQUFJLEtBQUssTUFBTUYsR0FBRztnQkFDaEJILE1BQU1HLEVBQUVHLElBQUksQ0FBQ04sS0FBSztnQkFDbEIsSUFBSSxZQUFZLE9BQU9BLEtBQUssTUFBTUU7Z0JBQ2xDLE1BQU0sSUFBSUssVUFBVTtZQUN0QjtZQUNBUCxNQUFNUSxPQUFPUjtRQUNmO1FBQ0FBLE1BQU0sWUFBWSxPQUFPQSxNQUFNQSxNQUFNQSxNQUFNO1FBQzNDQSxPQUFPRCxNQUNIVSxPQUFPQyxjQUFjLENBQUNYLEtBQUtDLEtBQUs7WUFDOUJDLE9BQU9BO1lBQ1BVLFlBQVksQ0FBQztZQUNiQyxjQUFjLENBQUM7WUFDZkMsVUFBVSxDQUFDO1FBQ2IsS0FDQ2QsR0FBRyxDQUFDQyxJQUFJLEdBQUdDO1FBQ2hCLE9BQU9GO0lBQ1Q7SUFDQSxTQUFTZSxzQkFBc0JDLEtBQUs7UUFDbENDLFdB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QVM2SCxPQUFPck0sTUFBTTtxQkFDM0M7b0JBQ0gsSUFBSWluQixXQUFXO3dCQUNieFEsTUFBTWpTLFNBQVM2SCxPQUFPck0sTUFBTTt3QkFDNUJxTSxPQUFPQyxtQkFBbUIsQ0FBQyxTQUFTMmE7b0JBQ3RDO29CQUNBNWEsT0FBT2EsZ0JBQWdCLENBQUMsU0FBUytaO2dCQUNuQztZQUNGO1lBQ0FyTixVQUFVcFY7UUFDWjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSFBcXERlc2t0b3BcXEJleW9uZF9jaGF0XFxjbGllbnRcXG5vZGVfbW9kdWxlc1xcbmV4dFxcZGlzdFxcY29tcGlsZWRcXHJlYWN0LXNlcnZlci1kb20td2VicGFja1xcY2pzXFxyZWFjdC1zZXJ2ZXItZG9tLXdlYnBhY2stc2VydmVyLmVkZ2UuZGV2ZWxvcG1lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3Qtc2VydmVyLWRvbS13ZWJwYWNrLXNlcnZlci5lZGdlLmRldmVsb3BtZW50LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViAmJlxuICAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIHZvaWRIYW5kbGVyKCkge31cbiAgICBmdW5jdGlvbiBnZXRJdGVyYXRvckZuKG1heWJlSXRlcmFibGUpIHtcbiAgICAgIGlmIChudWxsID09PSBtYXliZUl0ZXJhYmxlIHx8IFwib2JqZWN0XCIgIT09IHR5cGVvZiBtYXliZUl0ZXJhYmxlKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIG1heWJlSXRlcmFibGUgPVxuICAgICAgICAoTUFZQkVfSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbTUFZQkVfSVRFUkFUT1JfU1lNQk9MXSkgfHxcbiAgICAgICAgbWF5YmVJdGVyYWJsZVtcIkBAaXRlcmF0b3JcIl07XG4gICAgICByZXR1cm4gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbWF5YmVJdGVyYWJsZSA/IG1heWJlSXRlcmFibGUgOiBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICBhOiBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2Yga2V5ICYmIGtleSkge1xuICAgICAgICB2YXIgZSA9IGtleVtTeW1ib2wudG9QcmltaXRpdmVdO1xuICAgICAgICBpZiAodm9pZCAwICE9PSBlKSB7XG4gICAgICAgICAga2V5ID0gZS5jYWxsKGtleSwgXCJzdHJpbmdcIik7XG4gICAgICAgICAgaWYgKFwib2JqZWN0XCIgIT0gdHlwZW9mIGtleSkgYnJlYWsgYTtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAga2V5ID0gU3RyaW5nKGtleSk7XG4gICAgICB9XG4gICAgICBrZXkgPSBcInN5bWJvbFwiID09IHR5cGVvZiBrZXkgPyBrZXkgOiBrZXkgKyBcIlwiO1xuICAgICAga2V5IGluIG9ialxuICAgICAgICA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6ICEwLFxuICAgICAgICAgICAgd3JpdGFibGU6ICEwXG4gICAgICAgICAgfSlcbiAgICAgICAgOiAob2JqW2tleV0gPSB2YWx1ZSk7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVFcnJvckluTmV4dFRpY2soZXJyb3IpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiB3cml0ZUNodW5rQW5kUmV0dXJuKGRlc3RpbmF0aW9uLCBjaHVuaykge1xuICAgICAgaWYgKDAgIT09IGNodW5rLmJ5dGVMZW5ndGgpXG4gICAgICAgIGlmICgyMDQ4IDwgY2h1bmsuYnl0ZUxlbmd0aClcbiAgICAgICAgICAwIDwgd3JpdHRlbkJ5dGVzICYmXG4gICAgICAgICAgICAoZGVzdGluYXRpb24uZW5xdWV1ZShcbiAgICAgICAgICAgICAgbmV3IFVpbnQ4QXJyYXkoY3VycmVudFZpZXcuYnVmZmVyLCAwLCB3cml0dGVuQnl0ZXMpXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgKGN1cnJlbnRWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoMjA0OCkpLFxuICAgICAgICAgICAgKHdyaXR0ZW5CeXRlcyA9IDApKSxcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVucXVldWUoY2h1bmspO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgYWxsb3dhYmxlQnl0ZXMgPSBjdXJyZW50Vmlldy5sZW5ndGggLSB3cml0dGVuQnl0ZXM7XG4gICAgICAgICAgYWxsb3dhYmxlQnl0ZXMgPCBjaHVuay5ieXRlTGVuZ3RoICYmXG4gICAgICAgICAgICAoMCA9PT0gYWxsb3dhYmxlQnl0ZXNcbiAgICAgICAgICAgICAgPyBkZXN0aW5hdGlvbi5lbnF1ZXVlKGN1cnJlbnRWaWV3KVxuICAgICAgICAgICAgICA6IChjdXJyZW50Vmlldy5zZXQoXG4gICAgICAgICAgICAgICAgICBjaHVuay5zdWJhcnJheSgwLCBhbGxvd2FibGVCeXRlcyksXG4gICAgICAgICAgICAgICAgICB3cml0dGVuQnl0ZXNcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVucXVldWUoY3VycmVudFZpZXcpLFxuICAgICAgICAgICAgICAgIChjaHVuayA9IGNodW5rLnN1YmFycmF5KGFsbG93YWJsZUJ5dGVzKSkpLFxuICAgICAgICAgICAgKGN1cnJlbnRWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoMjA0OCkpLFxuICAgICAgICAgICAgKHdyaXR0ZW5CeXRlcyA9IDApKTtcbiAgICAgICAgICBjdXJyZW50Vmlldy5zZXQoY2h1bmssIHdyaXR0ZW5CeXRlcyk7XG4gICAgICAgICAgd3JpdHRlbkJ5dGVzICs9IGNodW5rLmJ5dGVMZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIHJldHVybiAhMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcGxldGVXcml0aW5nKGRlc3RpbmF0aW9uKSB7XG4gICAgICBjdXJyZW50VmlldyAmJlxuICAgICAgICAwIDwgd3JpdHRlbkJ5dGVzICYmXG4gICAgICAgIChkZXN0aW5hdGlvbi5lbnF1ZXVlKFxuICAgICAgICAgIG5ldyBVaW50OEFycmF5KGN1cnJlbnRWaWV3LmJ1ZmZlciwgMCwgd3JpdHRlbkJ5dGVzKVxuICAgICAgICApLFxuICAgICAgICAoY3VycmVudFZpZXcgPSBudWxsKSxcbiAgICAgICAgKHdyaXR0ZW5CeXRlcyA9IDApKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3RyaW5nVG9DaHVuayhjb250ZW50KSB7XG4gICAgICByZXR1cm4gdGV4dEVuY29kZXIuZW5jb2RlKGNvbnRlbnQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBieXRlTGVuZ3RoT2ZDaHVuayhjaHVuaykge1xuICAgICAgcmV0dXJuIGNodW5rLmJ5dGVMZW5ndGg7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNsb3NlV2l0aEVycm9yKGRlc3RpbmF0aW9uLCBlcnJvcikge1xuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZGVzdGluYXRpb24uZXJyb3JcbiAgICAgICAgPyBkZXN0aW5hdGlvbi5lcnJvcihlcnJvcilcbiAgICAgICAgOiBkZXN0aW5hdGlvbi5jbG9zZSgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0NsaWVudFJlZmVyZW5jZShyZWZlcmVuY2UpIHtcbiAgICAgIHJldHVybiByZWZlcmVuY2UuJCR0eXBlb2YgPT09IENMSUVOVF9SRUZFUkVOQ0VfVEFHJDE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyQ2xpZW50UmVmZXJlbmNlSW1wbChwcm94eUltcGxlbWVudGF0aW9uLCBpZCwgYXN5bmMpIHtcbiAgICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhwcm94eUltcGxlbWVudGF0aW9uLCB7XG4gICAgICAgICQkdHlwZW9mOiB7IHZhbHVlOiBDTElFTlRfUkVGRVJFTkNFX1RBRyQxIH0sXG4gICAgICAgICQkaWQ6IHsgdmFsdWU6IGlkIH0sXG4gICAgICAgICQkYXN5bmM6IHsgdmFsdWU6IGFzeW5jIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBiaW5kKCkge1xuICAgICAgdmFyIG5ld0ZuID0gRnVuY3Rpb25CaW5kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy4kJHR5cGVvZiA9PT0gU0VSVkVSX1JFRkVSRU5DRV9UQUcpIHtcbiAgICAgICAgbnVsbCAhPSBhcmd1bWVudHNbMF0gJiZcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgJ0Nhbm5vdCBiaW5kIFwidGhpc1wiIG9mIGEgU2VydmVyIEFjdGlvbi4gUGFzcyBudWxsIG9yIHVuZGVmaW5lZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gLmJpbmQoKS4nXG4gICAgICAgICAgKTtcbiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcbiAgICAgICAgICAkJHR5cGVvZiA9IHsgdmFsdWU6IFNFUlZFUl9SRUZFUkVOQ0VfVEFHIH0sXG4gICAgICAgICAgJCRpZCA9IHsgdmFsdWU6IHRoaXMuJCRpZCB9O1xuICAgICAgICBhcmdzID0geyB2YWx1ZTogdGhpcy4kJGJvdW5kID8gdGhpcy4kJGJvdW5kLmNvbmNhdChhcmdzKSA6IGFyZ3MgfTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG5ld0ZuLCB7XG4gICAgICAgICAgJCR0eXBlb2Y6ICQkdHlwZW9mLFxuICAgICAgICAgICQkaWQ6ICQkaWQsXG4gICAgICAgICAgJCRib3VuZDogYXJncyxcbiAgICAgICAgICAkJGxvY2F0aW9uOiB7IHZhbHVlOiB0aGlzLiQkbG9jYXRpb24sIGNvbmZpZ3VyYWJsZTogITAgfSxcbiAgICAgICAgICBiaW5kOiB7IHZhbHVlOiBiaW5kLCBjb25maWd1cmFibGU6ICEwIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3Rm47XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFJlZmVyZW5jZSh0YXJnZXQsIG5hbWUpIHtcbiAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICBjYXNlIFwiJCR0eXBlb2ZcIjpcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0LiQkdHlwZW9mO1xuICAgICAgICBjYXNlIFwiJCRpZFwiOlxuICAgICAgICAgIHJldHVybiB0YXJnZXQuJCRpZDtcbiAgICAgICAgY2FzZSBcIiQkYXN5bmNcIjpcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0LiQkYXN5bmM7XG4gICAgICAgIGNhc2UgXCJuYW1lXCI6XG4gICAgICAgICAgcmV0dXJuIHRhcmdldC5uYW1lO1xuICAgICAgICBjYXNlIFwiZGVmYXVsdFByb3BzXCI6XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjYXNlIFwiX2RlYnVnSW5mb1wiOlxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2FzZSBcInRvSlNPTlwiOlxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2FzZSBTeW1ib2wudG9QcmltaXRpdmU6XG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGVbU3ltYm9sLnRvUHJpbWl0aXZlXTtcbiAgICAgICAgY2FzZSBTeW1ib2wudG9TdHJpbmdUYWc6XG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGVbU3ltYm9sLnRvU3RyaW5nVGFnXTtcbiAgICAgICAgY2FzZSBcIl9fZXNNb2R1bGVcIjpcbiAgICAgICAgICB2YXIgbW9kdWxlSWQgPSB0YXJnZXQuJCRpZDtcbiAgICAgICAgICB0YXJnZXQuZGVmYXVsdCA9IHJlZ2lzdGVyQ2xpZW50UmVmZXJlbmNlSW1wbChcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgICAgICAgXCJBdHRlbXB0ZWQgdG8gY2FsbCB0aGUgZGVmYXVsdCBleHBvcnQgb2YgXCIgK1xuICAgICAgICAgICAgICAgICAgbW9kdWxlSWQgK1xuICAgICAgICAgICAgICAgICAgXCIgZnJvbSB0aGUgc2VydmVyIGJ1dCBpdCdzIG9uIHRoZSBjbGllbnQuIEl0J3Mgbm90IHBvc3NpYmxlIHRvIGludm9rZSBhIGNsaWVudCBmdW5jdGlvbiBmcm9tIHRoZSBzZXJ2ZXIsIGl0IGNhbiBvbmx5IGJlIHJlbmRlcmVkIGFzIGEgQ29tcG9uZW50IG9yIHBhc3NlZCB0byBwcm9wcyBvZiBhIENsaWVudCBDb21wb25lbnQuXCJcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0YXJnZXQuJCRpZCArIFwiI1wiLFxuICAgICAgICAgICAgdGFyZ2V0LiQkYXN5bmNcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgICAgY2FzZSBcInRoZW5cIjpcbiAgICAgICAgICBpZiAodGFyZ2V0LnRoZW4pIHJldHVybiB0YXJnZXQudGhlbjtcbiAgICAgICAgICBpZiAodGFyZ2V0LiQkYXN5bmMpIHJldHVybjtcbiAgICAgICAgICB2YXIgY2xpZW50UmVmZXJlbmNlID0gcmVnaXN0ZXJDbGllbnRSZWZlcmVuY2VJbXBsKFxuICAgICAgICAgICAgICB7fSxcbiAgICAgICAgICAgICAgdGFyZ2V0LiQkaWQsXG4gICAgICAgICAgICAgICEwXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgcHJveHkgPSBuZXcgUHJveHkoY2xpZW50UmVmZXJlbmNlLCBwcm94eUhhbmRsZXJzJDEpO1xuICAgICAgICAgIHRhcmdldC5zdGF0dXMgPSBcImZ1bGZpbGxlZFwiO1xuICAgICAgICAgIHRhcmdldC52YWx1ZSA9IHByb3h5O1xuICAgICAgICAgIHJldHVybiAodGFyZ2V0LnRoZW4gPSByZWdpc3RlckNsaWVudFJlZmVyZW5jZUltcGwoXG4gICAgICAgICAgICBmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc29sdmUocHJveHkpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0YXJnZXQuJCRpZCArIFwiI3RoZW5cIixcbiAgICAgICAgICAgICExXG4gICAgICAgICAgKSk7XG4gICAgICB9XG4gICAgICBpZiAoXCJzeW1ib2xcIiA9PT0gdHlwZW9mIG5hbWUpXG4gICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgIFwiQ2Fubm90IHJlYWQgU3ltYm9sIGV4cG9ydHMuIE9ubHkgbmFtZWQgZXhwb3J0cyBhcmUgc3VwcG9ydGVkIG9uIGEgY2xpZW50IG1vZHVsZSBpbXBvcnRlZCBvbiB0aGUgc2VydmVyLlwiXG4gICAgICAgICk7XG4gICAgICBjbGllbnRSZWZlcmVuY2UgPSB0YXJnZXRbbmFtZV07XG4gICAgICBjbGllbnRSZWZlcmVuY2UgfHxcbiAgICAgICAgKChjbGllbnRSZWZlcmVuY2UgPSByZWdpc3RlckNsaWVudFJlZmVyZW5jZUltcGwoXG4gICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgICAgIFwiQXR0ZW1wdGVkIHRvIGNhbGwgXCIgK1xuICAgICAgICAgICAgICAgIFN0cmluZyhuYW1lKSArXG4gICAgICAgICAgICAgICAgXCIoKSBmcm9tIHRoZSBzZXJ2ZXIgYnV0IFwiICtcbiAgICAgICAgICAgICAgICBTdHJpbmcobmFtZSkgK1xuICAgICAgICAgICAgICAgIFwiIGlzIG9uIHRoZSBjbGllbnQuIEl0J3Mgbm90IHBvc3NpYmxlIHRvIGludm9rZSBhIGNsaWVudCBmdW5jdGlvbiBmcm9tIHRoZSBzZXJ2ZXIsIGl0IGNhbiBvbmx5IGJlIHJlbmRlcmVkIGFzIGEgQ29tcG9uZW50IG9yIHBhc3NlZCB0byBwcm9wcyBvZiBhIENsaWVudCBDb21wb25lbnQuXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB0YXJnZXQuJCRpZCArIFwiI1wiICsgbmFtZSxcbiAgICAgICAgICB0YXJnZXQuJCRhc3luY1xuICAgICAgICApKSxcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNsaWVudFJlZmVyZW5jZSwgXCJuYW1lXCIsIHsgdmFsdWU6IG5hbWUgfSksXG4gICAgICAgIChjbGllbnRSZWZlcmVuY2UgPSB0YXJnZXRbbmFtZV0gPVxuICAgICAgICAgIG5ldyBQcm94eShjbGllbnRSZWZlcmVuY2UsIGRlZXBQcm94eUhhbmRsZXJzKSkpO1xuICAgICAgcmV0dXJuIGNsaWVudFJlZmVyZW5jZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVzb2x2ZUNsaWVudFJlZmVyZW5jZU1ldGFkYXRhKGNvbmZpZywgY2xpZW50UmVmZXJlbmNlKSB7XG4gICAgICB2YXIgbW9kdWxlUGF0aCA9IGNsaWVudFJlZmVyZW5jZS4kJGlkLFxuICAgICAgICBuYW1lID0gXCJcIixcbiAgICAgICAgcmVzb2x2ZWRNb2R1bGVEYXRhID0gY29uZmlnW21vZHVsZVBhdGhdO1xuICAgICAgaWYgKHJlc29sdmVkTW9kdWxlRGF0YSkgbmFtZSA9IHJlc29sdmVkTW9kdWxlRGF0YS5uYW1lO1xuICAgICAgZWxzZSB7XG4gICAgICAgIHZhciBpZHggPSBtb2R1bGVQYXRoLmxhc3RJbmRleE9mKFwiI1wiKTtcbiAgICAgICAgLTEgIT09IGlkeCAmJlxuICAgICAgICAgICgobmFtZSA9IG1vZHVsZVBhdGguc2xpY2UoaWR4ICsgMSkpLFxuICAgICAgICAgIChyZXNvbHZlZE1vZHVsZURhdGEgPSBjb25maWdbbW9kdWxlUGF0aC5zbGljZSgwLCBpZHgpXSkpO1xuICAgICAgICBpZiAoIXJlc29sdmVkTW9kdWxlRGF0YSlcbiAgICAgICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgICAgICdDb3VsZCBub3QgZmluZCB0aGUgbW9kdWxlIFwiJyArXG4gICAgICAgICAgICAgIG1vZHVsZVBhdGggK1xuICAgICAgICAgICAgICAnXCIgaW4gdGhlIFJlYWN0IENsaWVudCBNYW5pZmVzdC4gVGhpcyBpcyBwcm9iYWJseSBhIGJ1ZyBpbiB0aGUgUmVhY3QgU2VydmVyIENvbXBvbmVudHMgYnVuZGxlci4nXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICghMCA9PT0gcmVzb2x2ZWRNb2R1bGVEYXRhLmFzeW5jICYmICEwID09PSBjbGllbnRSZWZlcmVuY2UuJCRhc3luYylcbiAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgJ1RoZSBtb2R1bGUgXCInICtcbiAgICAgICAgICAgIG1vZHVsZVBhdGggK1xuICAgICAgICAgICAgJ1wiIGlzIG1hcmtlZCBhcyBhbiBhc3luYyBFU00gbW9kdWxlIGJ1dCB3YXMgbG9hZGVkIGFzIGEgQ0pTIHByb3h5LiBUaGlzIGlzIHByb2JhYmx5IGEgYnVnIGluIHRoZSBSZWFjdCBTZXJ2ZXIgQ29tcG9uZW50cyBidW5kbGVyLidcbiAgICAgICAgKTtcbiAgICAgIHJldHVybiAhMCA9PT0gcmVzb2x2ZWRNb2R1bGVEYXRhLmFzeW5jIHx8ICEwID09PSBjbGllbnRSZWZlcmVuY2UuJCRhc3luY1xuICAgICAgICA/IFtyZXNvbHZlZE1vZHVsZURhdGEuaWQsIHJlc29sdmVkTW9kdWxlRGF0YS5jaHVua3MsIG5hbWUsIDFdXG4gICAgICAgIDogW3Jlc29sdmVkTW9kdWxlRGF0YS5pZCwgcmVzb2x2ZWRNb2R1bGVEYXRhLmNodW5rcywgbmFtZV07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyaW1PcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgIGlmIChudWxsID09IG9wdGlvbnMpIHJldHVybiBudWxsO1xuICAgICAgdmFyIGhhc1Byb3BlcnRpZXMgPSAhMSxcbiAgICAgICAgdHJpbW1lZCA9IHt9LFxuICAgICAgICBrZXk7XG4gICAgICBmb3IgKGtleSBpbiBvcHRpb25zKVxuICAgICAgICBudWxsICE9IG9wdGlvbnNba2V5XSAmJlxuICAgICAgICAgICgoaGFzUHJvcGVydGllcyA9ICEwKSwgKHRyaW1tZWRba2V5XSA9IG9wdGlvbnNba2V5XSkpO1xuICAgICAgcmV0dXJuIGhhc1Byb3BlcnRpZXMgPyB0cmltbWVkIDogbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29sbGVjdFN0YWNrVHJhY2VQcml2YXRlKGVycm9yLCBzdHJ1Y3R1cmVkU3RhY2tUcmFjZSkge1xuICAgICAgZXJyb3IgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSBmcmFtZXNUb1NraXA7IGkgPCBzdHJ1Y3R1cmVkU3RhY2tUcmFjZS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2FsbFNpdGUgPSBzdHJ1Y3R1cmVkU3RhY2tUcmFjZVtpXSxcbiAgICAgICAgICBuYW1lID0gY2FsbFNpdGUuZ2V0RnVuY3Rpb25OYW1lKCkgfHwgXCI8YW5vbnltb3VzPlwiO1xuICAgICAgICBpZiAobmFtZS5pbmNsdWRlcyhcInJlYWN0X3N0YWNrX2JvdHRvbV9mcmFtZVwiKSkgYnJlYWs7XG4gICAgICAgIGVsc2UgaWYgKGNhbGxTaXRlLmlzTmF0aXZlKCkpXG4gICAgICAgICAgKGNhbGxTaXRlID0gY2FsbFNpdGUuaXNBc3luYygpKSxcbiAgICAgICAgICAgIGVycm9yLnB1c2goW25hbWUsIFwiXCIsIDAsIDAsIDAsIDAsIGNhbGxTaXRlXSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlmIChjYWxsU2l0ZS5pc0NvbnN0cnVjdG9yKCkpIG5hbWUgPSBcIm5ldyBcIiArIG5hbWU7XG4gICAgICAgICAgZWxzZSBpZiAoIWNhbGxTaXRlLmlzVG9wbGV2ZWwoKSkge1xuICAgICAgICAgICAgdmFyIGNhbGxTaXRlJGpzY29tcCQwID0gY2FsbFNpdGU7XG4gICAgICAgICAgICBuYW1lID0gY2FsbFNpdGUkanNjb21wJDAuZ2V0VHlwZU5hbWUoKTtcbiAgICAgICAgICAgIHZhciBtZXRob2ROYW1lID0gY2FsbFNpdGUkanNjb21wJDAuZ2V0TWV0aG9kTmFtZSgpO1xuICAgICAgICAgICAgY2FsbFNpdGUkanNjb21wJDAgPSBjYWxsU2l0ZSRqc2NvbXAkMC5nZXRGdW5jdGlvbk5hbWUoKTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBcIlwiO1xuICAgICAgICAgICAgY2FsbFNpdGUkanNjb21wJDBcbiAgICAgICAgICAgICAgPyAobmFtZSAmJlxuICAgICAgICAgICAgICAgICAgaWRlbnRpZmllclJlZ0V4cC50ZXN0KGNhbGxTaXRlJGpzY29tcCQwKSAmJlxuICAgICAgICAgICAgICAgICAgY2FsbFNpdGUkanNjb21wJDAgIT09IG5hbWUgJiZcbiAgICAgICAgICAgICAgICAgIChyZXN1bHQgKz0gbmFtZSArIFwiLlwiKSxcbiAgICAgICAgICAgICAgICAocmVzdWx0ICs9IGNhbGxTaXRlJGpzY29tcCQwKSxcbiAgICAgICAgICAgICAgICAhbWV0aG9kTmFtZSB8fFxuICAgICAgICAgICAgICAgICAgY2FsbFNpdGUkanNjb21wJDAgPT09IG1ldGhvZE5hbWUgfHxcbiAgICAgICAgICAgICAgICAgIGNhbGxTaXRlJGpzY29tcCQwLmVuZHNXaXRoKFwiLlwiICsgbWV0aG9kTmFtZSkgfHxcbiAgICAgICAgICAgICAgICAgIGNhbGxTaXRlJGpzY29tcCQwLmVuZHNXaXRoKFwiIFwiICsgbWV0aG9kTmFtZSkgfHxcbiAgICAgICAgICAgICAgICAgIChyZXN1bHQgKz0gXCIgW2FzIFwiICsgbWV0aG9kTmFtZSArIFwiXVwiKSlcbiAgICAgICAgICAgICAgOiAobmFtZSAmJiAocmVzdWx0ICs9IG5hbWUgKyBcIi5cIiksXG4gICAgICAgICAgICAgICAgKHJlc3VsdCA9IG1ldGhvZE5hbWVcbiAgICAgICAgICAgICAgICAgID8gcmVzdWx0ICsgbWV0aG9kTmFtZVxuICAgICAgICAgICAgICAgICAgOiByZXN1bHQgKyBcIjxhbm9ueW1vdXM+XCIpKTtcbiAgICAgICAgICAgIG5hbWUgPSByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIFwiPGFub255bW91cz5cIiA9PT0gbmFtZSAmJiAobmFtZSA9IFwiXCIpO1xuICAgICAgICAgIG1ldGhvZE5hbWUgPSBjYWxsU2l0ZS5nZXRTY3JpcHROYW1lT3JTb3VyY2VVUkwoKSB8fCBcIjxhbm9ueW1vdXM+XCI7XG4gICAgICAgICAgXCI8YW5vbnltb3VzPlwiID09PSBtZXRob2ROYW1lICYmXG4gICAgICAgICAgICAoKG1ldGhvZE5hbWUgPSBcIlwiKSxcbiAgICAgICAgICAgIGNhbGxTaXRlLmlzRXZhbCgpICYmXG4gICAgICAgICAgICAgIChjYWxsU2l0ZSRqc2NvbXAkMCA9IGNhbGxTaXRlLmdldEV2YWxPcmlnaW4oKSkgJiZcbiAgICAgICAgICAgICAgKG1ldGhvZE5hbWUgPSBjYWxsU2l0ZSRqc2NvbXAkMC50b1N0cmluZygpICsgXCIsIDxhbm9ueW1vdXM+XCIpKTtcbiAgICAgICAgICBjYWxsU2l0ZSRqc2NvbXAkMCA9IGNhbGxTaXRlLmdldExpbmVOdW1iZXIoKSB8fCAwO1xuICAgICAgICAgIHJlc3VsdCA9IGNhbGxTaXRlLmdldENvbHVtbk51bWJlcigpIHx8IDA7XG4gICAgICAgICAgdmFyIGVuY2xvc2luZ0xpbmUgPVxuICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjYWxsU2l0ZS5nZXRFbmNsb3NpbmdMaW5lTnVtYmVyXG4gICAgICAgICAgICAgICAgPyBjYWxsU2l0ZS5nZXRFbmNsb3NpbmdMaW5lTnVtYmVyKCkgfHwgMFxuICAgICAgICAgICAgICAgIDogMCxcbiAgICAgICAgICAgIGVuY2xvc2luZ0NvbCA9XG4gICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNhbGxTaXRlLmdldEVuY2xvc2luZ0NvbHVtbk51bWJlclxuICAgICAgICAgICAgICAgID8gY2FsbFNpdGUuZ2V0RW5jbG9zaW5nQ29sdW1uTnVtYmVyKCkgfHwgMFxuICAgICAgICAgICAgICAgIDogMDtcbiAgICAgICAgICBjYWxsU2l0ZSA9IGNhbGxTaXRlLmlzQXN5bmMoKTtcbiAgICAgICAgICBlcnJvci5wdXNoKFtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBtZXRob2ROYW1lLFxuICAgICAgICAgICAgY2FsbFNpdGUkanNjb21wJDAsXG4gICAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgICBlbmNsb3NpbmdMaW5lLFxuICAgICAgICAgICAgZW5jbG9zaW5nQ29sLFxuICAgICAgICAgICAgY2FsbFNpdGVcbiAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29sbGVjdGVkU3RhY2tUcmFjZSA9IGVycm9yO1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbGxlY3RTdGFja1RyYWNlKGVycm9yLCBzdHJ1Y3R1cmVkU3RhY2tUcmFjZSkge1xuICAgICAgY29sbGVjdFN0YWNrVHJhY2VQcml2YXRlKGVycm9yLCBzdHJ1Y3R1cmVkU3RhY2tUcmFjZSk7XG4gICAgICBlcnJvciA9IChlcnJvci5uYW1lIHx8IFwiRXJyb3JcIikgKyBcIjogXCIgKyAoZXJyb3IubWVzc2FnZSB8fCBcIlwiKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RydWN0dXJlZFN0YWNrVHJhY2UubGVuZ3RoOyBpKyspXG4gICAgICAgIGVycm9yICs9IFwiXFxuICAgIGF0IFwiICsgc3RydWN0dXJlZFN0YWNrVHJhY2VbaV0udG9TdHJpbmcoKTtcbiAgICAgIHJldHVybiBlcnJvcjtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGFyc2VTdGFja1RyYWNlKGVycm9yLCBza2lwRnJhbWVzKSB7XG4gICAgICB2YXIgZXhpc3RpbmcgPSBzdGFja1RyYWNlQ2FjaGUuZ2V0KGVycm9yKTtcbiAgICAgIGlmICh2b2lkIDAgIT09IGV4aXN0aW5nKSByZXR1cm4gZXhpc3Rpbmc7XG4gICAgICBjb2xsZWN0ZWRTdGFja1RyYWNlID0gbnVsbDtcbiAgICAgIGZyYW1lc1RvU2tpcCA9IHNraXBGcmFtZXM7XG4gICAgICBleGlzdGluZyA9IEVycm9yLnByZXBhcmVTdGFja1RyYWNlO1xuICAgICAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSBjb2xsZWN0U3RhY2tUcmFjZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBzdGFjayA9IFN0cmluZyhlcnJvci5zdGFjayk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IGV4aXN0aW5nO1xuICAgICAgfVxuICAgICAgaWYgKG51bGwgIT09IGNvbGxlY3RlZFN0YWNrVHJhY2UpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHN0YWNrID0gY29sbGVjdGVkU3RhY2tUcmFjZSksXG4gICAgICAgICAgKGNvbGxlY3RlZFN0YWNrVHJhY2UgPSBudWxsKSxcbiAgICAgICAgICBzdGFja1RyYWNlQ2FjaGUuc2V0KGVycm9yLCBzdGFjayksXG4gICAgICAgICAgc3RhY2tcbiAgICAgICAgKTtcbiAgICAgIHN0YWNrLnN0YXJ0c1dpdGgoXCJFcnJvcjogcmVhY3Qtc3RhY2stdG9wLWZyYW1lXFxuXCIpICYmXG4gICAgICAgIChzdGFjayA9IHN0YWNrLnNsaWNlKDI5KSk7XG4gICAgICBleGlzdGluZyA9IHN0YWNrLmluZGV4T2YoXCJyZWFjdF9zdGFja19ib3R0b21fZnJhbWVcIik7XG4gICAgICAtMSAhPT0gZXhpc3RpbmcgJiYgKGV4aXN0aW5nID0gc3RhY2subGFzdEluZGV4T2YoXCJcXG5cIiwgZXhpc3RpbmcpKTtcbiAgICAgIC0xICE9PSBleGlzdGluZyAmJiAoc3RhY2sgPSBzdGFjay5zbGljZSgwLCBleGlzdGluZykpO1xuICAgICAgc3RhY2sgPSBzdGFjay5zcGxpdChcIlxcblwiKTtcbiAgICAgIGZvciAoZXhpc3RpbmcgPSBbXTsgc2tpcEZyYW1lcyA8IHN0YWNrLmxlbmd0aDsgc2tpcEZyYW1lcysrKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSBmcmFtZVJlZ0V4cC5leGVjKHN0YWNrW3NraXBGcmFtZXNdKTtcbiAgICAgICAgaWYgKHBhcnNlZCkge1xuICAgICAgICAgIHZhciBuYW1lID0gcGFyc2VkWzFdIHx8IFwiXCIsXG4gICAgICAgICAgICBpc0FzeW5jID0gXCJhc3luYyBcIiA9PT0gcGFyc2VkWzhdO1xuICAgICAgICAgIFwiPGFub255bW91cz5cIiA9PT0gbmFtZVxuICAgICAgICAgICAgPyAobmFtZSA9IFwiXCIpXG4gICAgICAgICAgICA6IG5hbWUuc3RhcnRzV2l0aChcImFzeW5jIFwiKSAmJlxuICAgICAgICAgICAgICAoKG5hbWUgPSBuYW1lLnNsaWNlKDUpKSwgKGlzQXN5bmMgPSAhMCkpO1xuICAgICAgICAgIHZhciBmaWxlbmFtZSA9IHBhcnNlZFsyXSB8fCBwYXJzZWRbNV0gfHwgXCJcIjtcbiAgICAgICAgICBcIjxhbm9ueW1vdXM+XCIgPT09IGZpbGVuYW1lICYmIChmaWxlbmFtZSA9IFwiXCIpO1xuICAgICAgICAgIGV4aXN0aW5nLnB1c2goW1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGZpbGVuYW1lLFxuICAgICAgICAgICAgKyhwYXJzZWRbM10gfHwgcGFyc2VkWzZdKSxcbiAgICAgICAgICAgICsocGFyc2VkWzRdIHx8IHBhcnNlZFs3XSksXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIGlzQXN5bmNcbiAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tUcmFjZUNhY2hlLnNldChlcnJvciwgZXhpc3RpbmcpO1xuICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVUZW1wb3JhcnlSZWZlcmVuY2UodGVtcG9yYXJ5UmVmZXJlbmNlcywgaWQpIHtcbiAgICAgIHZhciByZWZlcmVuY2UgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgXCJBdHRlbXB0ZWQgdG8gY2FsbCBhIHRlbXBvcmFyeSBDbGllbnQgUmVmZXJlbmNlIGZyb20gdGhlIHNlcnZlciBidXQgaXQgaXMgb24gdGhlIGNsaWVudC4gSXQncyBub3QgcG9zc2libGUgdG8gaW52b2tlIGEgY2xpZW50IGZ1bmN0aW9uIGZyb20gdGhlIHNlcnZlciwgaXQgY2FuIG9ubHkgYmUgcmVuZGVyZWQgYXMgYSBDb21wb25lbnQgb3IgcGFzc2VkIHRvIHByb3BzIG9mIGEgQ2xpZW50IENvbXBvbmVudC5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIHsgJCR0eXBlb2Y6IHsgdmFsdWU6IFRFTVBPUkFSWV9SRUZFUkVOQ0VfVEFHIH0gfVxuICAgICAgKTtcbiAgICAgIHJlZmVyZW5jZSA9IG5ldyBQcm94eShyZWZlcmVuY2UsIHByb3h5SGFuZGxlcnMpO1xuICAgICAgdGVtcG9yYXJ5UmVmZXJlbmNlcy5zZXQocmVmZXJlbmNlLCBpZCk7XG4gICAgICByZXR1cm4gcmVmZXJlbmNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBub29wKCkge31cbiAgICBmdW5jdGlvbiB0cmFja1VzZWRUaGVuYWJsZSh0aGVuYWJsZVN0YXRlLCB0aGVuYWJsZSwgaW5kZXgpIHtcbiAgICAgIGluZGV4ID0gdGhlbmFibGVTdGF0ZVtpbmRleF07XG4gICAgICB2b2lkIDAgPT09IGluZGV4XG4gICAgICAgID8gKHRoZW5hYmxlU3RhdGUucHVzaCh0aGVuYWJsZSksXG4gICAgICAgICAgKHRoZW5hYmxlU3RhdGUuX3N0YWNrcyB8fCAodGhlbmFibGVTdGF0ZS5fc3RhY2tzID0gW10pKS5wdXNoKEVycm9yKCkpKVxuICAgICAgICA6IGluZGV4ICE9PSB0aGVuYWJsZSAmJiAodGhlbmFibGUudGhlbihub29wLCBub29wKSwgKHRoZW5hYmxlID0gaW5kZXgpKTtcbiAgICAgIHN3aXRjaCAodGhlbmFibGUuc3RhdHVzKSB7XG4gICAgICAgIGNhc2UgXCJmdWxmaWxsZWRcIjpcbiAgICAgICAgICByZXR1cm4gdGhlbmFibGUudmFsdWU7XG4gICAgICAgIGNhc2UgXCJyZWplY3RlZFwiOlxuICAgICAgICAgIHRocm93IHRoZW5hYmxlLnJlYXNvbjtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgdGhlbmFibGUuc3RhdHVzXG4gICAgICAgICAgICA/IHRoZW5hYmxlLnRoZW4obm9vcCwgbm9vcClcbiAgICAgICAgICAgIDogKCh0aGVuYWJsZVN0YXRlID0gdGhlbmFibGUpLFxuICAgICAgICAgICAgICAodGhlbmFibGVTdGF0ZS5zdGF0dXMgPSBcInBlbmRpbmdcIiksXG4gICAgICAgICAgICAgIHRoZW5hYmxlU3RhdGUudGhlbihcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZnVsZmlsbGVkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChcInBlbmRpbmdcIiA9PT0gdGhlbmFibGUuc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmdWxmaWxsZWRUaGVuYWJsZSA9IHRoZW5hYmxlO1xuICAgICAgICAgICAgICAgICAgICBmdWxmaWxsZWRUaGVuYWJsZS5zdGF0dXMgPSBcImZ1bGZpbGxlZFwiO1xuICAgICAgICAgICAgICAgICAgICBmdWxmaWxsZWRUaGVuYWJsZS52YWx1ZSA9IGZ1bGZpbGxlZFZhbHVlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoXCJwZW5kaW5nXCIgPT09IHRoZW5hYmxlLnN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVqZWN0ZWRUaGVuYWJsZSA9IHRoZW5hYmxlO1xuICAgICAgICAgICAgICAgICAgICByZWplY3RlZFRoZW5hYmxlLnN0YXR1cyA9IFwicmVqZWN0ZWRcIjtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0ZWRUaGVuYWJsZS5yZWFzb24gPSBlcnJvcjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICkpO1xuICAgICAgICAgIHN3aXRjaCAodGhlbmFibGUuc3RhdHVzKSB7XG4gICAgICAgICAgICBjYXNlIFwiZnVsZmlsbGVkXCI6XG4gICAgICAgICAgICAgIHJldHVybiB0aGVuYWJsZS52YWx1ZTtcbiAgICAgICAgICAgIGNhc2UgXCJyZWplY3RlZFwiOlxuICAgICAgICAgICAgICB0aHJvdyB0aGVuYWJsZS5yZWFzb247XG4gICAgICAgICAgfVxuICAgICAgICAgIHN1c3BlbmRlZFRoZW5hYmxlID0gdGhlbmFibGU7XG4gICAgICAgICAgdGhyb3cgU3VzcGVuc2VFeGNlcHRpb247XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFN1c3BlbmRlZFRoZW5hYmxlKCkge1xuICAgICAgaWYgKG51bGwgPT09IHN1c3BlbmRlZFRoZW5hYmxlKVxuICAgICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgICBcIkV4cGVjdGVkIGEgc3VzcGVuZGVkIHRoZW5hYmxlLiBUaGlzIGlzIGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS5cIlxuICAgICAgICApO1xuICAgICAgdmFyIHRoZW5hYmxlID0gc3VzcGVuZGVkVGhlbmFibGU7XG4gICAgICBzdXNwZW5kZWRUaGVuYWJsZSA9IG51bGw7XG4gICAgICByZXR1cm4gdGhlbmFibGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFRoZW5hYmxlU3RhdGVBZnRlclN1c3BlbmRpbmcoKSB7XG4gICAgICB2YXIgc3RhdGUgPSB0aGVuYWJsZVN0YXRlIHx8IFtdO1xuICAgICAgc3RhdGUuX2NvbXBvbmVudERlYnVnSW5mbyA9IGN1cnJlbnRDb21wb25lbnREZWJ1Z0luZm87XG4gICAgICB0aGVuYWJsZVN0YXRlID0gY3VycmVudENvbXBvbmVudERlYnVnSW5mbyA9IG51bGw7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVuc3VwcG9ydGVkSG9vaygpIHtcbiAgICAgIHRocm93IEVycm9yKFwiVGhpcyBIb29rIGlzIG5vdCBzdXBwb3J0ZWQgaW4gU2VydmVyIENvbXBvbmVudHMuXCIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1bnN1cHBvcnRlZFJlZnJlc2goKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgXCJSZWZyZXNoaW5nIHRoZSBjYWNoZSBpcyBub3Qgc3VwcG9ydGVkIGluIFNlcnZlciBDb21wb25lbnRzLlwiXG4gICAgICApO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1bnN1cHBvcnRlZENvbnRleHQoKSB7XG4gICAgICB0aHJvdyBFcnJvcihcIkNhbm5vdCByZWFkIGEgQ2xpZW50IENvbnRleHQgZnJvbSBhIFNlcnZlciBDb21wb25lbnQuXCIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZXNvbHZlT3duZXIoKSB7XG4gICAgICBpZiAoY3VycmVudE93bmVyKSByZXR1cm4gY3VycmVudE93bmVyO1xuICAgICAgaWYgKHN1cHBvcnRzQ29tcG9uZW50U3RvcmFnZSkge1xuICAgICAgICB2YXIgb3duZXIgPSBjb21wb25lbnRTdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgICAgIGlmIChvd25lcikgcmV0dXJuIG93bmVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByZXBhcmVTdGFja1RyYWNlKGVycm9yLCBzdHJ1Y3R1cmVkU3RhY2tUcmFjZSkge1xuICAgICAgZXJyb3IgPSAoZXJyb3IubmFtZSB8fCBcIkVycm9yXCIpICsgXCI6IFwiICsgKGVycm9yLm1lc3NhZ2UgfHwgXCJcIik7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cnVjdHVyZWRTdGFja1RyYWNlLmxlbmd0aDsgaSsrKVxuICAgICAgICBlcnJvciArPSBcIlxcbiAgICBhdCBcIiArIHN0cnVjdHVyZWRTdGFja1RyYWNlW2ldLnRvU3RyaW5nKCk7XG4gICAgICByZXR1cm4gZXJyb3I7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc2V0T3duZXJTdGFja0xpbWl0KCkge1xuICAgICAgdmFyIG5vdyA9IGdldEN1cnJlbnRUaW1lKCk7XG4gICAgICAxZTMgPCBub3cgLSBsYXN0UmVzZXRUaW1lICYmXG4gICAgICAgICgoUmVhY3RTaGFyZWRJbnRlcm5hbHNTZXJ2ZXIucmVjZW50bHlDcmVhdGVkT3duZXJTdGFja3MgPSAwKSxcbiAgICAgICAgKGxhc3RSZXNldFRpbWUgPSBub3cpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNPYmplY3RQcm90b3R5cGUob2JqZWN0KSB7XG4gICAgICBpZiAoIW9iamVjdCkgcmV0dXJuICExO1xuICAgICAgdmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG4gICAgICBpZiAob2JqZWN0ID09PSBPYmplY3RQcm90b3R5cGUpIHJldHVybiAhMDtcbiAgICAgIGlmIChnZXRQcm90b3R5cGVPZihvYmplY3QpKSByZXR1cm4gITE7XG4gICAgICBvYmplY3QgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmplY3QpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3QubGVuZ3RoOyBpKyspXG4gICAgICAgIGlmICghKG9iamVjdFtpXSBpbiBPYmplY3RQcm90b3R5cGUpKSByZXR1cm4gITE7XG4gICAgICByZXR1cm4gITA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzR2V0dGVyKG9iamVjdCwgbmFtZSkge1xuICAgICAgaWYgKG9iamVjdCA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBudWxsID09PSBvYmplY3QpIHJldHVybiAhMTtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIG5hbWUpO1xuICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gZGVzY3JpcHRvclxuICAgICAgICA/IGlzR2V0dGVyKGdldFByb3RvdHlwZU9mKG9iamVjdCksIG5hbWUpXG4gICAgICAgIDogXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZGVzY3JpcHRvci5nZXQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzU2ltcGxlT2JqZWN0KG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdFByb3RvdHlwZShnZXRQcm90b3R5cGVPZihvYmplY3QpKSkgcmV0dXJuICExO1xuICAgICAgZm9yIChcbiAgICAgICAgdmFyIG5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqZWN0KSwgaSA9IDA7XG4gICAgICAgIGkgPCBuYW1lcy5sZW5ndGg7XG4gICAgICAgIGkrK1xuICAgICAgKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIG5hbWVzW2ldKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICFkZXNjcmlwdG9yIHx8XG4gICAgICAgICAgKCFkZXNjcmlwdG9yLmVudW1lcmFibGUgJiZcbiAgICAgICAgICAgICgoXCJrZXlcIiAhPT0gbmFtZXNbaV0gJiYgXCJyZWZcIiAhPT0gbmFtZXNbaV0pIHx8XG4gICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGRlc2NyaXB0b3IuZ2V0KSlcbiAgICAgICAgKVxuICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAhMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gb2JqZWN0TmFtZShvYmplY3QpIHtcbiAgICAgIG9iamVjdCA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpO1xuICAgICAgcmV0dXJuIG9iamVjdC5zbGljZSg4LCBvYmplY3QubGVuZ3RoIC0gMSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlc2NyaWJlS2V5Rm9yRXJyb3JNZXNzYWdlKGtleSkge1xuICAgICAgdmFyIGVuY29kZWRLZXkgPSBKU09OLnN0cmluZ2lmeShrZXkpO1xuICAgICAgcmV0dXJuICdcIicgKyBrZXkgKyAnXCInID09PSBlbmNvZGVkS2V5ID8ga2V5IDogZW5jb2RlZEtleTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGVzY3JpYmVWYWx1ZUZvckVycm9yTWVzc2FnZSh2YWx1ZSkge1xuICAgICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgIDEwID49IHZhbHVlLmxlbmd0aCA/IHZhbHVlIDogdmFsdWUuc2xpY2UoMCwgMTApICsgXCIuLi5cIlxuICAgICAgICAgICk7XG4gICAgICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgICAgICBpZiAoaXNBcnJheUltcGwodmFsdWUpKSByZXR1cm4gXCJbLi4uXVwiO1xuICAgICAgICAgIGlmIChudWxsICE9PSB2YWx1ZSAmJiB2YWx1ZS4kJHR5cGVvZiA9PT0gQ0xJRU5UX1JFRkVSRU5DRV9UQUcpXG4gICAgICAgICAgICByZXR1cm4gXCJjbGllbnRcIjtcbiAgICAgICAgICB2YWx1ZSA9IG9iamVjdE5hbWUodmFsdWUpO1xuICAgICAgICAgIHJldHVybiBcIk9iamVjdFwiID09PSB2YWx1ZSA/IFwiey4uLn1cIiA6IHZhbHVlO1xuICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgICByZXR1cm4gdmFsdWUuJCR0eXBlb2YgPT09IENMSUVOVF9SRUZFUkVOQ0VfVEFHXG4gICAgICAgICAgICA/IFwiY2xpZW50XCJcbiAgICAgICAgICAgIDogKHZhbHVlID0gdmFsdWUuZGlzcGxheU5hbWUgfHwgdmFsdWUubmFtZSlcbiAgICAgICAgICAgICAgPyBcImZ1bmN0aW9uIFwiICsgdmFsdWVcbiAgICAgICAgICAgICAgOiBcImZ1bmN0aW9uXCI7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlc2NyaWJlRWxlbWVudFR5cGUodHlwZSkge1xuICAgICAgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiB0eXBlKSByZXR1cm4gdHlwZTtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIFwiU3VzcGVuc2VcIjtcbiAgICAgICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIFwiU3VzcGVuc2VMaXN0XCI7XG4gICAgICB9XG4gICAgICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIHR5cGUpXG4gICAgICAgIHN3aXRjaCAodHlwZS4kJHR5cGVvZikge1xuICAgICAgICAgIGNhc2UgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRTpcbiAgICAgICAgICAgIHJldHVybiBkZXNjcmliZUVsZW1lbnRUeXBlKHR5cGUucmVuZGVyKTtcbiAgICAgICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRTpcbiAgICAgICAgICAgIHJldHVybiBkZXNjcmliZUVsZW1lbnRUeXBlKHR5cGUudHlwZSk7XG4gICAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgICB2YXIgcGF5bG9hZCA9IHR5cGUuX3BheWxvYWQ7XG4gICAgICAgICAgICB0eXBlID0gdHlwZS5faW5pdDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHJldHVybiBkZXNjcmliZUVsZW1lbnRUeXBlKHR5cGUocGF5bG9hZCkpO1xuICAgICAgICAgICAgfSBjYXRjaCAoeCkge31cbiAgICAgICAgfVxuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlc2NyaWJlT2JqZWN0Rm9yRXJyb3JNZXNzYWdlKG9iamVjdE9yQXJyYXksIGV4cGFuZGVkTmFtZSkge1xuICAgICAgdmFyIG9iaktpbmQgPSBvYmplY3ROYW1lKG9iamVjdE9yQXJyYXkpO1xuICAgICAgaWYgKFwiT2JqZWN0XCIgIT09IG9iaktpbmQgJiYgXCJBcnJheVwiICE9PSBvYmpLaW5kKSByZXR1cm4gb2JqS2luZDtcbiAgICAgIHZhciBzdGFydCA9IC0xLFxuICAgICAgICBsZW5ndGggPSAwO1xuICAgICAgaWYgKGlzQXJyYXlJbXBsKG9iamVjdE9yQXJyYXkpKVxuICAgICAgICBpZiAoanN4Q2hpbGRyZW5QYXJlbnRzLmhhcyhvYmplY3RPckFycmF5KSkge1xuICAgICAgICAgIHZhciB0eXBlID0ganN4Q2hpbGRyZW5QYXJlbnRzLmdldChvYmplY3RPckFycmF5KTtcbiAgICAgICAgICBvYmpLaW5kID0gXCI8XCIgKyBkZXNjcmliZUVsZW1lbnRUeXBlKHR5cGUpICsgXCI+XCI7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3RPckFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3RPckFycmF5W2ldO1xuICAgICAgICAgICAgdmFsdWUgPVxuICAgICAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgdmFsdWVcbiAgICAgICAgICAgICAgICA/IHZhbHVlXG4gICAgICAgICAgICAgICAgOiBcIm9iamVjdFwiID09PSB0eXBlb2YgdmFsdWUgJiYgbnVsbCAhPT0gdmFsdWVcbiAgICAgICAgICAgICAgICAgID8gXCJ7XCIgKyBkZXNjcmliZU9iamVjdEZvckVycm9yTWVzc2FnZSh2YWx1ZSkgKyBcIn1cIlxuICAgICAgICAgICAgICAgICAgOiBcIntcIiArIGRlc2NyaWJlVmFsdWVGb3JFcnJvck1lc3NhZ2UodmFsdWUpICsgXCJ9XCI7XG4gICAgICAgICAgICBcIlwiICsgaSA9PT0gZXhwYW5kZWROYW1lXG4gICAgICAgICAgICAgID8gKChzdGFydCA9IG9iaktpbmQubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAobGVuZ3RoID0gdmFsdWUubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAob2JqS2luZCArPSB2YWx1ZSkpXG4gICAgICAgICAgICAgIDogKG9iaktpbmQgPVxuICAgICAgICAgICAgICAgICAgMTUgPiB2YWx1ZS5sZW5ndGggJiYgNDAgPiBvYmpLaW5kLmxlbmd0aCArIHZhbHVlLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICA/IG9iaktpbmQgKyB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICA6IG9iaktpbmQgKyBcInsuLi59XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvYmpLaW5kICs9IFwiPC9cIiArIGRlc2NyaWJlRWxlbWVudFR5cGUodHlwZSkgKyBcIj5cIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvYmpLaW5kID0gXCJbXCI7XG4gICAgICAgICAgZm9yICh0eXBlID0gMDsgdHlwZSA8IG9iamVjdE9yQXJyYXkubGVuZ3RoOyB0eXBlKyspXG4gICAgICAgICAgICAwIDwgdHlwZSAmJiAob2JqS2luZCArPSBcIiwgXCIpLFxuICAgICAgICAgICAgICAoaSA9IG9iamVjdE9yQXJyYXlbdHlwZV0pLFxuICAgICAgICAgICAgICAoaSA9XG4gICAgICAgICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGkgJiYgbnVsbCAhPT0gaVxuICAgICAgICAgICAgICAgICAgPyBkZXNjcmliZU9iamVjdEZvckVycm9yTWVzc2FnZShpKVxuICAgICAgICAgICAgICAgICAgOiBkZXNjcmliZVZhbHVlRm9yRXJyb3JNZXNzYWdlKGkpKSxcbiAgICAgICAgICAgICAgXCJcIiArIHR5cGUgPT09IGV4cGFuZGVkTmFtZVxuICAgICAgICAgICAgICAgID8gKChzdGFydCA9IG9iaktpbmQubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgIChsZW5ndGggPSBpLmxlbmd0aCksXG4gICAgICAgICAgICAgICAgICAob2JqS2luZCArPSBpKSlcbiAgICAgICAgICAgICAgICA6IChvYmpLaW5kID1cbiAgICAgICAgICAgICAgICAgICAgMTAgPiBpLmxlbmd0aCAmJiA0MCA+IG9iaktpbmQubGVuZ3RoICsgaS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICA/IG9iaktpbmQgKyBpXG4gICAgICAgICAgICAgICAgICAgICAgOiBvYmpLaW5kICsgXCIuLi5cIik7XG4gICAgICAgICAgb2JqS2luZCArPSBcIl1cIjtcbiAgICAgICAgfVxuICAgICAgZWxzZSBpZiAob2JqZWN0T3JBcnJheS4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFKVxuICAgICAgICBvYmpLaW5kID0gXCI8XCIgKyBkZXNjcmliZUVsZW1lbnRUeXBlKG9iamVjdE9yQXJyYXkudHlwZSkgKyBcIi8+XCI7XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKG9iamVjdE9yQXJyYXkuJCR0eXBlb2YgPT09IENMSUVOVF9SRUZFUkVOQ0VfVEFHKSByZXR1cm4gXCJjbGllbnRcIjtcbiAgICAgICAgaWYgKGpzeFByb3BzUGFyZW50cy5oYXMob2JqZWN0T3JBcnJheSkpIHtcbiAgICAgICAgICBvYmpLaW5kID0ganN4UHJvcHNQYXJlbnRzLmdldChvYmplY3RPckFycmF5KTtcbiAgICAgICAgICBvYmpLaW5kID0gXCI8XCIgKyAoZGVzY3JpYmVFbGVtZW50VHlwZShvYmpLaW5kKSB8fCBcIi4uLlwiKTtcbiAgICAgICAgICB0eXBlID0gT2JqZWN0LmtleXMob2JqZWN0T3JBcnJheSk7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IHR5cGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG9iaktpbmQgKz0gXCIgXCI7XG4gICAgICAgICAgICB2YWx1ZSA9IHR5cGVbaV07XG4gICAgICAgICAgICBvYmpLaW5kICs9IGRlc2NyaWJlS2V5Rm9yRXJyb3JNZXNzYWdlKHZhbHVlKSArIFwiPVwiO1xuICAgICAgICAgICAgdmFyIF92YWx1ZTIgPSBvYmplY3RPckFycmF5W3ZhbHVlXTtcbiAgICAgICAgICAgIHZhciBfc3Vic3RyMiA9XG4gICAgICAgICAgICAgIHZhbHVlID09PSBleHBhbmRlZE5hbWUgJiZcbiAgICAgICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIF92YWx1ZTIgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gX3ZhbHVlMlxuICAgICAgICAgICAgICAgID8gZGVzY3JpYmVPYmplY3RGb3JFcnJvck1lc3NhZ2UoX3ZhbHVlMilcbiAgICAgICAgICAgICAgICA6IGRlc2NyaWJlVmFsdWVGb3JFcnJvck1lc3NhZ2UoX3ZhbHVlMik7XG4gICAgICAgICAgICBcInN0cmluZ1wiICE9PSB0eXBlb2YgX3ZhbHVlMiAmJiAoX3N1YnN0cjIgPSBcIntcIiArIF9zdWJzdHIyICsgXCJ9XCIpO1xuICAgICAgICAgICAgdmFsdWUgPT09IGV4cGFuZGVkTmFtZVxuICAgICAgICAgICAgICA/ICgoc3RhcnQgPSBvYmpLaW5kLmxlbmd0aCksXG4gICAgICAgICAgICAgICAgKGxlbmd0aCA9IF9zdWJzdHIyLmxlbmd0aCksXG4gICAgICAgICAgICAgICAgKG9iaktpbmQgKz0gX3N1YnN0cjIpKVxuICAgICAgICAgICAgICA6IChvYmpLaW5kID1cbiAgICAgICAgICAgICAgICAgIDEwID4gX3N1YnN0cjIubGVuZ3RoICYmIDQwID4gb2JqS2luZC5sZW5ndGggKyBfc3Vic3RyMi5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgPyBvYmpLaW5kICsgX3N1YnN0cjJcbiAgICAgICAgICAgICAgICAgICAgOiBvYmpLaW5kICsgXCIuLi5cIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9iaktpbmQgKz0gXCI+XCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2JqS2luZCA9IFwie1wiO1xuICAgICAgICAgIHR5cGUgPSBPYmplY3Qua2V5cyhvYmplY3RPckFycmF5KTtcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdHlwZS5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIDAgPCBpICYmIChvYmpLaW5kICs9IFwiLCBcIiksXG4gICAgICAgICAgICAgICh2YWx1ZSA9IHR5cGVbaV0pLFxuICAgICAgICAgICAgICAob2JqS2luZCArPSBkZXNjcmliZUtleUZvckVycm9yTWVzc2FnZSh2YWx1ZSkgKyBcIjogXCIpLFxuICAgICAgICAgICAgICAoX3ZhbHVlMiA9IG9iamVjdE9yQXJyYXlbdmFsdWVdKSxcbiAgICAgICAgICAgICAgKF92YWx1ZTIgPVxuICAgICAgICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBfdmFsdWUyICYmIG51bGwgIT09IF92YWx1ZTJcbiAgICAgICAgICAgICAgICAgID8gZGVzY3JpYmVPYmplY3RGb3JFcnJvck1lc3NhZ2UoX3ZhbHVlMilcbiAgICAgICAgICAgICAgICAgIDogZGVzY3JpYmVWYWx1ZUZvckVycm9yTWVzc2FnZShfdmFsdWUyKSksXG4gICAgICAgICAgICAgIHZhbHVlID09PSBleHBhbmRlZE5hbWVcbiAgICAgICAgICAgICAgICA/ICgoc3RhcnQgPSBvYmpLaW5kLmxlbmd0aCksXG4gICAgICAgICAgICAgICAgICAobGVuZ3RoID0gX3ZhbHVlMi5sZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgKG9iaktpbmQgKz0gX3ZhbHVlMikpXG4gICAgICAgICAgICAgICAgOiAob2JqS2luZCA9XG4gICAgICAgICAgICAgICAgICAgIDEwID4gX3ZhbHVlMi5sZW5ndGggJiYgNDAgPiBvYmpLaW5kLmxlbmd0aCArIF92YWx1ZTIubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgPyBvYmpLaW5kICsgX3ZhbHVlMlxuICAgICAgICAgICAgICAgICAgICAgIDogb2JqS2luZCArIFwiLi4uXCIpO1xuICAgICAgICAgIG9iaktpbmQgKz0gXCJ9XCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2b2lkIDAgPT09IGV4cGFuZGVkTmFtZVxuICAgICAgICA/IG9iaktpbmRcbiAgICAgICAgOiAtMSA8IHN0YXJ0ICYmIDAgPCBsZW5ndGhcbiAgICAgICAgICA/ICgob2JqZWN0T3JBcnJheSA9IFwiIFwiLnJlcGVhdChzdGFydCkgKyBcIl5cIi5yZXBlYXQobGVuZ3RoKSksXG4gICAgICAgICAgICBcIlxcbiAgXCIgKyBvYmpLaW5kICsgXCJcXG4gIFwiICsgb2JqZWN0T3JBcnJheSlcbiAgICAgICAgICA6IFwiXFxuICBcIiArIG9iaktpbmQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXJTdGFja0ZyYW1lKGZpbGVuYW1lKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBcIlwiICE9PSBmaWxlbmFtZSAmJlxuICAgICAgICAhZmlsZW5hbWUuc3RhcnRzV2l0aChcIm5vZGU6XCIpICYmXG4gICAgICAgICFmaWxlbmFtZS5pbmNsdWRlcyhcIm5vZGVfbW9kdWxlc1wiKVxuICAgICAgKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmlsdGVyU3RhY2tUcmFjZShyZXF1ZXN0LCBzdGFjaykge1xuICAgICAgcmVxdWVzdCA9IHJlcXVlc3QuZmlsdGVyU3RhY2tGcmFtZTtcbiAgICAgIGZvciAodmFyIGZpbHRlcmVkU3RhY2sgPSBbXSwgaSA9IDA7IGkgPCBzdGFjay5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2FsbHNpdGUgPSBzdGFja1tpXSxcbiAgICAgICAgICBmdW5jdGlvbk5hbWUgPSBjYWxsc2l0ZVswXTtcbiAgICAgICAgdmFyIHVybCA9IGNhbGxzaXRlWzFdO1xuICAgICAgICBpZiAodXJsLnN0YXJ0c1dpdGgoXCJhYm91dDovL1JlYWN0L1wiKSkge1xuICAgICAgICAgIHZhciBlbnZJZHggPSB1cmwuaW5kZXhPZihcIi9cIiwgMTQpLFxuICAgICAgICAgICAgc3VmZml4SWR4ID0gdXJsLmxhc3RJbmRleE9mKFwiP1wiKTtcbiAgICAgICAgICAtMSA8IGVudklkeCAmJlxuICAgICAgICAgICAgLTEgPCBzdWZmaXhJZHggJiZcbiAgICAgICAgICAgICh1cmwgPSBkZWNvZGVVUkkodXJsLnNsaWNlKGVudklkeCArIDEsIHN1ZmZpeElkeCkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXF1ZXN0KHVybCwgZnVuY3Rpb25OYW1lLCBjYWxsc2l0ZVsyXSwgY2FsbHNpdGVbM10pICYmXG4gICAgICAgICAgKChjYWxsc2l0ZSA9IGNhbGxzaXRlLnNsaWNlKDApKSxcbiAgICAgICAgICAoY2FsbHNpdGVbMV0gPSB1cmwpLFxuICAgICAgICAgIGZpbHRlcmVkU3RhY2sucHVzaChjYWxsc2l0ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZpbHRlcmVkU3RhY2s7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhdGNoQ29uc29sZShjb25zb2xlSW5zdCwgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGNvbnNvbGVJbnN0LCBtZXRob2ROYW1lKTtcbiAgICAgIGlmIChcbiAgICAgICAgZGVzY3JpcHRvciAmJlxuICAgICAgICAoZGVzY3JpcHRvci5jb25maWd1cmFibGUgfHwgZGVzY3JpcHRvci53cml0YWJsZSkgJiZcbiAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZGVzY3JpcHRvci52YWx1ZVxuICAgICAgKSB7XG4gICAgICAgIHZhciBvcmlnaW5hbE1ldGhvZCA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICAgIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9yaWdpbmFsTWV0aG9kLCBcIm5hbWVcIik7XG4gICAgICAgIHZhciB3cmFwcGVyTWV0aG9kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciByZXF1ZXN0ID0gcmVzb2x2ZVJlcXVlc3QoKTtcbiAgICAgICAgICBpZiAoKFwiYXNzZXJ0XCIgIT09IG1ldGhvZE5hbWUgfHwgIWFyZ3VtZW50c1swXSkgJiYgbnVsbCAhPT0gcmVxdWVzdCkge1xuICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBFcnJvcihcInJlYWN0LXN0YWNrLXRvcC1mcmFtZVwiKTtcbiAgICAgICAgICAgICAgY29sbGVjdGVkU3RhY2tUcmFjZSA9IG51bGw7XG4gICAgICAgICAgICAgIGZyYW1lc1RvU2tpcCA9IDE7XG4gICAgICAgICAgICAgIHZhciBwcmV2aW91c1ByZXBhcmUgPSBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtcbiAgICAgICAgICAgICAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSBjb2xsZWN0U3RhY2tUcmFjZVByaXZhdGU7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKFwiXCIgIT09IGVycm9yLnN0YWNrKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gcHJldmlvdXNQcmVwYXJlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IGNvbGxlY3RlZFN0YWNrVHJhY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBmaWx0ZXJTdGFja1RyYWNlKFxuICAgICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgfHwgW11cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXF1ZXN0LnBlbmRpbmdEZWJ1Z0NodW5rcysrO1xuICAgICAgICAgICAgZXJyb3IgPSByZXNvbHZlT3duZXIoKTtcbiAgICAgICAgICAgIHByZXZpb3VzUHJlcGFyZSA9IEFycmF5LmZyb20oYXJndW1lbnRzKTtcbiAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgdmFyIGVudiA9IDA7XG4gICAgICAgICAgICAgIHN3aXRjaCAobWV0aG9kTmFtZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJkaXJcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiZGlyeG1sXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcImdyb3VwRW5kXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcInRhYmxlXCI6XG4gICAgICAgICAgICAgICAgICBlbnYgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICBjYXNlIFwiYXNzZXJ0XCI6XG4gICAgICAgICAgICAgICAgICBlbnYgPSAxO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBmb3JtYXQgPSBwcmV2aW91c1ByZXBhcmVbZW52XSxcbiAgICAgICAgICAgICAgICBzdHlsZSA9IHByZXZpb3VzUHJlcGFyZVtlbnYgKyAxXSxcbiAgICAgICAgICAgICAgICBiYWRnZSA9IHByZXZpb3VzUHJlcGFyZVtlbnYgKyAyXTtcbiAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGZvcm1hdCAmJlxuICAgICAgICAgICAgICBmb3JtYXQuc3RhcnRzV2l0aChcIlxcdTAwMWJbMG1cXHUwMDFiWzdtJWMlc1xcdTAwMWJbMG0lY1wiKSAmJlxuICAgICAgICAgICAgICBcImJhY2tncm91bmQ6ICNlNmU2ZTY7YmFja2dyb3VuZDogbGlnaHQtZGFyayhyZ2JhKDAsMCwwLDAuMSksIHJnYmEoMjU1LDI1NSwyNTUsMC4yNSkpO2NvbG9yOiAjMDAwMDAwO2NvbG9yOiBsaWdodC1kYXJrKCMwMDAwMDAsICNmZmZmZmYpO2JvcmRlci1yYWRpdXM6IDJweFwiID09PVxuICAgICAgICAgICAgICAgIHN0eWxlICYmXG4gICAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBiYWRnZVxuICAgICAgICAgICAgICAgID8gKChmb3JtYXQgPSBmb3JtYXQuc2xpY2UoMTgpKSxcbiAgICAgICAgICAgICAgICAgIFwiIFwiID09PSBmb3JtYXRbMF0gJiYgKGZvcm1hdCA9IGZvcm1hdC5zbGljZSgxKSksXG4gICAgICAgICAgICAgICAgICBwcmV2aW91c1ByZXBhcmUuc3BsaWNlKGVudiwgNCwgZm9ybWF0KSxcbiAgICAgICAgICAgICAgICAgIChlbnYgPSBiYWRnZS5zbGljZSgxLCBiYWRnZS5sZW5ndGggLSAxKSkpXG4gICAgICAgICAgICAgICAgOiAoZW52ID0gbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBudWxsID09PSBlbnYgJiYgKGVudiA9ICgwLCByZXF1ZXN0LmVudmlyb25tZW50TmFtZSkoKSk7XG4gICAgICAgICAgICBudWxsICE9IGVycm9yICYmIG91dGxpbmVDb21wb25lbnRJbmZvKHJlcXVlc3QsIGVycm9yKTtcbiAgICAgICAgICAgIGJhZGdlID0gW21ldGhvZE5hbWUsIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCwgZXJyb3IsIGVudl07XG4gICAgICAgICAgICBiYWRnZS5wdXNoLmFwcGx5KGJhZGdlLCBwcmV2aW91c1ByZXBhcmUpO1xuICAgICAgICAgICAgcHJldmlvdXNQcmVwYXJlID0gc2VyaWFsaXplRGVidWdNb2RlbChcbiAgICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgICAgKG51bGwgPT09IHJlcXVlc3QuZGVmZXJyZWREZWJ1Z09iamVjdHMgPyA1MDAgOiAxMCkgK1xuICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5sZW5ndGgsXG4gICAgICAgICAgICAgIGJhZGdlXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgXCJbXCIgIT09IHByZXZpb3VzUHJlcGFyZVswXSAmJlxuICAgICAgICAgICAgICAocHJldmlvdXNQcmVwYXJlID0gc2VyaWFsaXplRGVidWdNb2RlbChcbiAgICAgICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgICAgICAgIDEwICsgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0Lmxlbmd0aCxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICBtZXRob2ROYW1lLFxuICAgICAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LFxuICAgICAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgICAgICBlbnYsXG4gICAgICAgICAgICAgICAgICBcIlVua25vd24gVmFsdWU6IFJlYWN0IGNvdWxkIG5vdCBzZW5kIGl0IGZyb20gdGhlIHNlcnZlci5cIlxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBzdHJpbmdUb0NodW5rKFxuICAgICAgICAgICAgICBcIjpXXCIgKyBwcmV2aW91c1ByZXBhcmUgKyBcIlxcblwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmVxdWVzdC5jb21wbGV0ZWREZWJ1Z0NodW5rcy5wdXNoKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBvcmlnaW5hbE1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgICBkZXNjcmlwdG9yICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3cmFwcGVyTWV0aG9kLCBcIm5hbWVcIiwgZGVzY3JpcHRvcik7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb25zb2xlSW5zdCwgbWV0aG9kTmFtZSwge1xuICAgICAgICAgIHZhbHVlOiB3cmFwcGVyTWV0aG9kXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRDdXJyZW50U3RhY2tJbkRFVigpIHtcbiAgICAgIHZhciBvd25lciA9IHJlc29sdmVPd25lcigpO1xuICAgICAgaWYgKG51bGwgPT09IG93bmVyKSByZXR1cm4gXCJcIjtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBpbmZvID0gXCJcIjtcbiAgICAgICAgaWYgKG93bmVyLm93bmVyIHx8IFwic3RyaW5nXCIgIT09IHR5cGVvZiBvd25lci5uYW1lKSB7XG4gICAgICAgICAgZm9yICg7IG93bmVyOyApIHtcbiAgICAgICAgICAgIHZhciBvd25lclN0YWNrID0gb3duZXIuZGVidWdTdGFjaztcbiAgICAgICAgICAgIGlmIChudWxsICE9IG93bmVyU3RhY2spIHtcbiAgICAgICAgICAgICAgaWYgKChvd25lciA9IG93bmVyLm93bmVyKSkge1xuICAgICAgICAgICAgICAgIHZhciBKU0NvbXBpbGVyX3RlbXBfY29uc3QgPSBpbmZvO1xuICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IG93bmVyU3RhY2ssXG4gICAgICAgICAgICAgICAgICBwcmV2UHJlcGFyZVN0YWNrVHJhY2UgPSBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtcbiAgICAgICAgICAgICAgICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHByZXBhcmVTdGFja1RyYWNlO1xuICAgICAgICAgICAgICAgIHZhciBzdGFjayA9IGVycm9yLnN0YWNrO1xuICAgICAgICAgICAgICAgIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gcHJldlByZXBhcmVTdGFja1RyYWNlO1xuICAgICAgICAgICAgICAgIHN0YWNrLnN0YXJ0c1dpdGgoXCJFcnJvcjogcmVhY3Qtc3RhY2stdG9wLWZyYW1lXFxuXCIpICYmXG4gICAgICAgICAgICAgICAgICAoc3RhY2sgPSBzdGFjay5zbGljZSgyOSkpO1xuICAgICAgICAgICAgICAgIHZhciBpZHggPSBzdGFjay5pbmRleE9mKFwiXFxuXCIpO1xuICAgICAgICAgICAgICAgIC0xICE9PSBpZHggJiYgKHN0YWNrID0gc3RhY2suc2xpY2UoaWR4ICsgMSkpO1xuICAgICAgICAgICAgICAgIGlkeCA9IHN0YWNrLmluZGV4T2YoXCJyZWFjdF9zdGFja19ib3R0b21fZnJhbWVcIik7XG4gICAgICAgICAgICAgICAgLTEgIT09IGlkeCAmJiAoaWR4ID0gc3RhY2subGFzdEluZGV4T2YoXCJcXG5cIiwgaWR4KSk7XG4gICAgICAgICAgICAgICAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgICAgICAgICAgICAgICAtMSAhPT0gaWR4ID8gKHN0YWNrID0gc3RhY2suc2xpY2UoMCwgaWR4KSkgOiBcIlwiO1xuICAgICAgICAgICAgICAgIGluZm8gPVxuICAgICAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wX2NvbnN0ICsgKFwiXFxuXCIgKyBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAgPSBpbmZvO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcF9jb25zdCA9IG93bmVyLm5hbWU7XG4gICAgICAgICAgaWYgKHZvaWQgMCA9PT0gcHJlZml4KVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICAgICAgKHByZWZpeCA9XG4gICAgICAgICAgICAgICAgKChlcnJvciA9IHguc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLykpICYmIGVycm9yWzFdKSB8fFxuICAgICAgICAgICAgICAgIFwiXCIpLFxuICAgICAgICAgICAgICAgIChzdWZmaXggPVxuICAgICAgICAgICAgICAgICAgLTEgPCB4LnN0YWNrLmluZGV4T2YoXCJcXG4gICAgYXRcIilcbiAgICAgICAgICAgICAgICAgICAgPyBcIiAoPGFub255bW91cz4pXCJcbiAgICAgICAgICAgICAgICAgICAgOiAtMSA8IHguc3RhY2suaW5kZXhPZihcIkBcIilcbiAgICAgICAgICAgICAgICAgICAgICA/IFwiQHVua25vd246MDowXCJcbiAgICAgICAgICAgICAgICAgICAgICA6IFwiXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCA9XG4gICAgICAgICAgICBcIlxcblwiICsgcHJlZml4ICsgSlNDb21waWxlcl90ZW1wX2NvbnN0ICsgc3VmZml4O1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCA9XG4gICAgICAgICAgXCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIiArIHgubWVzc2FnZSArIFwiXFxuXCIgKyB4LnN0YWNrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGVmYXVsdEVycm9ySGFuZGxlcihlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIFJlcXVlc3RJbnN0YW5jZShcbiAgICAgIHR5cGUsXG4gICAgICBtb2RlbCxcbiAgICAgIGJ1bmRsZXJDb25maWcsXG4gICAgICBvbkVycm9yLFxuICAgICAgb25Qb3N0cG9uZSxcbiAgICAgIG9uQWxsUmVhZHksXG4gICAgICBvbkZhdGFsRXJyb3IsXG4gICAgICBpZGVudGlmaWVyUHJlZml4LFxuICAgICAgdGVtcG9yYXJ5UmVmZXJlbmNlcyxcbiAgICAgIGVudmlyb25tZW50TmFtZSxcbiAgICAgIGZpbHRlclN0YWNrRnJhbWUsXG4gICAgICBrZWVwRGVidWdBbGl2ZVxuICAgICkge1xuICAgICAgaWYgKFxuICAgICAgICBudWxsICE9PSBSZWFjdFNoYXJlZEludGVybmFsc1NlcnZlci5BICYmXG4gICAgICAgIFJlYWN0U2hhcmVkSW50ZXJuYWxzU2VydmVyLkEgIT09IERlZmF1bHRBc3luY0Rpc3BhdGNoZXJcbiAgICAgIClcbiAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgXCJDdXJyZW50bHkgUmVhY3Qgb25seSBzdXBwb3J0cyBvbmUgUlNDIHJlbmRlcmVyIGF0IGEgdGltZS5cIlxuICAgICAgICApO1xuICAgICAgUmVhY3RTaGFyZWRJbnRlcm5hbHNTZXJ2ZXIuQSA9IERlZmF1bHRBc3luY0Rpc3BhdGNoZXI7XG4gICAgICBSZWFjdFNoYXJlZEludGVybmFsc1NlcnZlci5nZXRDdXJyZW50U3RhY2sgPSBnZXRDdXJyZW50U3RhY2tJbkRFVjtcbiAgICAgIHZhciBhYm9ydFNldCA9IG5ldyBTZXQoKSxcbiAgICAgICAgcGluZ2VkVGFza3MgPSBbXSxcbiAgICAgICAgaGludHMgPSBuZXcgU2V0KCk7XG4gICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgdGhpcy5zdGF0dXMgPSAxMDtcbiAgICAgIHRoaXMuZmx1c2hTY2hlZHVsZWQgPSAhMTtcbiAgICAgIHRoaXMuZGVzdGluYXRpb24gPSB0aGlzLmZhdGFsRXJyb3IgPSBudWxsO1xuICAgICAgdGhpcy5idW5kbGVyQ29uZmlnID0gYnVuZGxlckNvbmZpZztcbiAgICAgIHRoaXMuY2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgICB0aGlzLmNhY2hlQ29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICAgIHRoaXMucGVuZGluZ0NodW5rcyA9IHRoaXMubmV4dENodW5rSWQgPSAwO1xuICAgICAgdGhpcy5oaW50cyA9IGhpbnRzO1xuICAgICAgdGhpcy5hYm9ydGFibGVUYXNrcyA9IGFib3J0U2V0O1xuICAgICAgdGhpcy5waW5nZWRUYXNrcyA9IHBpbmdlZFRhc2tzO1xuICAgICAgdGhpcy5jb21wbGV0ZWRJbXBvcnRDaHVua3MgPSBbXTtcbiAgICAgIHRoaXMuY29tcGxldGVkSGludENodW5rcyA9IFtdO1xuICAgICAgdGhpcy5jb21wbGV0ZWRSZWd1bGFyQ2h1bmtzID0gW107XG4gICAgICB0aGlzLmNvbXBsZXRlZEVycm9yQ2h1bmtzID0gW107XG4gICAgICB0aGlzLndyaXR0ZW5TeW1ib2xzID0gbmV3IE1hcCgpO1xuICAgICAgdGhpcy53cml0dGVuQ2xpZW50UmVmZXJlbmNlcyA9IG5ldyBNYXAoKTtcbiAgICAgIHRoaXMud3JpdHRlblNlcnZlclJlZmVyZW5jZXMgPSBuZXcgTWFwKCk7XG4gICAgICB0aGlzLndyaXR0ZW5PYmplY3RzID0gbmV3IFdlYWtNYXAoKTtcbiAgICAgIHRoaXMudGVtcG9yYXJ5UmVmZXJlbmNlcyA9IHRlbXBvcmFyeVJlZmVyZW5jZXM7XG4gICAgICB0aGlzLmlkZW50aWZpZXJQcmVmaXggPSBpZGVudGlmaWVyUHJlZml4IHx8IFwiXCI7XG4gICAgICB0aGlzLmlkZW50aWZpZXJDb3VudCA9IDE7XG4gICAgICB0aGlzLnRhaW50Q2xlYW51cFF1ZXVlID0gW107XG4gICAgICB0aGlzLm9uRXJyb3IgPSB2b2lkIDAgPT09IG9uRXJyb3IgPyBkZWZhdWx0RXJyb3JIYW5kbGVyIDogb25FcnJvcjtcbiAgICAgIHRoaXMub25Qb3N0cG9uZSA9XG4gICAgICAgIHZvaWQgMCA9PT0gb25Qb3N0cG9uZSA/IGRlZmF1bHRQb3N0cG9uZUhhbmRsZXIgOiBvblBvc3Rwb25lO1xuICAgICAgdGhpcy5vbkFsbFJlYWR5ID0gb25BbGxSZWFkeTtcbiAgICAgIHRoaXMub25GYXRhbEVycm9yID0gb25GYXRhbEVycm9yO1xuICAgICAgdGhpcy5wZW5kaW5nRGVidWdDaHVua3MgPSAwO1xuICAgICAgdGhpcy5jb21wbGV0ZWREZWJ1Z0NodW5rcyA9IFtdO1xuICAgICAgdGhpcy5kZWJ1Z0Rlc3RpbmF0aW9uID0gbnVsbDtcbiAgICAgIHRoaXMuZW52aXJvbm1lbnROYW1lID1cbiAgICAgICAgdm9pZCAwID09PSBlbnZpcm9ubWVudE5hbWVcbiAgICAgICAgICA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFwiU2VydmVyXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgOiBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBlbnZpcm9ubWVudE5hbWVcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbnZpcm9ubWVudE5hbWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogZW52aXJvbm1lbnROYW1lO1xuICAgICAgdGhpcy5maWx0ZXJTdGFja0ZyYW1lID1cbiAgICAgICAgdm9pZCAwID09PSBmaWx0ZXJTdGFja0ZyYW1lXG4gICAgICAgICAgPyBkZWZhdWx0RmlsdGVyU3RhY2tGcmFtZVxuICAgICAgICAgIDogZmlsdGVyU3RhY2tGcmFtZTtcbiAgICAgIHRoaXMuZGlkV2FybkZvcktleSA9IG51bGw7XG4gICAgICB0aGlzLndyaXR0ZW5EZWJ1Z09iamVjdHMgPSBuZXcgV2Vha01hcCgpO1xuICAgICAgdGhpcy5kZWZlcnJlZERlYnVnT2JqZWN0cyA9IGtlZXBEZWJ1Z0FsaXZlXG4gICAgICAgID8geyByZXRhaW5lZDogbmV3IE1hcCgpLCBleGlzdGluZzogbmV3IE1hcCgpIH1cbiAgICAgICAgOiBudWxsO1xuICAgICAgdHlwZSA9IHRoaXMudGltZU9yaWdpbiA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgZW1pdFRpbWVPcmlnaW5DaHVuayh0aGlzLCB0eXBlICsgcGVyZm9ybWFuY2UudGltZU9yaWdpbik7XG4gICAgICB0aGlzLmFib3J0VGltZSA9IC0wO1xuICAgICAgbW9kZWwgPSBjcmVhdGVUYXNrKFxuICAgICAgICB0aGlzLFxuICAgICAgICBtb2RlbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgITEsXG4gICAgICAgIGFib3J0U2V0LFxuICAgICAgICB0eXBlLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgICAgcGluZ2VkVGFza3MucHVzaChtb2RlbCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlcXVlc3QoXG4gICAgICBtb2RlbCxcbiAgICAgIGJ1bmRsZXJDb25maWcsXG4gICAgICBvbkVycm9yLFxuICAgICAgaWRlbnRpZmllclByZWZpeCxcbiAgICAgIG9uUG9zdHBvbmUsXG4gICAgICB0ZW1wb3JhcnlSZWZlcmVuY2VzLFxuICAgICAgZW52aXJvbm1lbnROYW1lLFxuICAgICAgZmlsdGVyU3RhY2tGcmFtZSxcbiAgICAgIGtlZXBEZWJ1Z0FsaXZlXG4gICAgKSB7XG4gICAgICByZXNldE93bmVyU3RhY2tMaW1pdCgpO1xuICAgICAgcmV0dXJuIG5ldyBSZXF1ZXN0SW5zdGFuY2UoXG4gICAgICAgIDIwLFxuICAgICAgICBtb2RlbCxcbiAgICAgICAgYnVuZGxlckNvbmZpZyxcbiAgICAgICAgb25FcnJvcixcbiAgICAgICAgb25Qb3N0cG9uZSxcbiAgICAgICAgbm9vcCxcbiAgICAgICAgbm9vcCxcbiAgICAgICAgaWRlbnRpZmllclByZWZpeCxcbiAgICAgICAgdGVtcG9yYXJ5UmVmZXJlbmNlcyxcbiAgICAgICAgZW52aXJvbm1lbnROYW1lLFxuICAgICAgICBmaWx0ZXJTdGFja0ZyYW1lLFxuICAgICAgICBrZWVwRGVidWdBbGl2ZVxuICAgICAgKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlUHJlcmVuZGVyUmVxdWVzdChcbiAgICAgIG1vZGVsLFxuICAgICAgYnVuZGxlckNvbmZpZyxcbiAgICAgIG9uQWxsUmVhZHksXG4gICAgICBvbkZhdGFsRXJyb3IsXG4gICAgICBvbkVycm9yLFxuICAgICAgaWRlbnRpZmllclByZWZpeCxcbiAgICAgIG9uUG9zdHBvbmUsXG4gICAgICB0ZW1wb3JhcnlSZWZlcmVuY2VzLFxuICAgICAgZW52aXJvbm1lbnROYW1lLFxuICAgICAgZmlsdGVyU3RhY2tGcmFtZSxcbiAgICAgIGtlZXBEZWJ1Z0FsaXZlXG4gICAgKSB7XG4gICAgICByZXNldE93bmVyU3RhY2tMaW1pdCgpO1xuICAgICAgcmV0dXJuIG5ldyBSZXF1ZXN0SW5zdGFuY2UoXG4gICAgICAgIDIxLFxuICAgICAgICBtb2RlbCxcbiAgICAgICAgYnVuZGxlckNvbmZpZyxcbiAgICAgICAgb25FcnJvcixcbiAgICAgICAgb25Qb3N0cG9uZSxcbiAgICAgICAgb25BbGxSZWFkeSxcbiAgICAgICAgb25GYXRhbEVycm9yLFxuICAgICAgICBpZGVudGlmaWVyUHJlZml4LFxuICAgICAgICB0ZW1wb3JhcnlSZWZlcmVuY2VzLFxuICAgICAgICBlbnZpcm9ubWVudE5hbWUsXG4gICAgICAgIGZpbHRlclN0YWNrRnJhbWUsXG4gICAgICAgIGtlZXBEZWJ1Z0FsaXZlXG4gICAgICApO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZXNvbHZlUmVxdWVzdCgpIHtcbiAgICAgIGlmIChjdXJyZW50UmVxdWVzdCkgcmV0dXJuIGN1cnJlbnRSZXF1ZXN0O1xuICAgICAgaWYgKHN1cHBvcnRzUmVxdWVzdFN0b3JhZ2UpIHtcbiAgICAgICAgdmFyIHN0b3JlID0gcmVxdWVzdFN0b3JhZ2UuZ2V0U3RvcmUoKTtcbiAgICAgICAgaWYgKHN0b3JlKSByZXR1cm4gc3RvcmU7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2VyaWFsaXplRGVidWdUaGVuYWJsZShyZXF1ZXN0LCBjb3VudGVyLCB0aGVuYWJsZSkge1xuICAgICAgcmVxdWVzdC5wZW5kaW5nRGVidWdDaHVua3MrKztcbiAgICAgIHZhciBpZCA9IHJlcXVlc3QubmV4dENodW5rSWQrKyxcbiAgICAgICAgcmVmID0gXCIkQFwiICsgaWQudG9TdHJpbmcoMTYpO1xuICAgICAgcmVxdWVzdC53cml0dGVuRGVidWdPYmplY3RzLnNldCh0aGVuYWJsZSwgcmVmKTtcbiAgICAgIHN3aXRjaCAodGhlbmFibGUuc3RhdHVzKSB7XG4gICAgICAgIGNhc2UgXCJmdWxmaWxsZWRcIjpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgZW1pdE91dGxpbmVkRGVidWdNb2RlbENodW5rKHJlcXVlc3QsIGlkLCBjb3VudGVyLCB0aGVuYWJsZS52YWx1ZSksXG4gICAgICAgICAgICByZWZcbiAgICAgICAgICApO1xuICAgICAgICBjYXNlIFwicmVqZWN0ZWRcIjpcbiAgICAgICAgICByZXR1cm4gZW1pdEVycm9yQ2h1bmsocmVxdWVzdCwgaWQsIFwiXCIsIHRoZW5hYmxlLnJlYXNvbiwgITApLCByZWY7XG4gICAgICB9XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IEFCT1JUSU5HKVxuICAgICAgICByZXR1cm4gZW1pdERlYnVnSGFsdENodW5rKHJlcXVlc3QsIGlkKSwgcmVmO1xuICAgICAgdmFyIGRlZmVycmVkRGVidWdPYmplY3RzID0gcmVxdWVzdC5kZWZlcnJlZERlYnVnT2JqZWN0cztcbiAgICAgIGlmIChudWxsICE9PSBkZWZlcnJlZERlYnVnT2JqZWN0cylcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBkZWZlcnJlZERlYnVnT2JqZWN0cy5yZXRhaW5lZC5zZXQoaWQsIHRoZW5hYmxlKSxcbiAgICAgICAgICAocmVmID0gXCIkWUBcIiArIGlkLnRvU3RyaW5nKDE2KSksXG4gICAgICAgICAgcmVxdWVzdC53cml0dGVuRGVidWdPYmplY3RzLnNldCh0aGVuYWJsZSwgcmVmKSxcbiAgICAgICAgICByZWZcbiAgICAgICAgKTtcbiAgICAgIHZhciBjYW5jZWxsZWQgPSAhMTtcbiAgICAgIHRoZW5hYmxlLnRoZW4oXG4gICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGNhbmNlbGxlZCB8fFxuICAgICAgICAgICAgKChjYW5jZWxsZWQgPSAhMCksXG4gICAgICAgICAgICByZXF1ZXN0LnN0YXR1cyA9PT0gQUJPUlRJTkdcbiAgICAgICAgICAgICAgPyBlbWl0RGVidWdIYWx0Q2h1bmsocmVxdWVzdCwgaWQpXG4gICAgICAgICAgICAgIDogZW1pdE91dGxpbmVkRGVidWdNb2RlbENodW5rKHJlcXVlc3QsIGlkLCBjb3VudGVyLCB2YWx1ZSksXG4gICAgICAgICAgICBlbnF1ZXVlRmx1c2gocmVxdWVzdCkpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgY2FuY2VsbGVkIHx8XG4gICAgICAgICAgICAoKGNhbmNlbGxlZCA9ICEwKSxcbiAgICAgICAgICAgIHJlcXVlc3Quc3RhdHVzID09PSBBQk9SVElOR1xuICAgICAgICAgICAgICA/IGVtaXREZWJ1Z0hhbHRDaHVuayhyZXF1ZXN0LCBpZClcbiAgICAgICAgICAgICAgOiBlbWl0RXJyb3JDaHVuayhyZXF1ZXN0LCBpZCwgXCJcIiwgcmVhc29uLCAhMCksXG4gICAgICAgICAgICBlbnF1ZXVlRmx1c2gocmVxdWVzdCkpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbmNlbGxlZCB8fFxuICAgICAgICAgICgoY2FuY2VsbGVkID0gITApLFxuICAgICAgICAgIGVtaXREZWJ1Z0hhbHRDaHVuayhyZXF1ZXN0LCBpZCksXG4gICAgICAgICAgZW5xdWV1ZUZsdXNoKHJlcXVlc3QpLFxuICAgICAgICAgIChjb3VudGVyID0gcmVxdWVzdCA9IG51bGwpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlZjtcbiAgICB9XG4gICAgZnVuY3Rpb24gZW1pdFJlcXVlc3RlZERlYnVnVGhlbmFibGUocmVxdWVzdCwgaWQsIGNvdW50ZXIsIHRoZW5hYmxlKSB7XG4gICAgICB0aGVuYWJsZS50aGVuKFxuICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXF1ZXN0LnN0YXR1cyA9PT0gQUJPUlRJTkdcbiAgICAgICAgICAgID8gZW1pdERlYnVnSGFsdENodW5rKHJlcXVlc3QsIGlkKVxuICAgICAgICAgICAgOiBlbWl0T3V0bGluZWREZWJ1Z01vZGVsQ2h1bmsocmVxdWVzdCwgaWQsIGNvdW50ZXIsIHZhbHVlKTtcbiAgICAgICAgICBlbnF1ZXVlRmx1c2gocmVxdWVzdCk7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICByZXF1ZXN0LnN0YXR1cyA9PT0gQUJPUlRJTkdcbiAgICAgICAgICAgID8gZW1pdERlYnVnSGFsdENodW5rKHJlcXVlc3QsIGlkKVxuICAgICAgICAgICAgOiBlbWl0RXJyb3JDaHVuayhyZXF1ZXN0LCBpZCwgXCJcIiwgcmVhc29uLCAhMCk7XG4gICAgICAgICAgZW5xdWV1ZUZsdXNoKHJlcXVlc3QpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXJpYWxpemVUaGVuYWJsZShyZXF1ZXN0LCB0YXNrLCB0aGVuYWJsZSkge1xuICAgICAgdmFyIG5ld1Rhc2sgPSBjcmVhdGVUYXNrKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICB0aGVuYWJsZSxcbiAgICAgICAgdGFzay5rZXlQYXRoLFxuICAgICAgICB0YXNrLmltcGxpY2l0U2xvdCxcbiAgICAgICAgcmVxdWVzdC5hYm9ydGFibGVUYXNrcyxcbiAgICAgICAgdGFzay50aW1lLFxuICAgICAgICB0YXNrLmRlYnVnT3duZXIsXG4gICAgICAgIHRhc2suZGVidWdTdGFjayxcbiAgICAgICAgdGFzay5kZWJ1Z1Rhc2tcbiAgICAgICk7XG4gICAgICBzd2l0Y2ggKHRoZW5hYmxlLnN0YXR1cykge1xuICAgICAgICBjYXNlIFwiZnVsZmlsbGVkXCI6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGZvcndhcmREZWJ1Z0luZm9Gcm9tVGhlbmFibGUoXG4gICAgICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgICAgIG5ld1Rhc2ssXG4gICAgICAgICAgICAgIHRoZW5hYmxlLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgKG5ld1Rhc2subW9kZWwgPSB0aGVuYWJsZS52YWx1ZSksXG4gICAgICAgICAgICBwaW5nVGFzayhyZXF1ZXN0LCBuZXdUYXNrKSxcbiAgICAgICAgICAgIG5ld1Rhc2suaWRcbiAgICAgICAgICApO1xuICAgICAgICBjYXNlIFwicmVqZWN0ZWRcIjpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgZm9yd2FyZERlYnVnSW5mb0Zyb21UaGVuYWJsZShcbiAgICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgICAgbmV3VGFzayxcbiAgICAgICAgICAgICAgdGhlbmFibGUsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIG51bGxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBlcnJvcmVkVGFzayhyZXF1ZXN0LCBuZXdUYXNrLCB0aGVuYWJsZS5yZWFzb24pLFxuICAgICAgICAgICAgbmV3VGFzay5pZFxuICAgICAgICAgICk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSBBQk9SVElORylcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIHJlcXVlc3QuYWJvcnRhYmxlVGFza3MuZGVsZXRlKG5ld1Rhc2spLFxuICAgICAgICAgICAgICAodGFzayA9IHJlcXVlc3QuZmF0YWxFcnJvciksXG4gICAgICAgICAgICAgIGFib3J0VGFzayhuZXdUYXNrKSxcbiAgICAgICAgICAgICAgZmluaXNoQWJvcnRlZFRhc2sobmV3VGFzaywgcmVxdWVzdCwgdGFzayksXG4gICAgICAgICAgICAgIG5ld1Rhc2suaWRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgXCJzdHJpbmdcIiAhPT0gdHlwZW9mIHRoZW5hYmxlLnN0YXR1cyAmJlxuICAgICAgICAgICAgKCh0aGVuYWJsZS5zdGF0dXMgPSBcInBlbmRpbmdcIiksXG4gICAgICAgICAgICB0aGVuYWJsZS50aGVuKFxuICAgICAgICAgICAgICBmdW5jdGlvbiAoZnVsZmlsbGVkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBcInBlbmRpbmdcIiA9PT0gdGhlbmFibGUuc3RhdHVzICYmXG4gICAgICAgICAgICAgICAgICAoKHRoZW5hYmxlLnN0YXR1cyA9IFwiZnVsZmlsbGVkXCIpLFxuICAgICAgICAgICAgICAgICAgKHRoZW5hYmxlLnZhbHVlID0gZnVsZmlsbGVkVmFsdWUpKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgXCJwZW5kaW5nXCIgPT09IHRoZW5hYmxlLnN0YXR1cyAmJlxuICAgICAgICAgICAgICAgICAgKCh0aGVuYWJsZS5zdGF0dXMgPSBcInJlamVjdGVkXCIpLCAodGhlbmFibGUucmVhc29uID0gZXJyb3IpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKSk7XG4gICAgICB9XG4gICAgICB0aGVuYWJsZS50aGVuKFxuICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBmb3J3YXJkRGVidWdJbmZvRnJvbUN1cnJlbnRDb250ZXh0KHJlcXVlc3QsIG5ld1Rhc2ssIHRoZW5hYmxlKTtcbiAgICAgICAgICBuZXdUYXNrLm1vZGVsID0gdmFsdWU7XG4gICAgICAgICAgcGluZ1Rhc2socmVxdWVzdCwgbmV3VGFzayk7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAwID09PSBuZXdUYXNrLnN0YXR1cyAmJlxuICAgICAgICAgICAgKChuZXdUYXNrLnRpbWVkID0gITApLFxuICAgICAgICAgICAgZXJyb3JlZFRhc2socmVxdWVzdCwgbmV3VGFzaywgcmVhc29uKSxcbiAgICAgICAgICAgIGVucXVldWVGbHVzaChyZXF1ZXN0KSk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICByZXR1cm4gbmV3VGFzay5pZDtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2VyaWFsaXplUmVhZGFibGVTdHJlYW0ocmVxdWVzdCwgdGFzaywgc3RyZWFtKSB7XG4gICAgICBmdW5jdGlvbiBwcm9ncmVzcyhlbnRyeSkge1xuICAgICAgICBpZiAoMCA9PT0gc3RyZWFtVGFzay5zdGF0dXMpXG4gICAgICAgICAgaWYgKGVudHJ5LmRvbmUpXG4gICAgICAgICAgICAoc3RyZWFtVGFzay5zdGF0dXMgPSAxKSxcbiAgICAgICAgICAgICAgKGVudHJ5ID0gc3RyZWFtVGFzay5pZC50b1N0cmluZygxNikgKyBcIjpDXFxuXCIpLFxuICAgICAgICAgICAgICByZXF1ZXN0LmNvbXBsZXRlZFJlZ3VsYXJDaHVua3MucHVzaChzdHJpbmdUb0NodW5rKGVudHJ5KSksXG4gICAgICAgICAgICAgIHJlcXVlc3QuYWJvcnRhYmxlVGFza3MuZGVsZXRlKHN0cmVhbVRhc2spLFxuICAgICAgICAgICAgICByZXF1ZXN0LmNhY2hlQ29udHJvbGxlci5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgICBcImFib3J0XCIsXG4gICAgICAgICAgICAgICAgYWJvcnRTdHJlYW1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgZW5xdWV1ZUZsdXNoKHJlcXVlc3QpLFxuICAgICAgICAgICAgICBjYWxsT25BbGxSZWFkeUlmUmVhZHkocmVxdWVzdCk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgKHN0cmVhbVRhc2subW9kZWwgPSBlbnRyeS52YWx1ZSksXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5wZW5kaW5nQ2h1bmtzKyssXG4gICAgICAgICAgICAgICAgdHJ5U3RyZWFtVGFzayhyZXF1ZXN0LCBzdHJlYW1UYXNrKSxcbiAgICAgICAgICAgICAgICBlbnF1ZXVlRmx1c2gocmVxdWVzdCksXG4gICAgICAgICAgICAgICAgcmVhZGVyLnJlYWQoKS50aGVuKHByb2dyZXNzLCBlcnJvcik7XG4gICAgICAgICAgICB9IGNhdGNoICh4JDApIHtcbiAgICAgICAgICAgICAgZXJyb3IoeCQwKTtcbiAgICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGVycm9yKHJlYXNvbikge1xuICAgICAgICAwID09PSBzdHJlYW1UYXNrLnN0YXR1cyAmJlxuICAgICAgICAgIChyZXF1ZXN0LmNhY2hlQ29udHJvbGxlci5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgIFwiYWJvcnRcIixcbiAgICAgICAgICAgIGFib3J0U3RyZWFtXG4gICAgICAgICAgKSxcbiAgICAgICAgICBlcnJvcmVkVGFzayhyZXF1ZXN0LCBzdHJlYW1UYXNrLCByZWFzb24pLFxuICAgICAgICAgIGVucXVldWVGbHVzaChyZXF1ZXN0KSxcbiAgICAgICAgICByZWFkZXIuY2FuY2VsKHJlYXNvbikudGhlbihlcnJvciwgZXJyb3IpKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGFib3J0U3RyZWFtKCkge1xuICAgICAgICBpZiAoMCA9PT0gc3RyZWFtVGFzay5zdGF0dXMpIHtcbiAgICAgICAgICB2YXIgc2lnbmFsID0gcmVxdWVzdC5jYWNoZUNvbnRyb2xsZXIuc2lnbmFsO1xuICAgICAgICAgIHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRTdHJlYW0pO1xuICAgICAgICAgIHNpZ25hbCA9IHNpZ25hbC5yZWFzb247XG4gICAgICAgICAgZXJyb3JlZFRhc2socmVxdWVzdCwgc3RyZWFtVGFzaywgc2lnbmFsKTtcbiAgICAgICAgICBlbnF1ZXVlRmx1c2gocmVxdWVzdCk7XG4gICAgICAgICAgcmVhZGVyLmNhbmNlbChzaWduYWwpLnRoZW4oZXJyb3IsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHN1cHBvcnRzQllPQiA9IHN0cmVhbS5zdXBwb3J0c0JZT0I7XG4gICAgICBpZiAodm9pZCAwID09PSBzdXBwb3J0c0JZT0IpXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgc3RyZWFtLmdldFJlYWRlcih7IG1vZGU6IFwiYnlvYlwiIH0pLnJlbGVhc2VMb2NrKCksIChzdXBwb3J0c0JZT0IgPSAhMCk7XG4gICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICBzdXBwb3J0c0JZT0IgPSAhMTtcbiAgICAgICAgfVxuICAgICAgdmFyIHJlYWRlciA9IHN0cmVhbS5nZXRSZWFkZXIoKSxcbiAgICAgICAgc3RyZWFtVGFzayA9IGNyZWF0ZVRhc2soXG4gICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICB0YXNrLm1vZGVsLFxuICAgICAgICAgIHRhc2sua2V5UGF0aCxcbiAgICAgICAgICB0YXNrLmltcGxpY2l0U2xvdCxcbiAgICAgICAgICByZXF1ZXN0LmFib3J0YWJsZVRhc2tzLFxuICAgICAgICAgIHRhc2sudGltZSxcbiAgICAgICAgICB0YXNrLmRlYnVnT3duZXIsXG4gICAgICAgICAgdGFzay5kZWJ1Z1N0YWNrLFxuICAgICAgICAgIHRhc2suZGVidWdUYXNrXG4gICAgICAgICk7XG4gICAgICByZXF1ZXN0LnBlbmRpbmdDaHVua3MrKztcbiAgICAgIHRhc2sgPVxuICAgICAgICBzdHJlYW1UYXNrLmlkLnRvU3RyaW5nKDE2KSArIFwiOlwiICsgKHN1cHBvcnRzQllPQiA/IFwiclwiIDogXCJSXCIpICsgXCJcXG5cIjtcbiAgICAgIHJlcXVlc3QuY29tcGxldGVkUmVndWxhckNodW5rcy5wdXNoKHN0cmluZ1RvQ2h1bmsodGFzaykpO1xuICAgICAgcmVxdWVzdC5jYWNoZUNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBhYm9ydFN0cmVhbSk7XG4gICAgICByZWFkZXIucmVhZCgpLnRoZW4ocHJvZ3Jlc3MsIGVycm9yKTtcbiAgICAgIHJldHVybiBzZXJpYWxpemVCeVZhbHVlSUQoc3RyZWFtVGFzay5pZCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNlcmlhbGl6ZUFzeW5jSXRlcmFibGUocmVxdWVzdCwgdGFzaywgaXRlcmFibGUsIGl0ZXJhdG9yKSB7XG4gICAgICBmdW5jdGlvbiBwcm9ncmVzcyhlbnRyeSkge1xuICAgICAgICBpZiAoMCA9PT0gc3RyZWFtVGFzay5zdGF0dXMpXG4gICAgICAgICAgaWYgKGVudHJ5LmRvbmUpIHtcbiAgICAgICAgICAgIHN0cmVhbVRhc2suc3RhdHVzID0gMTtcbiAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IGVudHJ5LnZhbHVlKVxuICAgICAgICAgICAgICB2YXIgZW5kU3RyZWFtUm93ID0gc3RyZWFtVGFzay5pZC50b1N0cmluZygxNikgKyBcIjpDXFxuXCI7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIGNodW5rSWQgPSBvdXRsaW5lTW9kZWwocmVxdWVzdCwgZW50cnkudmFsdWUpO1xuICAgICAgICAgICAgICAgIGVuZFN0cmVhbVJvdyA9XG4gICAgICAgICAgICAgICAgICBzdHJlYW1UYXNrLmlkLnRvU3RyaW5nKDE2KSArXG4gICAgICAgICAgICAgICAgICBcIjpDXCIgK1xuICAgICAgICAgICAgICAgICAgc3RyaW5naWZ5KHNlcmlhbGl6ZUJ5VmFsdWVJRChjaHVua0lkKSkgK1xuICAgICAgICAgICAgICAgICAgXCJcXG5cIjtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAgICAgICAgIGVycm9yKHgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVxdWVzdC5jb21wbGV0ZWRSZWd1bGFyQ2h1bmtzLnB1c2goc3RyaW5nVG9DaHVuayhlbmRTdHJlYW1Sb3cpKTtcbiAgICAgICAgICAgIHJlcXVlc3QuYWJvcnRhYmxlVGFza3MuZGVsZXRlKHN0cmVhbVRhc2spO1xuICAgICAgICAgICAgcmVxdWVzdC5jYWNoZUNvbnRyb2xsZXIuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgIFwiYWJvcnRcIixcbiAgICAgICAgICAgICAgYWJvcnRJdGVyYWJsZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGVucXVldWVGbHVzaChyZXF1ZXN0KTtcbiAgICAgICAgICAgIGNhbGxPbkFsbFJlYWR5SWZSZWFkeShyZXF1ZXN0KTtcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIChzdHJlYW1UYXNrLm1vZGVsID0gZW50cnkudmFsdWUpLFxuICAgICAgICAgICAgICAgIHJlcXVlc3QucGVuZGluZ0NodW5rcysrLFxuICAgICAgICAgICAgICAgIHRyeVN0cmVhbVRhc2socmVxdWVzdCwgc3RyZWFtVGFzayksXG4gICAgICAgICAgICAgICAgZW5xdWV1ZUZsdXNoKHJlcXVlc3QpLFxuICAgICAgICAgICAgICAgIGNhbGxJdGVyYXRvckluREVWKGl0ZXJhdG9yLCBwcm9ncmVzcywgZXJyb3IpO1xuICAgICAgICAgICAgfSBjYXRjaCAoeCQxKSB7XG4gICAgICAgICAgICAgIGVycm9yKHgkMSk7XG4gICAgICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBlcnJvcihyZWFzb24pIHtcbiAgICAgICAgMCA9PT0gc3RyZWFtVGFzay5zdGF0dXMgJiZcbiAgICAgICAgICAocmVxdWVzdC5jYWNoZUNvbnRyb2xsZXIuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICBcImFib3J0XCIsXG4gICAgICAgICAgICBhYm9ydEl0ZXJhYmxlXG4gICAgICAgICAgKSxcbiAgICAgICAgICBlcnJvcmVkVGFzayhyZXF1ZXN0LCBzdHJlYW1UYXNrLCByZWFzb24pLFxuICAgICAgICAgIGVucXVldWVGbHVzaChyZXF1ZXN0KSxcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpdGVyYXRvci50aHJvdyAmJlxuICAgICAgICAgICAgaXRlcmF0b3IudGhyb3cocmVhc29uKS50aGVuKGVycm9yLCBlcnJvcikpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gYWJvcnRJdGVyYWJsZSgpIHtcbiAgICAgICAgaWYgKDAgPT09IHN0cmVhbVRhc2suc3RhdHVzKSB7XG4gICAgICAgICAgdmFyIHNpZ25hbCA9IHJlcXVlc3QuY2FjaGVDb250cm9sbGVyLnNpZ25hbDtcbiAgICAgICAgICBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0SXRlcmFibGUpO1xuICAgICAgICAgIHZhciByZWFzb24gPSBzaWduYWwucmVhc29uO1xuICAgICAgICAgIGVycm9yZWRUYXNrKHJlcXVlc3QsIHN0cmVhbVRhc2ssIHNpZ25hbC5yZWFzb24pO1xuICAgICAgICAgIGVucXVldWVGbHVzaChyZXF1ZXN0KTtcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpdGVyYXRvci50aHJvdyAmJlxuICAgICAgICAgICAgaXRlcmF0b3IudGhyb3cocmVhc29uKS50aGVuKGVycm9yLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBpc0l0ZXJhdG9yID0gaXRlcmFibGUgPT09IGl0ZXJhdG9yLFxuICAgICAgICBzdHJlYW1UYXNrID0gY3JlYXRlVGFzayhcbiAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgIHRhc2subW9kZWwsXG4gICAgICAgICAgdGFzay5rZXlQYXRoLFxuICAgICAgICAgIHRhc2suaW1wbGljaXRTbG90LFxuICAgICAgICAgIHJlcXVlc3QuYWJvcnRhYmxlVGFza3MsXG4gICAgICAgICAgdGFzay50aW1lLFxuICAgICAgICAgIHRhc2suZGVidWdPd25lcixcbiAgICAgICAgICB0YXNrLmRlYnVnU3RhY2ssXG4gICAgICAgICAgdGFzay5kZWJ1Z1Rhc2tcbiAgICAgICAgKTtcbiAgICAgICh0YXNrID0gaXRlcmFibGUuX2RlYnVnSW5mbykgJiZcbiAgICAgICAgZm9yd2FyZERlYnVnSW5mbyhyZXF1ZXN0LCBzdHJlYW1UYXNrLCB0YXNrKTtcbiAgICAgIHJlcXVlc3QucGVuZGluZ0NodW5rcysrO1xuICAgICAgaXNJdGVyYXRvciA9XG4gICAgICAgIHN0cmVhbVRhc2suaWQudG9TdHJpbmcoMTYpICsgXCI6XCIgKyAoaXNJdGVyYXRvciA/IFwieFwiIDogXCJYXCIpICsgXCJcXG5cIjtcbiAgICAgIHJlcXVlc3QuY29tcGxldGVkUmVndWxhckNodW5rcy5wdXNoKHN0cmluZ1RvQ2h1bmsoaXNJdGVyYXRvcikpO1xuICAgICAgcmVxdWVzdC5jYWNoZUNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBhYm9ydEl0ZXJhYmxlKTtcbiAgICAgIGNhbGxJdGVyYXRvckluREVWKGl0ZXJhdG9yLCBwcm9ncmVzcywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHNlcmlhbGl6ZUJ5VmFsdWVJRChzdHJlYW1UYXNrLmlkKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZW1pdEhpbnQocmVxdWVzdCwgY29kZSwgbW9kZWwpIHtcbiAgICAgIG1vZGVsID0gc3RyaW5naWZ5KG1vZGVsKTtcbiAgICAgIGNvZGUgPSBzdHJpbmdUb0NodW5rKFwiOkhcIiArIGNvZGUgKyBtb2RlbCArIFwiXFxuXCIpO1xuICAgICAgcmVxdWVzdC5jb21wbGV0ZWRIaW50Q2h1bmtzLnB1c2goY29kZSk7XG4gICAgICBlbnF1ZXVlRmx1c2gocmVxdWVzdCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlYWRUaGVuYWJsZSh0aGVuYWJsZSkge1xuICAgICAgaWYgKFwiZnVsZmlsbGVkXCIgPT09IHRoZW5hYmxlLnN0YXR1cykgcmV0dXJuIHRoZW5hYmxlLnZhbHVlO1xuICAgICAgaWYgKFwicmVqZWN0ZWRcIiA9PT0gdGhlbmFibGUuc3RhdHVzKSB0aHJvdyB0aGVuYWJsZS5yZWFzb247XG4gICAgICB0aHJvdyB0aGVuYWJsZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlTGF6eVdyYXBwZXJBcm91bmRXYWtlYWJsZShyZXF1ZXN0LCB0YXNrLCB3YWtlYWJsZSkge1xuICAgICAgc3dpdGNoICh3YWtlYWJsZS5zdGF0dXMpIHtcbiAgICAgICAgY2FzZSBcImZ1bGZpbGxlZFwiOlxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBmb3J3YXJkRGVidWdJbmZvRnJvbVRoZW5hYmxlKHJlcXVlc3QsIHRhc2ssIHdha2VhYmxlLCBudWxsLCBudWxsKSxcbiAgICAgICAgICAgIHdha2VhYmxlLnZhbHVlXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSBcInJlamVjdGVkXCI6XG4gICAgICAgICAgZm9yd2FyZERlYnVnSW5mb0Zyb21UaGVuYWJsZShyZXF1ZXN0LCB0YXNrLCB3YWtlYWJsZSwgbnVsbCwgbnVsbCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgXCJzdHJpbmdcIiAhPT0gdHlwZW9mIHdha2VhYmxlLnN0YXR1cyAmJlxuICAgICAgICAgICAgKCh3YWtlYWJsZS5zdGF0dXMgPSBcInBlbmRpbmdcIiksXG4gICAgICAgICAgICB3YWtlYWJsZS50aGVuKFxuICAgICAgICAgICAgICBmdW5jdGlvbiAoZnVsZmlsbGVkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBmb3J3YXJkRGVidWdJbmZvRnJvbUN1cnJlbnRDb250ZXh0KHJlcXVlc3QsIHRhc2ssIHdha2VhYmxlKTtcbiAgICAgICAgICAgICAgICBcInBlbmRpbmdcIiA9PT0gd2FrZWFibGUuc3RhdHVzICYmXG4gICAgICAgICAgICAgICAgICAoKHdha2VhYmxlLnN0YXR1cyA9IFwiZnVsZmlsbGVkXCIpLFxuICAgICAgICAgICAgICAgICAgKHdha2VhYmxlLnZhbHVlID0gZnVsZmlsbGVkVmFsdWUpKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgZm9yd2FyZERlYnVnSW5mb0Zyb21DdXJyZW50Q29udGV4dChyZXF1ZXN0LCB0YXNrLCB3YWtlYWJsZSk7XG4gICAgICAgICAgICAgICAgXCJwZW5kaW5nXCIgPT09IHdha2VhYmxlLnN0YXR1cyAmJlxuICAgICAgICAgICAgICAgICAgKCh3YWtlYWJsZS5zdGF0dXMgPSBcInJlamVjdGVkXCIpLCAod2FrZWFibGUucmVhc29uID0gZXJyb3IpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICAkJHR5cGVvZjogUkVBQ1RfTEFaWV9UWVBFLFxuICAgICAgICBfcGF5bG9hZDogd2FrZWFibGUsXG4gICAgICAgIF9pbml0OiByZWFkVGhlbmFibGVcbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNhbGxXaXRoRGVidWdDb250ZXh0SW5ERVYocmVxdWVzdCwgdGFzaywgY2FsbGJhY2ssIGFyZykge1xuICAgICAgdmFyIGNvbXBvbmVudERlYnVnSW5mbyA9IHtcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgZW52OiB0YXNrLmVudmlyb25tZW50TmFtZSxcbiAgICAgICAga2V5OiBudWxsLFxuICAgICAgICBvd25lcjogdGFzay5kZWJ1Z093bmVyXG4gICAgICB9O1xuICAgICAgY29tcG9uZW50RGVidWdJbmZvLnN0YWNrID1cbiAgICAgICAgbnVsbCA9PT0gdGFzay5kZWJ1Z1N0YWNrXG4gICAgICAgICAgPyBudWxsXG4gICAgICAgICAgOiBmaWx0ZXJTdGFja1RyYWNlKHJlcXVlc3QsIHBhcnNlU3RhY2tUcmFjZSh0YXNrLmRlYnVnU3RhY2ssIDEpKTtcbiAgICAgIGNvbXBvbmVudERlYnVnSW5mby5kZWJ1Z1N0YWNrID0gdGFzay5kZWJ1Z1N0YWNrO1xuICAgICAgcmVxdWVzdCA9IGNvbXBvbmVudERlYnVnSW5mby5kZWJ1Z1Rhc2sgPSB0YXNrLmRlYnVnVGFzaztcbiAgICAgIGN1cnJlbnRPd25lciA9IGNvbXBvbmVudERlYnVnSW5mbztcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0ID8gcmVxdWVzdC5ydW4oY2FsbGJhY2suYmluZChudWxsLCBhcmcpKSA6IGNhbGxiYWNrKGFyZyk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBjdXJyZW50T3duZXIgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBwcm9jZXNzU2VydmVyQ29tcG9uZW50UmV0dXJuVmFsdWUoXG4gICAgICByZXF1ZXN0LFxuICAgICAgdGFzayxcbiAgICAgIENvbXBvbmVudCxcbiAgICAgIHJlc3VsdFxuICAgICkge1xuICAgICAgaWYgKFxuICAgICAgICBcIm9iamVjdFwiICE9PSB0eXBlb2YgcmVzdWx0IHx8XG4gICAgICAgIG51bGwgPT09IHJlc3VsdCB8fFxuICAgICAgICBpc0NsaWVudFJlZmVyZW5jZShyZXN1bHQpXG4gICAgICApXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVzdWx0LnRoZW4pXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgcmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJlc29sdmVkVmFsdWUpIHtcbiAgICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiByZXNvbHZlZFZhbHVlICYmXG4gICAgICAgICAgICAgIG51bGwgIT09IHJlc29sdmVkVmFsdWUgJiZcbiAgICAgICAgICAgICAgcmVzb2x2ZWRWYWx1ZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFICYmXG4gICAgICAgICAgICAgIChyZXNvbHZlZFZhbHVlLl9zdG9yZS52YWxpZGF0ZWQgPSAxKTtcbiAgICAgICAgICB9LCB2b2lkSGFuZGxlciksXG4gICAgICAgICAgY3JlYXRlTGF6eVdyYXBwZXJBcm91bmRXYWtlYWJsZShyZXF1ZXN0LCB0YXNrLCByZXN1bHQpXG4gICAgICAgICk7XG4gICAgICByZXN1bHQuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRSAmJiAocmVzdWx0Ll9zdG9yZS52YWxpZGF0ZWQgPSAxKTtcbiAgICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihyZXN1bHQpO1xuICAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICAgICAgdmFyIG11bHRpU2hvdCA9IF9kZWZpbmVQcm9wZXJ0eSh7fSwgU3ltYm9sLml0ZXJhdG9yLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKHJlc3VsdCk7XG4gICAgICAgICAgaXRlcmF0b3IgIT09IHJlc3VsdCB8fFxuICAgICAgICAgICAgKFwiW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl1cIiA9PT1cbiAgICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKENvbXBvbmVudCkgJiZcbiAgICAgICAgICAgICAgXCJbb2JqZWN0IEdlbmVyYXRvcl1cIiA9PT1cbiAgICAgICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocmVzdWx0KSkgfHxcbiAgICAgICAgICAgIGNhbGxXaXRoRGVidWdDb250ZXh0SW5ERVYocmVxdWVzdCwgdGFzaywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgIFwiUmV0dXJuaW5nIGFuIEl0ZXJhdG9yIGZyb20gYSBTZXJ2ZXIgQ29tcG9uZW50IGlzIG5vdCBzdXBwb3J0ZWQgc2luY2UgaXQgY2Fubm90IGJlIGxvb3BlZCBvdmVyIG1vcmUgdGhhbiBvbmNlLiBcIlxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yO1xuICAgICAgICB9KTtcbiAgICAgICAgbXVsdGlTaG90Ll9kZWJ1Z0luZm8gPSByZXN1bHQuX2RlYnVnSW5mbztcbiAgICAgICAgcmV0dXJuIG11bHRpU2hvdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiByZXN1bHRbQVNZTkNfSVRFUkFUT1JdIHx8XG4gICAgICAgIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBSZWFkYWJsZVN0cmVhbSAmJlxuICAgICAgICAgIHJlc3VsdCBpbnN0YW5jZW9mIFJlYWRhYmxlU3RyZWFtKVxuICAgICAgICA/IHJlc3VsdFxuICAgICAgICA6ICgobXVsdGlTaG90ID0gX2RlZmluZVByb3BlcnR5KHt9LCBBU1lOQ19JVEVSQVRPUiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gcmVzdWx0W0FTWU5DX0lURVJBVE9SXSgpO1xuICAgICAgICAgICAgaXRlcmF0b3IgIT09IHJlc3VsdCB8fFxuICAgICAgICAgICAgICAoXCJbb2JqZWN0IEFzeW5jR2VuZXJhdG9yRnVuY3Rpb25dXCIgPT09XG4gICAgICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKENvbXBvbmVudCkgJiZcbiAgICAgICAgICAgICAgICBcIltvYmplY3QgQXN5bmNHZW5lcmF0b3JdXCIgPT09XG4gICAgICAgICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocmVzdWx0KSkgfHxcbiAgICAgICAgICAgICAgY2FsbFdpdGhEZWJ1Z0NvbnRleHRJbkRFVihyZXF1ZXN0LCB0YXNrLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICAgIFwiUmV0dXJuaW5nIGFuIEFzeW5jSXRlcmF0b3IgZnJvbSBhIFNlcnZlciBDb21wb25lbnQgaXMgbm90IHN1cHBvcnRlZCBzaW5jZSBpdCBjYW5ub3QgYmUgbG9vcGVkIG92ZXIgbW9yZSB0aGFuIG9uY2UuIFwiXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgICAgICAgfSkpLFxuICAgICAgICAgIChtdWx0aVNob3QuX2RlYnVnSW5mbyA9IHJlc3VsdC5fZGVidWdJbmZvKSxcbiAgICAgICAgICBtdWx0aVNob3QpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZW5kZXJGdW5jdGlvbkNvbXBvbmVudChcbiAgICAgIHJlcXVlc3QsXG4gICAgICB0YXNrLFxuICAgICAga2V5LFxuICAgICAgQ29tcG9uZW50LFxuICAgICAgcHJvcHMsXG4gICAgICB2YWxpZGF0ZWRcbiAgICApIHtcbiAgICAgIHZhciBwcmV2VGhlbmFibGVTdGF0ZSA9IHRhc2sudGhlbmFibGVTdGF0ZTtcbiAgICAgIHRhc2sudGhlbmFibGVTdGF0ZSA9IG51bGw7XG4gICAgICBpZiAoY2FuRW1pdERlYnVnSW5mbylcbiAgICAgICAgaWYgKG51bGwgIT09IHByZXZUaGVuYWJsZVN0YXRlKVxuICAgICAgICAgIHZhciBjb21wb25lbnREZWJ1Z0luZm8gPSBwcmV2VGhlbmFibGVTdGF0ZS5fY29tcG9uZW50RGVidWdJbmZvO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgY29tcG9uZW50RGVidWdJRCA9IHRhc2suaWQ7XG4gICAgICAgICAgY29tcG9uZW50RGVidWdJbmZvID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8IFwiXCI7XG4gICAgICAgICAgdmFyIGNvbXBvbmVudEVudiA9ICgwLCByZXF1ZXN0LmVudmlyb25tZW50TmFtZSkoKTtcbiAgICAgICAgICByZXF1ZXN0LnBlbmRpbmdDaHVua3MrKztcbiAgICAgICAgICBjb21wb25lbnREZWJ1Z0luZm8gPSB7XG4gICAgICAgICAgICBuYW1lOiBjb21wb25lbnREZWJ1Z0luZm8sXG4gICAgICAgICAgICBlbnY6IGNvbXBvbmVudEVudixcbiAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgb3duZXI6IHRhc2suZGVidWdPd25lclxuICAgICAgICAgIH07XG4gICAgICAgICAgY29tcG9uZW50RGVidWdJbmZvLnN0YWNrID1cbiAgICAgICAgICAgIG51bGwgPT09IHRhc2suZGVidWdTdGFja1xuICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgOiBmaWx0ZXJTdGFja1RyYWNlKHJlcXVlc3QsIHBhcnNlU3RhY2tUcmFjZSh0YXNrLmRlYnVnU3RhY2ssIDEpKTtcbiAgICAgICAgICBjb21wb25lbnREZWJ1Z0luZm8ucHJvcHMgPSBwcm9wcztcbiAgICAgICAgICBjb21wb25lbnREZWJ1Z0luZm8uZGVidWdTdGFjayA9IHRhc2suZGVidWdTdGFjaztcbiAgICAgICAgICBjb21wb25lbnREZWJ1Z0luZm8uZGVidWdUYXNrID0gdGFzay5kZWJ1Z1Rhc2s7XG4gICAgICAgICAgb3V0bGluZUNvbXBvbmVudEluZm8ocmVxdWVzdCwgY29tcG9uZW50RGVidWdJbmZvKTtcbiAgICAgICAgICB2YXIgdGltZXN0YW1wID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgdGltZXN0YW1wID4gdGFzay50aW1lICYmICh0YXNrLnRpbWUgPSB0aW1lc3RhbXApO1xuICAgICAgICAgIHRhc2sudGltZWQgPSAhMDtcbiAgICAgICAgICBlbWl0RGVidWdDaHVuayhyZXF1ZXN0LCBjb21wb25lbnREZWJ1Z0lELCBjb21wb25lbnREZWJ1Z0luZm8pO1xuICAgICAgICAgIHRhc2suZW52aXJvbm1lbnROYW1lID0gY29tcG9uZW50RW52O1xuICAgICAgICAgIDIgPT09IHZhbGlkYXRlZCAmJlxuICAgICAgICAgICAgd2FybkZvck1pc3NpbmdLZXkocmVxdWVzdCwga2V5LCBjb21wb25lbnREZWJ1Z0luZm8sIHRhc2suZGVidWdUYXNrKTtcbiAgICAgICAgfVxuICAgICAgZWxzZSByZXR1cm4gb3V0bGluZVRhc2socmVxdWVzdCwgdGFzayk7XG4gICAgICB0aGVuYWJsZUluZGV4Q291bnRlciA9IDA7XG4gICAgICB0aGVuYWJsZVN0YXRlID0gcHJldlRoZW5hYmxlU3RhdGU7XG4gICAgICBjdXJyZW50Q29tcG9uZW50RGVidWdJbmZvID0gY29tcG9uZW50RGVidWdJbmZvO1xuICAgICAgcHJvcHMgPSBzdXBwb3J0c0NvbXBvbmVudFN0b3JhZ2VcbiAgICAgICAgPyB0YXNrLmRlYnVnVGFza1xuICAgICAgICAgID8gdGFzay5kZWJ1Z1Rhc2sucnVuKFxuICAgICAgICAgICAgICBjb21wb25lbnRTdG9yYWdlLnJ1bi5iaW5kKFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudFN0b3JhZ2UsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50RGVidWdJbmZvLFxuICAgICAgICAgICAgICAgIGNhbGxDb21wb25lbnRJbkRFVixcbiAgICAgICAgICAgICAgICBDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50RGVidWdJbmZvXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6IGNvbXBvbmVudFN0b3JhZ2UucnVuKFxuICAgICAgICAgICAgICBjb21wb25lbnREZWJ1Z0luZm8sXG4gICAgICAgICAgICAgIGNhbGxDb21wb25lbnRJbkRFVixcbiAgICAgICAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICAgICAgY29tcG9uZW50RGVidWdJbmZvXG4gICAgICAgICAgICApXG4gICAgICAgIDogdGFzay5kZWJ1Z1Rhc2tcbiAgICAgICAgICA/IHRhc2suZGVidWdUYXNrLnJ1bihcbiAgICAgICAgICAgICAgY2FsbENvbXBvbmVudEluREVWLmJpbmQoXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50RGVidWdJbmZvXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6IGNhbGxDb21wb25lbnRJbkRFVihDb21wb25lbnQsIHByb3BzLCBjb21wb25lbnREZWJ1Z0luZm8pO1xuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSBBQk9SVElORylcbiAgICAgICAgdGhyb3cgKFxuICAgICAgICAgIChcIm9iamVjdFwiICE9PSB0eXBlb2YgcHJvcHMgfHxcbiAgICAgICAgICAgIG51bGwgPT09IHByb3BzIHx8XG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBwcm9wcy50aGVuIHx8XG4gICAgICAgICAgICBpc0NsaWVudFJlZmVyZW5jZShwcm9wcykgfHxcbiAgICAgICAgICAgIHByb3BzLnRoZW4odm9pZEhhbmRsZXIsIHZvaWRIYW5kbGVyKSxcbiAgICAgICAgICBudWxsKVxuICAgICAgICApO1xuICAgICAgdmFsaWRhdGVkID0gdGhlbmFibGVTdGF0ZTtcbiAgICAgIGlmIChudWxsICE9PSB2YWxpZGF0ZWQpXG4gICAgICAgIGZvciAoXG4gICAgICAgICAgcHJldlRoZW5hYmxlU3RhdGUgPSB2YWxpZGF0ZWQuX3N0YWNrcyB8fCAodmFsaWRhdGVkLl9zdGFja3MgPSBbXSksXG4gICAgICAgICAgICBjb21wb25lbnREZWJ1Z0lEID0gMDtcbiAgICAgICAgICBjb21wb25lbnREZWJ1Z0lEIDwgdmFsaWRhdGVkLmxlbmd0aDtcbiAgICAgICAgICBjb21wb25lbnREZWJ1Z0lEKytcbiAgICAgICAgKVxuICAgICAgICAgIGZvcndhcmREZWJ1Z0luZm9Gcm9tVGhlbmFibGUoXG4gICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgICAgdGFzayxcbiAgICAgICAgICAgIHZhbGlkYXRlZFtjb21wb25lbnREZWJ1Z0lEXSxcbiAgICAgICAgICAgIGNvbXBvbmVudERlYnVnSW5mbyxcbiAgICAgICAgICAgIHByZXZUaGVuYWJsZVN0YXRlW2NvbXBvbmVudERlYnVnSURdXG4gICAgICAgICAgKTtcbiAgICAgIHByb3BzID0gcHJvY2Vzc1NlcnZlckNvbXBvbmVudFJldHVyblZhbHVlKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICB0YXNrLFxuICAgICAgICBDb21wb25lbnQsXG4gICAgICAgIHByb3BzXG4gICAgICApO1xuICAgICAgdGFzay5kZWJ1Z093bmVyID0gY29tcG9uZW50RGVidWdJbmZvO1xuICAgICAgdGFzay5kZWJ1Z1N0YWNrID0gbnVsbDtcbiAgICAgIHRhc2suZGVidWdUYXNrID0gbnVsbDtcbiAgICAgIENvbXBvbmVudCA9IHRhc2sua2V5UGF0aDtcbiAgICAgIGNvbXBvbmVudERlYnVnSW5mbyA9IHRhc2suaW1wbGljaXRTbG90O1xuICAgICAgbnVsbCAhPT0ga2V5XG4gICAgICAgID8gKHRhc2sua2V5UGF0aCA9IG51bGwgPT09IENvbXBvbmVudCA/IGtleSA6IENvbXBvbmVudCArIFwiLFwiICsga2V5KVxuICAgICAgICA6IG51bGwgPT09IENvbXBvbmVudCAmJiAodGFzay5pbXBsaWNpdFNsb3QgPSAhMCk7XG4gICAgICByZXF1ZXN0ID0gcmVuZGVyTW9kZWxEZXN0cnVjdGl2ZShyZXF1ZXN0LCB0YXNrLCBlbXB0eVJvb3QsIFwiXCIsIHByb3BzKTtcbiAgICAgIHRhc2sua2V5UGF0aCA9IENvbXBvbmVudDtcbiAgICAgIHRhc2suaW1wbGljaXRTbG90ID0gY29tcG9uZW50RGVidWdJbmZvO1xuICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdhcm5Gb3JNaXNzaW5nS2V5KHJlcXVlc3QsIGtleSwgY29tcG9uZW50RGVidWdJbmZvLCBkZWJ1Z1Rhc2spIHtcbiAgICAgIGZ1bmN0aW9uIGxvZ0tleUVycm9yKCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICdFYWNoIGNoaWxkIGluIGEgbGlzdCBzaG91bGQgaGF2ZSBhIHVuaXF1ZSBcImtleVwiIHByb3AuJXMlcyBTZWUgaHR0cHM6Ly9yZWFjdC5kZXYvbGluay93YXJuaW5nLWtleXMgZm9yIG1vcmUgaW5mb3JtYXRpb24uJyxcbiAgICAgICAgICBcIlwiLFxuICAgICAgICAgIFwiXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGtleSA9IHJlcXVlc3QuZGlkV2FybkZvcktleTtcbiAgICAgIG51bGwgPT0ga2V5ICYmIChrZXkgPSByZXF1ZXN0LmRpZFdhcm5Gb3JLZXkgPSBuZXcgV2Vha1NldCgpKTtcbiAgICAgIHJlcXVlc3QgPSBjb21wb25lbnREZWJ1Z0luZm8ub3duZXI7XG4gICAgICBpZiAobnVsbCAhPSByZXF1ZXN0KSB7XG4gICAgICAgIGlmIChrZXkuaGFzKHJlcXVlc3QpKSByZXR1cm47XG4gICAgICAgIGtleS5hZGQocmVxdWVzdCk7XG4gICAgICB9XG4gICAgICBzdXBwb3J0c0NvbXBvbmVudFN0b3JhZ2VcbiAgICAgICAgPyBkZWJ1Z1Rhc2tcbiAgICAgICAgICA/IGRlYnVnVGFzay5ydW4oXG4gICAgICAgICAgICAgIGNvbXBvbmVudFN0b3JhZ2UucnVuLmJpbmQoXG4gICAgICAgICAgICAgICAgY29tcG9uZW50U3RvcmFnZSxcbiAgICAgICAgICAgICAgICBjb21wb25lbnREZWJ1Z0luZm8sXG4gICAgICAgICAgICAgICAgY2FsbENvbXBvbmVudEluREVWLFxuICAgICAgICAgICAgICAgIGxvZ0tleUVycm9yLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50RGVidWdJbmZvXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6IGNvbXBvbmVudFN0b3JhZ2UucnVuKFxuICAgICAgICAgICAgICBjb21wb25lbnREZWJ1Z0luZm8sXG4gICAgICAgICAgICAgIGNhbGxDb21wb25lbnRJbkRFVixcbiAgICAgICAgICAgICAgbG9nS2V5RXJyb3IsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIGNvbXBvbmVudERlYnVnSW5mb1xuICAgICAgICAgICAgKVxuICAgICAgICA6IGRlYnVnVGFza1xuICAgICAgICAgID8gZGVidWdUYXNrLnJ1bihcbiAgICAgICAgICAgICAgY2FsbENvbXBvbmVudEluREVWLmJpbmQoXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBsb2dLZXlFcnJvcixcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudERlYnVnSW5mb1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgOiBjYWxsQ29tcG9uZW50SW5ERVYobG9nS2V5RXJyb3IsIG51bGwsIGNvbXBvbmVudERlYnVnSW5mbyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbmRlckZyYWdtZW50KHJlcXVlc3QsIHRhc2ssIGNoaWxkcmVuKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICBudWxsID09PSBjaGlsZCB8fFxuICAgICAgICAgIFwib2JqZWN0XCIgIT09IHR5cGVvZiBjaGlsZCB8fFxuICAgICAgICAgIGNoaWxkLiQkdHlwZW9mICE9PSBSRUFDVF9FTEVNRU5UX1RZUEUgfHxcbiAgICAgICAgICBudWxsICE9PSBjaGlsZC5rZXkgfHxcbiAgICAgICAgICBjaGlsZC5fc3RvcmUudmFsaWRhdGVkIHx8XG4gICAgICAgICAgKGNoaWxkLl9zdG9yZS52YWxpZGF0ZWQgPSAyKTtcbiAgICAgIH1cbiAgICAgIGlmIChudWxsICE9PSB0YXNrLmtleVBhdGgpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHJlcXVlc3QgPSBbXG4gICAgICAgICAgICBSRUFDVF9FTEVNRU5UX1RZUEUsXG4gICAgICAgICAgICBSRUFDVF9GUkFHTUVOVF9UWVBFLFxuICAgICAgICAgICAgdGFzay5rZXlQYXRoLFxuICAgICAgICAgICAgeyBjaGlsZHJlbjogY2hpbGRyZW4gfSxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgMFxuICAgICAgICAgIF0pLFxuICAgICAgICAgIHRhc2suaW1wbGljaXRTbG90ID8gW3JlcXVlc3RdIDogcmVxdWVzdFxuICAgICAgICApO1xuICAgICAgaWYgKChpID0gY2hpbGRyZW4uX2RlYnVnSW5mbykpIHtcbiAgICAgICAgaWYgKGNhbkVtaXREZWJ1Z0luZm8pIGZvcndhcmREZWJ1Z0luZm8ocmVxdWVzdCwgdGFzaywgaSk7XG4gICAgICAgIGVsc2UgcmV0dXJuIG91dGxpbmVUYXNrKHJlcXVlc3QsIHRhc2spO1xuICAgICAgICBjaGlsZHJlbiA9IEFycmF5LmZyb20oY2hpbGRyZW4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZW5kZXJBc3luY0ZyYWdtZW50KHJlcXVlc3QsIHRhc2ssIGNoaWxkcmVuLCBnZXRBc3luY0l0ZXJhdG9yKSB7XG4gICAgICBpZiAobnVsbCAhPT0gdGFzay5rZXlQYXRoKVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIChyZXF1ZXN0ID0gW1xuICAgICAgICAgICAgUkVBQ1RfRUxFTUVOVF9UWVBFLFxuICAgICAgICAgICAgUkVBQ1RfRlJBR01FTlRfVFlQRSxcbiAgICAgICAgICAgIHRhc2sua2V5UGF0aCxcbiAgICAgICAgICAgIHsgY2hpbGRyZW46IGNoaWxkcmVuIH0sXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIDBcbiAgICAgICAgICBdKSxcbiAgICAgICAgICB0YXNrLmltcGxpY2l0U2xvdCA/IFtyZXF1ZXN0XSA6IHJlcXVlc3RcbiAgICAgICAgKTtcbiAgICAgIGdldEFzeW5jSXRlcmF0b3IgPSBnZXRBc3luY0l0ZXJhdG9yLmNhbGwoY2hpbGRyZW4pO1xuICAgICAgcmV0dXJuIHNlcmlhbGl6ZUFzeW5jSXRlcmFibGUocmVxdWVzdCwgdGFzaywgY2hpbGRyZW4sIGdldEFzeW5jSXRlcmF0b3IpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkZWZlclRhc2socmVxdWVzdCwgdGFzaykge1xuICAgICAgdGFzayA9IGNyZWF0ZVRhc2soXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIHRhc2subW9kZWwsXG4gICAgICAgIHRhc2sua2V5UGF0aCxcbiAgICAgICAgdGFzay5pbXBsaWNpdFNsb3QsXG4gICAgICAgIHJlcXVlc3QuYWJvcnRhYmxlVGFza3MsXG4gICAgICAgIHRhc2sudGltZSxcbiAgICAgICAgdGFzay5kZWJ1Z093bmVyLFxuICAgICAgICB0YXNrLmRlYnVnU3RhY2ssXG4gICAgICAgIHRhc2suZGVidWdUYXNrXG4gICAgICApO1xuICAgICAgcGluZ1Rhc2socmVxdWVzdCwgdGFzayk7XG4gICAgICByZXR1cm4gc2VyaWFsaXplTGF6eUlEKHRhc2suaWQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvdXRsaW5lVGFzayhyZXF1ZXN0LCB0YXNrKSB7XG4gICAgICB0YXNrID0gY3JlYXRlVGFzayhcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgdGFzay5tb2RlbCxcbiAgICAgICAgdGFzay5rZXlQYXRoLFxuICAgICAgICB0YXNrLmltcGxpY2l0U2xvdCxcbiAgICAgICAgcmVxdWVzdC5hYm9ydGFibGVUYXNrcyxcbiAgICAgICAgdGFzay50aW1lLFxuICAgICAgICB0YXNrLmRlYnVnT3duZXIsXG4gICAgICAgIHRhc2suZGVidWdTdGFjayxcbiAgICAgICAgdGFzay5kZWJ1Z1Rhc2tcbiAgICAgICk7XG4gICAgICByZXRyeVRhc2socmVxdWVzdCwgdGFzayk7XG4gICAgICByZXR1cm4gMSA9PT0gdGFzay5zdGF0dXNcbiAgICAgICAgPyBzZXJpYWxpemVCeVZhbHVlSUQodGFzay5pZClcbiAgICAgICAgOiBzZXJpYWxpemVMYXp5SUQodGFzay5pZCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbmRlckVsZW1lbnQocmVxdWVzdCwgdGFzaywgdHlwZSwga2V5LCByZWYsIHByb3BzLCB2YWxpZGF0ZWQpIHtcbiAgICAgIGlmIChudWxsICE9PSByZWYgJiYgdm9pZCAwICE9PSByZWYpXG4gICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgIFwiUmVmcyBjYW5ub3QgYmUgdXNlZCBpbiBTZXJ2ZXIgQ29tcG9uZW50cywgbm9yIHBhc3NlZCB0byBDbGllbnQgQ29tcG9uZW50cy5cIlxuICAgICAgICApO1xuICAgICAganN4UHJvcHNQYXJlbnRzLnNldChwcm9wcywgdHlwZSk7XG4gICAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgcHJvcHMuY2hpbGRyZW4gJiZcbiAgICAgICAgbnVsbCAhPT0gcHJvcHMuY2hpbGRyZW4gJiZcbiAgICAgICAganN4Q2hpbGRyZW5QYXJlbnRzLnNldChwcm9wcy5jaGlsZHJlbiwgdHlwZSk7XG4gICAgICBpZiAoXG4gICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHR5cGUgfHxcbiAgICAgICAgaXNDbGllbnRSZWZlcmVuY2UodHlwZSkgfHxcbiAgICAgICAgdHlwZS4kJHR5cGVvZiA9PT0gVEVNUE9SQVJZX1JFRkVSRU5DRV9UQUdcbiAgICAgICkge1xuICAgICAgICBpZiAodHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSAmJiBudWxsID09PSBrZXkpXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDIgPT09IHZhbGlkYXRlZCAmJlxuICAgICAgICAgICAgICAoKHZhbGlkYXRlZCA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZyYWdtZW50XCIsXG4gICAgICAgICAgICAgICAgZW52OiAoMCwgcmVxdWVzdC5lbnZpcm9ubWVudE5hbWUpKCksXG4gICAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICAgICAgb3duZXI6IHRhc2suZGVidWdPd25lcixcbiAgICAgICAgICAgICAgICBzdGFjazpcbiAgICAgICAgICAgICAgICAgIG51bGwgPT09IHRhc2suZGVidWdTdGFja1xuICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgOiBmaWx0ZXJTdGFja1RyYWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlU3RhY2tUcmFjZSh0YXNrLmRlYnVnU3RhY2ssIDEpXG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBwcm9wczogcHJvcHMsXG4gICAgICAgICAgICAgICAgZGVidWdTdGFjazogdGFzay5kZWJ1Z1N0YWNrLFxuICAgICAgICAgICAgICAgIGRlYnVnVGFzazogdGFzay5kZWJ1Z1Rhc2tcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIHdhcm5Gb3JNaXNzaW5nS2V5KHJlcXVlc3QsIGtleSwgdmFsaWRhdGVkLCB0YXNrLmRlYnVnVGFzaykpLFxuICAgICAgICAgICAgKHZhbGlkYXRlZCA9IHRhc2suaW1wbGljaXRTbG90KSxcbiAgICAgICAgICAgIG51bGwgPT09IHRhc2sua2V5UGF0aCAmJiAodGFzay5pbXBsaWNpdFNsb3QgPSAhMCksXG4gICAgICAgICAgICAocmVxdWVzdCA9IHJlbmRlck1vZGVsRGVzdHJ1Y3RpdmUoXG4gICAgICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgICAgIHRhc2ssXG4gICAgICAgICAgICAgIGVtcHR5Um9vdCxcbiAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgICAgcHJvcHMuY2hpbGRyZW5cbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgKHRhc2suaW1wbGljaXRTbG90ID0gdmFsaWRhdGVkKSxcbiAgICAgICAgICAgIHJlcXVlc3RcbiAgICAgICAgICApO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgbnVsbCAhPSB0eXBlICYmXG4gICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHR5cGUgJiZcbiAgICAgICAgICAhaXNDbGllbnRSZWZlcmVuY2UodHlwZSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAodHlwZS4kJHR5cGVvZikge1xuICAgICAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgICAgIHR5cGUgPSBjYWxsTGF6eUluaXRJbkRFVih0eXBlKTtcbiAgICAgICAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSBBQk9SVElORykgdGhyb3cgbnVsbDtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlbmRlckVsZW1lbnQoXG4gICAgICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgICAgICB0YXNrLFxuICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIHJlZixcbiAgICAgICAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZWRcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNhc2UgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRTpcbiAgICAgICAgICAgICAgcmV0dXJuIHJlbmRlckZ1bmN0aW9uQ29tcG9uZW50KFxuICAgICAgICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgICAgICAgdGFzayxcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgdHlwZS5yZW5kZXIsXG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVkXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRTpcbiAgICAgICAgICAgICAgcmV0dXJuIHJlbmRlckVsZW1lbnQoXG4gICAgICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgICAgICB0YXNrLFxuICAgICAgICAgICAgICAgIHR5cGUudHlwZSxcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgcmVmLFxuICAgICAgICAgICAgICAgIHByb3BzLFxuICAgICAgICAgICAgICAgIHZhbGlkYXRlZFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAgICAgIHR5cGUuX3N0b3JlLnZhbGlkYXRlZCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgfSBlbHNlXG4gICAgICAgIHJldHVybiByZW5kZXJGdW5jdGlvbkNvbXBvbmVudChcbiAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgIHRhc2ssXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgdmFsaWRhdGVkXG4gICAgICAgICk7XG4gICAgICByZWYgPSB0YXNrLmtleVBhdGg7XG4gICAgICBudWxsID09PSBrZXkgPyAoa2V5ID0gcmVmKSA6IG51bGwgIT09IHJlZiAmJiAoa2V5ID0gcmVmICsgXCIsXCIgKyBrZXkpO1xuICAgICAgdmFyIGRlYnVnU3RhY2sgPSBudWxsO1xuICAgICAgcmVmID0gdGFzay5kZWJ1Z093bmVyO1xuICAgICAgbnVsbCAhPT0gcmVmICYmIG91dGxpbmVDb21wb25lbnRJbmZvKHJlcXVlc3QsIHJlZik7XG4gICAgICBpZiAobnVsbCAhPT0gdGFzay5kZWJ1Z1N0YWNrKSB7XG4gICAgICAgIGRlYnVnU3RhY2sgPSBmaWx0ZXJTdGFja1RyYWNlKFxuICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgcGFyc2VTdGFja1RyYWNlKHRhc2suZGVidWdTdGFjaywgMSlcbiAgICAgICAgKTtcbiAgICAgICAgdmFyIGlkID0gb3V0bGluZURlYnVnTW9kZWwoXG4gICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICB7IG9iamVjdExpbWl0OiAyICogZGVidWdTdGFjay5sZW5ndGggKyAxIH0sXG4gICAgICAgICAgZGVidWdTdGFja1xuICAgICAgICApO1xuICAgICAgICByZXF1ZXN0LndyaXR0ZW5PYmplY3RzLnNldChkZWJ1Z1N0YWNrLCBzZXJpYWxpemVCeVZhbHVlSUQoaWQpKTtcbiAgICAgIH1cbiAgICAgIHJlcXVlc3QgPSBbXG4gICAgICAgIFJFQUNUX0VMRU1FTlRfVFlQRSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAga2V5LFxuICAgICAgICBwcm9wcyxcbiAgICAgICAgcmVmLFxuICAgICAgICBkZWJ1Z1N0YWNrLFxuICAgICAgICB2YWxpZGF0ZWRcbiAgICAgIF07XG4gICAgICB0YXNrID0gdGFzay5pbXBsaWNpdFNsb3QgJiYgbnVsbCAhPT0ga2V5ID8gW3JlcXVlc3RdIDogcmVxdWVzdDtcbiAgICAgIHJldHVybiB0YXNrO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwaW5nVGFzayhyZXF1ZXN0LCB0YXNrKSB7XG4gICAgICB0YXNrLnRpbWVkID0gITA7XG4gICAgICB2YXIgcGluZ2VkVGFza3MgPSByZXF1ZXN0LnBpbmdlZFRhc2tzO1xuICAgICAgcGluZ2VkVGFza3MucHVzaCh0YXNrKTtcbiAgICAgIDEgPT09IHBpbmdlZFRhc2tzLmxlbmd0aCAmJlxuICAgICAgICAoKHJlcXVlc3QuZmx1c2hTY2hlZHVsZWQgPSBudWxsICE9PSByZXF1ZXN0LmRlc3RpbmF0aW9uKSxcbiAgICAgICAgMjEgPT09IHJlcXVlc3QudHlwZSB8fCAxMCA9PT0gcmVxdWVzdC5zdGF0dXNcbiAgICAgICAgICA/IHNjaGVkdWxlTWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBlcmZvcm1Xb3JrKHJlcXVlc3QpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICA6IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gcGVyZm9ybVdvcmsocmVxdWVzdCk7XG4gICAgICAgICAgICB9LCAwKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZVRhc2soXG4gICAgICByZXF1ZXN0LFxuICAgICAgbW9kZWwsXG4gICAgICBrZXlQYXRoLFxuICAgICAgaW1wbGljaXRTbG90LFxuICAgICAgYWJvcnRTZXQsXG4gICAgICBsYXN0VGltZXN0YW1wLFxuICAgICAgZGVidWdPd25lcixcbiAgICAgIGRlYnVnU3RhY2ssXG4gICAgICBkZWJ1Z1Rhc2tcbiAgICApIHtcbiAgICAgIHJlcXVlc3QucGVuZGluZ0NodW5rcysrO1xuICAgICAgdmFyIGlkID0gcmVxdWVzdC5uZXh0Q2h1bmtJZCsrO1xuICAgICAgXCJvYmplY3RcIiAhPT0gdHlwZW9mIG1vZGVsIHx8XG4gICAgICAgIG51bGwgPT09IG1vZGVsIHx8XG4gICAgICAgIG51bGwgIT09IGtleVBhdGggfHxcbiAgICAgICAgaW1wbGljaXRTbG90IHx8XG4gICAgICAgIHJlcXVlc3Qud3JpdHRlbk9iamVjdHMuc2V0KG1vZGVsLCBzZXJpYWxpemVCeVZhbHVlSUQoaWQpKTtcbiAgICAgIHZhciB0YXNrID0ge1xuICAgICAgICBpZDogaWQsXG4gICAgICAgIHN0YXR1czogMCxcbiAgICAgICAgbW9kZWw6IG1vZGVsLFxuICAgICAgICBrZXlQYXRoOiBrZXlQYXRoLFxuICAgICAgICBpbXBsaWNpdFNsb3Q6IGltcGxpY2l0U2xvdCxcbiAgICAgICAgcGluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBwaW5nVGFzayhyZXF1ZXN0LCB0YXNrKTtcbiAgICAgICAgfSxcbiAgICAgICAgdG9KU09OOiBmdW5jdGlvbiAocGFyZW50UHJvcGVydHlOYW1lLCB2YWx1ZSkge1xuICAgICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLFxuICAgICAgICAgICAgb3JpZ2luYWxWYWx1ZSA9IHBhcmVudFtwYXJlbnRQcm9wZXJ0eU5hbWVdO1xuICAgICAgICAgIFwib2JqZWN0XCIgIT09IHR5cGVvZiBvcmlnaW5hbFZhbHVlIHx8XG4gICAgICAgICAgICBvcmlnaW5hbFZhbHVlID09PSB2YWx1ZSB8fFxuICAgICAgICAgICAgb3JpZ2luYWxWYWx1ZSBpbnN0YW5jZW9mIERhdGUgfHxcbiAgICAgICAgICAgIGNhbGxXaXRoRGVidWdDb250ZXh0SW5ERVYocmVxdWVzdCwgdGFzaywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBcIk9iamVjdFwiICE9PSBvYmplY3ROYW1lKG9yaWdpbmFsVmFsdWUpXG4gICAgICAgICAgICAgICAgPyBcInN0cmluZ1wiID09PSB0eXBlb2YganN4Q2hpbGRyZW5QYXJlbnRzLmdldChwYXJlbnQpXG4gICAgICAgICAgICAgICAgICA/IGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgXCIlcyBvYmplY3RzIGNhbm5vdCBiZSByZW5kZXJlZCBhcyB0ZXh0IGNoaWxkcmVuLiBUcnkgZm9ybWF0dGluZyBpdCB1c2luZyB0b1N0cmluZygpLiVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgb2JqZWN0TmFtZShvcmlnaW5hbFZhbHVlKSxcbiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmliZU9iamVjdEZvckVycm9yTWVzc2FnZShwYXJlbnQsIHBhcmVudFByb3BlcnR5TmFtZSlcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgOiBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgIFwiT25seSBwbGFpbiBvYmplY3RzIGNhbiBiZSBwYXNzZWQgdG8gQ2xpZW50IENvbXBvbmVudHMgZnJvbSBTZXJ2ZXIgQ29tcG9uZW50cy4gJXMgb2JqZWN0cyBhcmUgbm90IHN1cHBvcnRlZC4lc1wiLFxuICAgICAgICAgICAgICAgICAgICAgIG9iamVjdE5hbWUob3JpZ2luYWxWYWx1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgZGVzY3JpYmVPYmplY3RGb3JFcnJvck1lc3NhZ2UocGFyZW50LCBwYXJlbnRQcm9wZXJ0eU5hbWUpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICA6IGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIFwiT25seSBwbGFpbiBvYmplY3RzIGNhbiBiZSBwYXNzZWQgdG8gQ2xpZW50IENvbXBvbmVudHMgZnJvbSBTZXJ2ZXIgQ29tcG9uZW50cy4gT2JqZWN0cyB3aXRoIHRvSlNPTiBtZXRob2RzIGFyZSBub3Qgc3VwcG9ydGVkLiBDb252ZXJ0IGl0IG1hbnVhbGx5IHRvIGEgc2ltcGxlIHZhbHVlIGJlZm9yZSBwYXNzaW5nIGl0IHRvIHByb3BzLiVzXCIsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlT2JqZWN0Rm9yRXJyb3JNZXNzYWdlKHBhcmVudCwgcGFyZW50UHJvcGVydHlOYW1lKVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiByZW5kZXJNb2RlbChyZXF1ZXN0LCB0YXNrLCBwYXJlbnQsIHBhcmVudFByb3BlcnR5TmFtZSwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICB0aGVuYWJsZVN0YXRlOiBudWxsLFxuICAgICAgICB0aW1lZDogITFcbiAgICAgIH07XG4gICAgICB0YXNrLnRpbWUgPSBsYXN0VGltZXN0YW1wO1xuICAgICAgdGFzay5lbnZpcm9ubWVudE5hbWUgPSByZXF1ZXN0LmVudmlyb25tZW50TmFtZSgpO1xuICAgICAgdGFzay5kZWJ1Z093bmVyID0gZGVidWdPd25lcjtcbiAgICAgIHRhc2suZGVidWdTdGFjayA9IGRlYnVnU3RhY2s7XG4gICAgICB0YXNrLmRlYnVnVGFzayA9IGRlYnVnVGFzaztcbiAgICAgIGFib3J0U2V0LmFkZCh0YXNrKTtcbiAgICAgIHJldHVybiB0YXNrO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXJpYWxpemVCeVZhbHVlSUQoaWQpIHtcbiAgICAgIHJldHVybiBcIiRcIiArIGlkLnRvU3RyaW5nKDE2KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2VyaWFsaXplTGF6eUlEKGlkKSB7XG4gICAgICByZXR1cm4gXCIkTFwiICsgaWQudG9TdHJpbmcoMTYpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXJpYWxpemVEZWZlcnJlZE9iamVjdChyZXF1ZXN0LCB2YWx1ZSkge1xuICAgICAgdmFyIGRlZmVycmVkRGVidWdPYmplY3RzID0gcmVxdWVzdC5kZWZlcnJlZERlYnVnT2JqZWN0cztcbiAgICAgIHJldHVybiBudWxsICE9PSBkZWZlcnJlZERlYnVnT2JqZWN0c1xuICAgICAgICA/IChyZXF1ZXN0LnBlbmRpbmdEZWJ1Z0NodW5rcysrLFxuICAgICAgICAgIChyZXF1ZXN0ID0gcmVxdWVzdC5uZXh0Q2h1bmtJZCsrKSxcbiAgICAgICAgICBkZWZlcnJlZERlYnVnT2JqZWN0cy5leGlzdGluZy5zZXQodmFsdWUsIHJlcXVlc3QpLFxuICAgICAgICAgIGRlZmVycmVkRGVidWdPYmplY3RzLnJldGFpbmVkLnNldChyZXF1ZXN0LCB2YWx1ZSksXG4gICAgICAgICAgXCIkWVwiICsgcmVxdWVzdC50b1N0cmluZygxNikpXG4gICAgICAgIDogXCIkWVwiO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXJpYWxpemVOdW1iZXIobnVtYmVyKSB7XG4gICAgICByZXR1cm4gTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbiAgICAgICAgPyAwID09PSBudW1iZXIgJiYgLUluZmluaXR5ID09PSAxIC8gbnVtYmVyXG4gICAgICAgICAgPyBcIiQtMFwiXG4gICAgICAgICAgOiBudW1iZXJcbiAgICAgICAgOiBJbmZpbml0eSA9PT0gbnVtYmVyXG4gICAgICAgICAgPyBcIiRJbmZpbml0eVwiXG4gICAgICAgICAgOiAtSW5maW5pdHkgPT09IG51bWJlclxuICAgICAgICAgICAgPyBcIiQtSW5maW5pdHlcIlxuICAgICAgICAgICAgOiBcIiROYU5cIjtcbiAgICB9XG4gICAgZnVuY3Rpb24gZW5jb2RlUmVmZXJlbmNlQ2h1bmsocmVxdWVzdCwgaWQsIHJlZmVyZW5jZSkge1xuICAgICAgcmVxdWVzdCA9IHN0cmluZ2lmeShyZWZlcmVuY2UpO1xuICAgICAgaWQgPSBpZC50b1N0cmluZygxNikgKyBcIjpcIiArIHJlcXVlc3QgKyBcIlxcblwiO1xuICAgICAgcmV0dXJuIHN0cmluZ1RvQ2h1bmsoaWQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXJpYWxpemVDbGllbnRSZWZlcmVuY2UoXG4gICAgICByZXF1ZXN0LFxuICAgICAgcGFyZW50LFxuICAgICAgcGFyZW50UHJvcGVydHlOYW1lLFxuICAgICAgY2xpZW50UmVmZXJlbmNlXG4gICAgKSB7XG4gICAgICB2YXIgY2xpZW50UmVmZXJlbmNlS2V5ID0gY2xpZW50UmVmZXJlbmNlLiQkYXN5bmNcbiAgICAgICAgICA/IGNsaWVudFJlZmVyZW5jZS4kJGlkICsgXCIjYXN5bmNcIlxuICAgICAgICAgIDogY2xpZW50UmVmZXJlbmNlLiQkaWQsXG4gICAgICAgIHdyaXR0ZW5DbGllbnRSZWZlcmVuY2VzID0gcmVxdWVzdC53cml0dGVuQ2xpZW50UmVmZXJlbmNlcyxcbiAgICAgICAgZXhpc3RpbmdJZCA9IHdyaXR0ZW5DbGllbnRSZWZlcmVuY2VzLmdldChjbGllbnRSZWZlcmVuY2VLZXkpO1xuICAgICAgaWYgKHZvaWQgMCAhPT0gZXhpc3RpbmdJZClcbiAgICAgICAgcmV0dXJuIHBhcmVudFswXSA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFICYmIFwiMVwiID09PSBwYXJlbnRQcm9wZXJ0eU5hbWVcbiAgICAgICAgICA/IHNlcmlhbGl6ZUxhenlJRChleGlzdGluZ0lkKVxuICAgICAgICAgIDogc2VyaWFsaXplQnlWYWx1ZUlEKGV4aXN0aW5nSWQpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGNsaWVudFJlZmVyZW5jZU1ldGFkYXRhID0gcmVzb2x2ZUNsaWVudFJlZmVyZW5jZU1ldGFkYXRhKFxuICAgICAgICAgIHJlcXVlc3QuYnVuZGxlckNvbmZpZyxcbiAgICAgICAgICBjbGllbnRSZWZlcmVuY2VcbiAgICAgICAgKTtcbiAgICAgICAgcmVxdWVzdC5wZW5kaW5nQ2h1bmtzKys7XG4gICAgICAgIHZhciBpbXBvcnRJZCA9IHJlcXVlc3QubmV4dENodW5rSWQrKztcbiAgICAgICAgZW1pdEltcG9ydENodW5rKHJlcXVlc3QsIGltcG9ydElkLCBjbGllbnRSZWZlcmVuY2VNZXRhZGF0YSwgITEpO1xuICAgICAgICB3cml0dGVuQ2xpZW50UmVmZXJlbmNlcy5zZXQoY2xpZW50UmVmZXJlbmNlS2V5LCBpbXBvcnRJZCk7XG4gICAgICAgIHJldHVybiBwYXJlbnRbMF0gPT09IFJFQUNUX0VMRU1FTlRfVFlQRSAmJiBcIjFcIiA9PT0gcGFyZW50UHJvcGVydHlOYW1lXG4gICAgICAgICAgPyBzZXJpYWxpemVMYXp5SUQoaW1wb3J0SWQpXG4gICAgICAgICAgOiBzZXJpYWxpemVCeVZhbHVlSUQoaW1wb3J0SWQpO1xuICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIHJlcXVlc3QucGVuZGluZ0NodW5rcysrLFxuICAgICAgICAgIChwYXJlbnQgPSByZXF1ZXN0Lm5leHRDaHVua0lkKyspLFxuICAgICAgICAgIChwYXJlbnRQcm9wZXJ0eU5hbWUgPSBsb2dSZWNvdmVyYWJsZUVycm9yKHJlcXVlc3QsIHgsIG51bGwpKSxcbiAgICAgICAgICBlbWl0RXJyb3JDaHVuayhyZXF1ZXN0LCBwYXJlbnQsIHBhcmVudFByb3BlcnR5TmFtZSwgeCwgITEpLFxuICAgICAgICAgIHNlcmlhbGl6ZUJ5VmFsdWVJRChwYXJlbnQpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNlcmlhbGl6ZURlYnVnQ2xpZW50UmVmZXJlbmNlKFxuICAgICAgcmVxdWVzdCxcbiAgICAgIHBhcmVudCxcbiAgICAgIHBhcmVudFByb3BlcnR5TmFtZSxcbiAgICAgIGNsaWVudFJlZmVyZW5jZVxuICAgICkge1xuICAgICAgdmFyIGV4aXN0aW5nSWQgPSByZXF1ZXN0LndyaXR0ZW5DbGllbnRSZWZlcmVuY2VzLmdldChcbiAgICAgICAgY2xpZW50UmVmZXJlbmNlLiQkYXN5bmNcbiAgICAgICAgICA/IGNsaWVudFJlZmVyZW5jZS4kJGlkICsgXCIjYXN5bmNcIlxuICAgICAgICAgIDogY2xpZW50UmVmZXJlbmNlLiQkaWRcbiAgICAgICk7XG4gICAgICBpZiAodm9pZCAwICE9PSBleGlzdGluZ0lkKVxuICAgICAgICByZXR1cm4gcGFyZW50WzBdID09PSBSRUFDVF9FTEVNRU5UX1RZUEUgJiYgXCIxXCIgPT09IHBhcmVudFByb3BlcnR5TmFtZVxuICAgICAgICAgID8gc2VyaWFsaXplTGF6eUlEKGV4aXN0aW5nSWQpXG4gICAgICAgICAgOiBzZXJpYWxpemVCeVZhbHVlSUQoZXhpc3RpbmdJZCk7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgY2xpZW50UmVmZXJlbmNlTWV0YWRhdGEgPSByZXNvbHZlQ2xpZW50UmVmZXJlbmNlTWV0YWRhdGEoXG4gICAgICAgICAgcmVxdWVzdC5idW5kbGVyQ29uZmlnLFxuICAgICAgICAgIGNsaWVudFJlZmVyZW5jZVxuICAgICAgICApO1xuICAgICAgICByZXF1ZXN0LnBlbmRpbmdEZWJ1Z0NodW5rcysrO1xuICAgICAgICB2YXIgaW1wb3J0SWQgPSByZXF1ZXN0Lm5leHRDaHVua0lkKys7XG4gICAgICAgIGVtaXRJbXBvcnRDaHVuayhyZXF1ZXN0LCBpbXBvcnRJZCwgY2xpZW50UmVmZXJlbmNlTWV0YWRhdGEsICEwKTtcbiAgICAgICAgcmV0dXJuIHBhcmVudFswXSA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFICYmIFwiMVwiID09PSBwYXJlbnRQcm9wZXJ0eU5hbWVcbiAgICAgICAgICA/IHNlcmlhbGl6ZUxhenlJRChpbXBvcnRJZClcbiAgICAgICAgICA6IHNlcmlhbGl6ZUJ5VmFsdWVJRChpbXBvcnRJZCk7XG4gICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgcmVxdWVzdC5wZW5kaW5nRGVidWdDaHVua3MrKyxcbiAgICAgICAgICAocGFyZW50ID0gcmVxdWVzdC5uZXh0Q2h1bmtJZCsrKSxcbiAgICAgICAgICAocGFyZW50UHJvcGVydHlOYW1lID0gbG9nUmVjb3ZlcmFibGVFcnJvcihyZXF1ZXN0LCB4LCBudWxsKSksXG4gICAgICAgICAgZW1pdEVycm9yQ2h1bmsocmVxdWVzdCwgcGFyZW50LCBwYXJlbnRQcm9wZXJ0eU5hbWUsIHgsICEwKSxcbiAgICAgICAgICBzZXJpYWxpemVCeVZhbHVlSUQocGFyZW50KVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvdXRsaW5lTW9kZWwocmVxdWVzdCwgdmFsdWUpIHtcbiAgICAgIHZhbHVlID0gY3JlYXRlVGFzayhcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIG51bGwsXG4gICAgICAgICExLFxuICAgICAgICByZXF1ZXN0LmFib3J0YWJsZVRhc2tzLFxuICAgICAgICBwZXJmb3JtYW5jZS5ub3coKSxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbFxuICAgICAgKTtcbiAgICAgIHJldHJ5VGFzayhyZXF1ZXN0LCB2YWx1ZSk7XG4gICAgICByZXR1cm4gdmFsdWUuaWQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNlcmlhbGl6ZVNlcnZlclJlZmVyZW5jZShyZXF1ZXN0LCBzZXJ2ZXJSZWZlcmVuY2UpIHtcbiAgICAgIHZhciB3cml0dGVuU2VydmVyUmVmZXJlbmNlcyA9IHJlcXVlc3Qud3JpdHRlblNlcnZlclJlZmVyZW5jZXMsXG4gICAgICAgIGV4aXN0aW5nSWQgPSB3cml0dGVuU2VydmVyUmVmZXJlbmNlcy5nZXQoc2VydmVyUmVmZXJlbmNlKTtcbiAgICAgIGlmICh2b2lkIDAgIT09IGV4aXN0aW5nSWQpIHJldHVybiBcIiRGXCIgKyBleGlzdGluZ0lkLnRvU3RyaW5nKDE2KTtcbiAgICAgIGV4aXN0aW5nSWQgPSBzZXJ2ZXJSZWZlcmVuY2UuJCRib3VuZDtcbiAgICAgIGV4aXN0aW5nSWQgPSBudWxsID09PSBleGlzdGluZ0lkID8gbnVsbCA6IFByb21pc2UucmVzb2x2ZShleGlzdGluZ0lkKTtcbiAgICAgIHZhciBpZCA9IHNlcnZlclJlZmVyZW5jZS4kJGlkLFxuICAgICAgICBsb2NhdGlvbiA9IG51bGwsXG4gICAgICAgIGVycm9yID0gc2VydmVyUmVmZXJlbmNlLiQkbG9jYXRpb247XG4gICAgICBlcnJvciAmJlxuICAgICAgICAoKGVycm9yID0gcGFyc2VTdGFja1RyYWNlKGVycm9yLCAxKSksXG4gICAgICAgIDAgPCBlcnJvci5sZW5ndGggJiZcbiAgICAgICAgICAoKGxvY2F0aW9uID0gZXJyb3JbMF0pLFxuICAgICAgICAgIChsb2NhdGlvbiA9IFtsb2NhdGlvblswXSwgbG9jYXRpb25bMV0sIGxvY2F0aW9uWzJdLCBsb2NhdGlvblszXV0pKSk7XG4gICAgICBleGlzdGluZ0lkID1cbiAgICAgICAgbnVsbCAhPT0gbG9jYXRpb25cbiAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICBib3VuZDogZXhpc3RpbmdJZCxcbiAgICAgICAgICAgICAgbmFtZTpcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBzZXJ2ZXJSZWZlcmVuY2VcbiAgICAgICAgICAgICAgICAgID8gc2VydmVyUmVmZXJlbmNlLm5hbWVcbiAgICAgICAgICAgICAgICAgIDogXCJcIixcbiAgICAgICAgICAgICAgZW52OiAoMCwgcmVxdWVzdC5lbnZpcm9ubWVudE5hbWUpKCksXG4gICAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgICAgfVxuICAgICAgICAgIDogeyBpZDogaWQsIGJvdW5kOiBleGlzdGluZ0lkIH07XG4gICAgICByZXF1ZXN0ID0gb3V0bGluZU1vZGVsKHJlcXVlc3QsIGV4aXN0aW5nSWQpO1xuICAgICAgd3JpdHRlblNlcnZlclJlZmVyZW5jZXMuc2V0KHNlcnZlclJlZmVyZW5jZSwgcmVxdWVzdCk7XG4gICAgICByZXR1cm4gXCIkRlwiICsgcmVxdWVzdC50b1N0cmluZygxNik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNlcmlhbGl6ZUxhcmdlVGV4dFN0cmluZyhyZXF1ZXN0LCB0ZXh0KSB7XG4gICAgICByZXF1ZXN0LnBlbmRpbmdDaHVua3MrKztcbiAgICAgIHZhciB0ZXh0SWQgPSByZXF1ZXN0Lm5leHRDaHVua0lkKys7XG4gICAgICBlbWl0VGV4dENodW5rKHJlcXVlc3QsIHRleHRJZCwgdGV4dCwgITEpO1xuICAgICAgcmV0dXJuIHNlcmlhbGl6ZUJ5VmFsdWVJRCh0ZXh0SWQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXJpYWxpemVNYXAocmVxdWVzdCwgbWFwKSB7XG4gICAgICBtYXAgPSBBcnJheS5mcm9tKG1hcCk7XG4gICAgICByZXR1cm4gXCIkUVwiICsgb3V0bGluZU1vZGVsKHJlcXVlc3QsIG1hcCkudG9TdHJpbmcoMTYpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXJpYWxpemVGb3JtRGF0YShyZXF1ZXN0LCBmb3JtRGF0YSkge1xuICAgICAgZm9ybURhdGEgPSBBcnJheS5mcm9tKGZvcm1EYXRhLmVudHJpZXMoKSk7XG4gICAgICByZXR1cm4gXCIkS1wiICsgb3V0bGluZU1vZGVsKHJlcXVlc3QsIGZvcm1EYXRhKS50b1N0cmluZygxNik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNlcmlhbGl6ZVNldChyZXF1ZXN0LCBzZXQpIHtcbiAgICAgIHNldCA9IEFycmF5LmZyb20oc2V0KTtcbiAgICAgIHJldHVybiBcIiRXXCIgKyBvdXRsaW5lTW9kZWwocmVxdWVzdCwgc2V0KS50b1N0cmluZygxNik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNlcmlhbGl6ZVR5cGVkQXJyYXkocmVxdWVzdCwgdGFnLCB0eXBlZEFycmF5KSB7XG4gICAgICByZXF1ZXN0LnBlbmRpbmdDaHVua3MrKztcbiAgICAgIHZhciBidWZmZXJJZCA9IHJlcXVlc3QubmV4dENodW5rSWQrKztcbiAgICAgIGVtaXRUeXBlZEFycmF5Q2h1bmsocmVxdWVzdCwgYnVmZmVySWQsIHRhZywgdHlwZWRBcnJheSwgITEpO1xuICAgICAgcmV0dXJuIHNlcmlhbGl6ZUJ5VmFsdWVJRChidWZmZXJJZCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNlcmlhbGl6ZURlYnVnVHlwZWRBcnJheShyZXF1ZXN0LCB0YWcsIHR5cGVkQXJyYXkpIHtcbiAgICAgIHJlcXVlc3QucGVuZGluZ0RlYnVnQ2h1bmtzKys7XG4gICAgICB2YXIgYnVmZmVySWQgPSByZXF1ZXN0Lm5leHRDaHVua0lkKys7XG4gICAgICBlbWl0VHlwZWRBcnJheUNodW5rKHJlcXVlc3QsIGJ1ZmZlcklkLCB0YWcsIHR5cGVkQXJyYXksICEwKTtcbiAgICAgIHJldHVybiBzZXJpYWxpemVCeVZhbHVlSUQoYnVmZmVySWQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXJpYWxpemVEZWJ1Z0Jsb2IocmVxdWVzdCwgYmxvYikge1xuICAgICAgZnVuY3Rpb24gcHJvZ3Jlc3MoZW50cnkpIHtcbiAgICAgICAgaWYgKGVudHJ5LmRvbmUpXG4gICAgICAgICAgZW1pdE91dGxpbmVkRGVidWdNb2RlbENodW5rKFxuICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgeyBvYmplY3RMaW1pdDogbW9kZWwubGVuZ3RoICsgMiB9LFxuICAgICAgICAgICAgbW9kZWxcbiAgICAgICAgICApLFxuICAgICAgICAgICAgZW5xdWV1ZUZsdXNoKHJlcXVlc3QpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIG1vZGVsLnB1c2goZW50cnkudmFsdWUpLCByZWFkZXIucmVhZCgpLnRoZW4ocHJvZ3Jlc3MpLmNhdGNoKGVycm9yKVxuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBlcnJvcihyZWFzb24pIHtcbiAgICAgICAgZW1pdEVycm9yQ2h1bmsocmVxdWVzdCwgaWQsIFwiXCIsIHJlYXNvbiwgITApO1xuICAgICAgICBlbnF1ZXVlRmx1c2gocmVxdWVzdCk7XG4gICAgICAgIHJlYWRlci5jYW5jZWwocmVhc29uKS50aGVuKG5vb3AsIG5vb3ApO1xuICAgICAgfVxuICAgICAgdmFyIG1vZGVsID0gW2Jsb2IudHlwZV0sXG4gICAgICAgIHJlYWRlciA9IGJsb2Iuc3RyZWFtKCkuZ2V0UmVhZGVyKCk7XG4gICAgICByZXF1ZXN0LnBlbmRpbmdEZWJ1Z0NodW5rcysrO1xuICAgICAgdmFyIGlkID0gcmVxdWVzdC5uZXh0Q2h1bmtJZCsrO1xuICAgICAgcmVhZGVyLnJlYWQoKS50aGVuKHByb2dyZXNzKS5jYXRjaChlcnJvcik7XG4gICAgICByZXR1cm4gXCIkQlwiICsgaWQudG9TdHJpbmcoMTYpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXJpYWxpemVCbG9iKHJlcXVlc3QsIGJsb2IpIHtcbiAgICAgIGZ1bmN0aW9uIHByb2dyZXNzKGVudHJ5KSB7XG4gICAgICAgIGlmICgwID09PSBuZXdUYXNrLnN0YXR1cylcbiAgICAgICAgICBpZiAoZW50cnkuZG9uZSlcbiAgICAgICAgICAgIHJlcXVlc3QuY2FjaGVDb250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgICBcImFib3J0XCIsXG4gICAgICAgICAgICAgIGFib3J0QmxvYlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgcGluZ1Rhc2socmVxdWVzdCwgbmV3VGFzayk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgbW9kZWwucHVzaChlbnRyeS52YWx1ZSksIHJlYWRlci5yZWFkKCkudGhlbihwcm9ncmVzcykuY2F0Y2goZXJyb3IpXG4gICAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gZXJyb3IocmVhc29uKSB7XG4gICAgICAgIDAgPT09IG5ld1Rhc2suc3RhdHVzICYmXG4gICAgICAgICAgKHJlcXVlc3QuY2FjaGVDb250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgXCJhYm9ydFwiLFxuICAgICAgICAgICAgYWJvcnRCbG9iXG4gICAgICAgICAgKSxcbiAgICAgICAgICBlcnJvcmVkVGFzayhyZXF1ZXN0LCBuZXdUYXNrLCByZWFzb24pLFxuICAgICAgICAgIGVucXVldWVGbHVzaChyZXF1ZXN0KSxcbiAgICAgICAgICByZWFkZXIuY2FuY2VsKHJlYXNvbikudGhlbihlcnJvciwgZXJyb3IpKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGFib3J0QmxvYigpIHtcbiAgICAgICAgaWYgKDAgPT09IG5ld1Rhc2suc3RhdHVzKSB7XG4gICAgICAgICAgdmFyIHNpZ25hbCA9IHJlcXVlc3QuY2FjaGVDb250cm9sbGVyLnNpZ25hbDtcbiAgICAgICAgICBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0QmxvYik7XG4gICAgICAgICAgc2lnbmFsID0gc2lnbmFsLnJlYXNvbjtcbiAgICAgICAgICBlcnJvcmVkVGFzayhyZXF1ZXN0LCBuZXdUYXNrLCBzaWduYWwpO1xuICAgICAgICAgIGVucXVldWVGbHVzaChyZXF1ZXN0KTtcbiAgICAgICAgICByZWFkZXIuY2FuY2VsKHNpZ25hbCkudGhlbihlcnJvciwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgbW9kZWwgPSBbYmxvYi50eXBlXSxcbiAgICAgICAgbmV3VGFzayA9IGNyZWF0ZVRhc2soXG4gICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICBtb2RlbCxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgICExLFxuICAgICAgICAgIHJlcXVlc3QuYWJvcnRhYmxlVGFza3MsXG4gICAgICAgICAgcGVyZm9ybWFuY2Uubm93KCksXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIG51bGxcbiAgICAgICAgKSxcbiAgICAgICAgcmVhZGVyID0gYmxvYi5zdHJlYW0oKS5nZXRSZWFkZXIoKTtcbiAgICAgIHJlcXVlc3QuY2FjaGVDb250cm9sbGVyLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRCbG9iKTtcbiAgICAgIHJlYWRlci5yZWFkKCkudGhlbihwcm9ncmVzcykuY2F0Y2goZXJyb3IpO1xuICAgICAgcmV0dXJuIFwiJEJcIiArIG5ld1Rhc2suaWQudG9TdHJpbmcoMTYpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZW5kZXJNb2RlbChyZXF1ZXN0LCB0YXNrLCBwYXJlbnQsIGtleSwgdmFsdWUpIHtcbiAgICAgIHNlcmlhbGl6ZWRTaXplICs9IGtleS5sZW5ndGg7XG4gICAgICB2YXIgcHJldktleVBhdGggPSB0YXNrLmtleVBhdGgsXG4gICAgICAgIHByZXZJbXBsaWNpdFNsb3QgPSB0YXNrLmltcGxpY2l0U2xvdDtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiByZW5kZXJNb2RlbERlc3RydWN0aXZlKHJlcXVlc3QsIHRhc2ssIHBhcmVudCwga2V5LCB2YWx1ZSk7XG4gICAgICB9IGNhdGNoICh0aHJvd25WYWx1ZSkge1xuICAgICAgICBwYXJlbnQgPSB0YXNrLm1vZGVsO1xuICAgICAgICBwYXJlbnQgPVxuICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBwYXJlbnQgJiZcbiAgICAgICAgICBudWxsICE9PSBwYXJlbnQgJiZcbiAgICAgICAgICAocGFyZW50LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEUgfHxcbiAgICAgICAgICAgIHBhcmVudC4kJHR5cGVvZiA9PT0gUkVBQ1RfTEFaWV9UWVBFKTtcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSBBQk9SVElORylcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHRhc2suc3RhdHVzID0gMyksXG4gICAgICAgICAgICAodGFzayA9IHJlcXVlc3QuZmF0YWxFcnJvciksXG4gICAgICAgICAgICBwYXJlbnQgPyBzZXJpYWxpemVMYXp5SUQodGFzaykgOiBzZXJpYWxpemVCeVZhbHVlSUQodGFzaylcbiAgICAgICAgICApO1xuICAgICAgICBrZXkgPVxuICAgICAgICAgIHRocm93blZhbHVlID09PSBTdXNwZW5zZUV4Y2VwdGlvblxuICAgICAgICAgICAgPyBnZXRTdXNwZW5kZWRUaGVuYWJsZSgpXG4gICAgICAgICAgICA6IHRocm93blZhbHVlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGtleSAmJlxuICAgICAgICAgIG51bGwgIT09IGtleSAmJlxuICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGtleS50aGVuXG4gICAgICAgIClcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHJlcXVlc3QgPSBjcmVhdGVUYXNrKFxuICAgICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgICAgICB0YXNrLm1vZGVsLFxuICAgICAgICAgICAgICB0YXNrLmtleVBhdGgsXG4gICAgICAgICAgICAgIHRhc2suaW1wbGljaXRTbG90LFxuICAgICAgICAgICAgICByZXF1ZXN0LmFib3J0YWJsZVRhc2tzLFxuICAgICAgICAgICAgICB0YXNrLnRpbWUsXG4gICAgICAgICAgICAgIHRhc2suZGVidWdPd25lcixcbiAgICAgICAgICAgICAgdGFzay5kZWJ1Z1N0YWNrLFxuICAgICAgICAgICAgICB0YXNrLmRlYnVnVGFza1xuICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAodmFsdWUgPSByZXF1ZXN0LnBpbmcpLFxuICAgICAgICAgICAga2V5LnRoZW4odmFsdWUsIHZhbHVlKSxcbiAgICAgICAgICAgIChyZXF1ZXN0LnRoZW5hYmxlU3RhdGUgPSBnZXRUaGVuYWJsZVN0YXRlQWZ0ZXJTdXNwZW5kaW5nKCkpLFxuICAgICAgICAgICAgKHRhc2sua2V5UGF0aCA9IHByZXZLZXlQYXRoKSxcbiAgICAgICAgICAgICh0YXNrLmltcGxpY2l0U2xvdCA9IHByZXZJbXBsaWNpdFNsb3QpLFxuICAgICAgICAgICAgcGFyZW50XG4gICAgICAgICAgICAgID8gc2VyaWFsaXplTGF6eUlEKHJlcXVlc3QuaWQpXG4gICAgICAgICAgICAgIDogc2VyaWFsaXplQnlWYWx1ZUlEKHJlcXVlc3QuaWQpXG4gICAgICAgICAgKTtcbiAgICAgICAgdGFzay5rZXlQYXRoID0gcHJldktleVBhdGg7XG4gICAgICAgIHRhc2suaW1wbGljaXRTbG90ID0gcHJldkltcGxpY2l0U2xvdDtcbiAgICAgICAgcmVxdWVzdC5wZW5kaW5nQ2h1bmtzKys7XG4gICAgICAgIHByZXZLZXlQYXRoID0gcmVxdWVzdC5uZXh0Q2h1bmtJZCsrO1xuICAgICAgICB0YXNrID0gbG9nUmVjb3ZlcmFibGVFcnJvcihyZXF1ZXN0LCBrZXksIHRhc2spO1xuICAgICAgICBlbWl0RXJyb3JDaHVuayhyZXF1ZXN0LCBwcmV2S2V5UGF0aCwgdGFzaywga2V5LCAhMSk7XG4gICAgICAgIHJldHVybiBwYXJlbnRcbiAgICAgICAgICA/IHNlcmlhbGl6ZUxhenlJRChwcmV2S2V5UGF0aClcbiAgICAgICAgICA6IHNlcmlhbGl6ZUJ5VmFsdWVJRChwcmV2S2V5UGF0aCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbmRlck1vZGVsRGVzdHJ1Y3RpdmUoXG4gICAgICByZXF1ZXN0LFxuICAgICAgdGFzayxcbiAgICAgIHBhcmVudCxcbiAgICAgIHBhcmVudFByb3BlcnR5TmFtZSxcbiAgICAgIHZhbHVlXG4gICAgKSB7XG4gICAgICB0YXNrLm1vZGVsID0gdmFsdWU7XG4gICAgICBpZiAodmFsdWUgPT09IFJFQUNUX0VMRU1FTlRfVFlQRSkgcmV0dXJuIFwiJFwiO1xuICAgICAgaWYgKG51bGwgPT09IHZhbHVlKSByZXR1cm4gbnVsbDtcbiAgICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgc3dpdGNoICh2YWx1ZS4kJHR5cGVvZikge1xuICAgICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgICAgdmFyIGVsZW1lbnRSZWZlcmVuY2UgPSBudWxsLFxuICAgICAgICAgICAgICBfd3JpdHRlbk9iamVjdHMgPSByZXF1ZXN0LndyaXR0ZW5PYmplY3RzO1xuICAgICAgICAgICAgaWYgKG51bGwgPT09IHRhc2sua2V5UGF0aCAmJiAhdGFzay5pbXBsaWNpdFNsb3QpIHtcbiAgICAgICAgICAgICAgdmFyIF9leGlzdGluZ1JlZmVyZW5jZSA9IF93cml0dGVuT2JqZWN0cy5nZXQodmFsdWUpO1xuICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSBfZXhpc3RpbmdSZWZlcmVuY2UpXG4gICAgICAgICAgICAgICAgaWYgKG1vZGVsUm9vdCA9PT0gdmFsdWUpIG1vZGVsUm9vdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gX2V4aXN0aW5nUmVmZXJlbmNlO1xuICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgLTEgPT09IHBhcmVudFByb3BlcnR5TmFtZS5pbmRleE9mKFwiOlwiKSAmJlxuICAgICAgICAgICAgICAgICAgKChfZXhpc3RpbmdSZWZlcmVuY2UgPSBfd3JpdHRlbk9iamVjdHMuZ2V0KHBhcmVudCkpLFxuICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSBfZXhpc3RpbmdSZWZlcmVuY2UgJiZcbiAgICAgICAgICAgICAgICAgICAgKChlbGVtZW50UmVmZXJlbmNlID1cbiAgICAgICAgICAgICAgICAgICAgICBfZXhpc3RpbmdSZWZlcmVuY2UgKyBcIjpcIiArIHBhcmVudFByb3BlcnR5TmFtZSksXG4gICAgICAgICAgICAgICAgICAgIF93cml0dGVuT2JqZWN0cy5zZXQodmFsdWUsIGVsZW1lbnRSZWZlcmVuY2UpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VyaWFsaXplZFNpemUgPiBNQVhfUk9XX1NJWkUpIHJldHVybiBkZWZlclRhc2socmVxdWVzdCwgdGFzayk7XG4gICAgICAgICAgICBpZiAoKF9leGlzdGluZ1JlZmVyZW5jZSA9IHZhbHVlLl9kZWJ1Z0luZm8pKVxuICAgICAgICAgICAgICBpZiAoY2FuRW1pdERlYnVnSW5mbylcbiAgICAgICAgICAgICAgICBmb3J3YXJkRGVidWdJbmZvKHJlcXVlc3QsIHRhc2ssIF9leGlzdGluZ1JlZmVyZW5jZSk7XG4gICAgICAgICAgICAgIGVsc2UgcmV0dXJuIG91dGxpbmVUYXNrKHJlcXVlc3QsIHRhc2spO1xuICAgICAgICAgICAgX2V4aXN0aW5nUmVmZXJlbmNlID0gdmFsdWUucHJvcHM7XG4gICAgICAgICAgICB2YXIgcmVmUHJvcCA9IF9leGlzdGluZ1JlZmVyZW5jZS5yZWY7XG4gICAgICAgICAgICByZWZQcm9wID0gdm9pZCAwICE9PSByZWZQcm9wID8gcmVmUHJvcCA6IG51bGw7XG4gICAgICAgICAgICB0YXNrLmRlYnVnT3duZXIgPSB2YWx1ZS5fb3duZXI7XG4gICAgICAgICAgICB0YXNrLmRlYnVnU3RhY2sgPSB2YWx1ZS5fZGVidWdTdGFjaztcbiAgICAgICAgICAgIHRhc2suZGVidWdUYXNrID0gdmFsdWUuX2RlYnVnVGFzaztcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgdm9pZCAwID09PSB2YWx1ZS5fb3duZXIgfHxcbiAgICAgICAgICAgICAgdm9pZCAwID09PSB2YWx1ZS5fZGVidWdTdGFjayB8fFxuICAgICAgICAgICAgICB2b2lkIDAgPT09IHZhbHVlLl9kZWJ1Z1Rhc2tcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICB2YXIga2V5ID0gXCJcIjtcbiAgICAgICAgICAgICAgbnVsbCAhPT0gdmFsdWUua2V5ICYmIChrZXkgPSAnIGtleT1cIicgKyB2YWx1ZS5rZXkgKyAnXCInKTtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICBcIkF0dGVtcHRlZCB0byByZW5kZXIgPCVzJXM+IHdpdGhvdXQgZGV2ZWxvcG1lbnQgcHJvcGVydGllcy4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJdCBjYW4gaGFwcGVuIGlmOlxcbi0gVGhlIGVsZW1lbnQgaXMgY3JlYXRlZCB3aXRoIGEgcHJvZHVjdGlvbiB2ZXJzaW9uIG9mIFJlYWN0IGJ1dCByZW5kZXJlZCBpbiBkZXZlbG9wbWVudC5cXG4tIFRoZSBlbGVtZW50IHdhcyBjbG9uZWQgd2l0aCBhIGN1c3RvbSBmdW5jdGlvbiBpbnN0ZWFkIG9mIGBSZWFjdC5jbG9uZUVsZW1lbnRgLlxcblRoZSBwcm9wcyBvZiB0aGlzIGVsZW1lbnQgbWF5IGhlbHAgbG9jYXRlIHRoaXMgZWxlbWVudDogJW9cIixcbiAgICAgICAgICAgICAgICB2YWx1ZS50eXBlLFxuICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICB2YWx1ZS5wcm9wc1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVxdWVzdCA9IHJlbmRlckVsZW1lbnQoXG4gICAgICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgICAgIHRhc2ssXG4gICAgICAgICAgICAgIHZhbHVlLnR5cGUsXG4gICAgICAgICAgICAgIHZhbHVlLmtleSxcbiAgICAgICAgICAgICAgcmVmUHJvcCxcbiAgICAgICAgICAgICAgX2V4aXN0aW5nUmVmZXJlbmNlLFxuICAgICAgICAgICAgICB2YWx1ZS5fc3RvcmUudmFsaWRhdGVkXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHJlcXVlc3QgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gcmVxdWVzdCAmJlxuICAgICAgICAgICAgICBudWxsICE9PSBlbGVtZW50UmVmZXJlbmNlICYmXG4gICAgICAgICAgICAgIChfd3JpdHRlbk9iamVjdHMuaGFzKHJlcXVlc3QpIHx8XG4gICAgICAgICAgICAgICAgX3dyaXR0ZW5PYmplY3RzLnNldChyZXF1ZXN0LCBlbGVtZW50UmVmZXJlbmNlKSk7XG4gICAgICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICAgIGlmIChzZXJpYWxpemVkU2l6ZSA+IE1BWF9ST1dfU0laRSkgcmV0dXJuIGRlZmVyVGFzayhyZXF1ZXN0LCB0YXNrKTtcbiAgICAgICAgICAgIHRhc2sudGhlbmFibGVTdGF0ZSA9IG51bGw7XG4gICAgICAgICAgICBlbGVtZW50UmVmZXJlbmNlID0gY2FsbExhenlJbml0SW5ERVYodmFsdWUpO1xuICAgICAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSBBQk9SVElORykgdGhyb3cgbnVsbDtcbiAgICAgICAgICAgIGlmICgoX3dyaXR0ZW5PYmplY3RzID0gdmFsdWUuX2RlYnVnSW5mbykpXG4gICAgICAgICAgICAgIGlmIChjYW5FbWl0RGVidWdJbmZvKVxuICAgICAgICAgICAgICAgIGZvcndhcmREZWJ1Z0luZm8ocmVxdWVzdCwgdGFzaywgX3dyaXR0ZW5PYmplY3RzKTtcbiAgICAgICAgICAgICAgZWxzZSByZXR1cm4gb3V0bGluZVRhc2socmVxdWVzdCwgdGFzayk7XG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyTW9kZWxEZXN0cnVjdGl2ZShcbiAgICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgICAgdGFzayxcbiAgICAgICAgICAgICAgZW1wdHlSb290LFxuICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgICBlbGVtZW50UmVmZXJlbmNlXG4gICAgICAgICAgICApO1xuICAgICAgICAgIGNhc2UgUkVBQ1RfTEVHQUNZX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgICAnQSBSZWFjdCBFbGVtZW50IGZyb20gYW4gb2xkZXIgdmVyc2lvbiBvZiBSZWFjdCB3YXMgcmVuZGVyZWQuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSXQgY2FuIGhhcHBlbiBpZjpcXG4tIE11bHRpcGxlIGNvcGllcyBvZiB0aGUgXCJyZWFjdFwiIHBhY2thZ2UgaXMgdXNlZC5cXG4tIEEgbGlicmFyeSBwcmUtYnVuZGxlZCBhbiBvbGQgY29weSBvZiBcInJlYWN0XCIgb3IgXCJyZWFjdC9qc3gtcnVudGltZVwiLlxcbi0gQSBjb21waWxlciB0cmllcyB0byBcImlubGluZVwiIEpTWCBpbnN0ZWFkIG9mIHVzaW5nIHRoZSBydW50aW1lLidcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ2xpZW50UmVmZXJlbmNlKHZhbHVlKSlcbiAgICAgICAgICByZXR1cm4gc2VyaWFsaXplQ2xpZW50UmVmZXJlbmNlKFxuICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgIHBhcmVudCxcbiAgICAgICAgICAgIHBhcmVudFByb3BlcnR5TmFtZSxcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHZvaWQgMCAhPT0gcmVxdWVzdC50ZW1wb3JhcnlSZWZlcmVuY2VzICYmXG4gICAgICAgICAgKChlbGVtZW50UmVmZXJlbmNlID0gcmVxdWVzdC50ZW1wb3JhcnlSZWZlcmVuY2VzLmdldCh2YWx1ZSkpLFxuICAgICAgICAgIHZvaWQgMCAhPT0gZWxlbWVudFJlZmVyZW5jZSlcbiAgICAgICAgKVxuICAgICAgICAgIHJldHVybiBcIiRUXCIgKyBlbGVtZW50UmVmZXJlbmNlO1xuICAgICAgICBlbGVtZW50UmVmZXJlbmNlID0gcmVxdWVzdC53cml0dGVuT2JqZWN0cztcbiAgICAgICAgX3dyaXR0ZW5PYmplY3RzID0gZWxlbWVudFJlZmVyZW5jZS5nZXQodmFsdWUpO1xuICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUudGhlbikge1xuICAgICAgICAgIGlmICh2b2lkIDAgIT09IF93cml0dGVuT2JqZWN0cykge1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IHRhc2sua2V5UGF0aCB8fCB0YXNrLmltcGxpY2l0U2xvdClcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBcIiRAXCIgKyBzZXJpYWxpemVUaGVuYWJsZShyZXF1ZXN0LCB0YXNrLCB2YWx1ZSkudG9TdHJpbmcoMTYpXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAobW9kZWxSb290ID09PSB2YWx1ZSkgbW9kZWxSb290ID0gbnVsbDtcbiAgICAgICAgICAgIGVsc2UgcmV0dXJuIF93cml0dGVuT2JqZWN0cztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVxdWVzdCA9IFwiJEBcIiArIHNlcmlhbGl6ZVRoZW5hYmxlKHJlcXVlc3QsIHRhc2ssIHZhbHVlKS50b1N0cmluZygxNik7XG4gICAgICAgICAgZWxlbWVudFJlZmVyZW5jZS5zZXQodmFsdWUsIHJlcXVlc3QpO1xuICAgICAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh2b2lkIDAgIT09IF93cml0dGVuT2JqZWN0cylcbiAgICAgICAgICBpZiAobW9kZWxSb290ID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKF93cml0dGVuT2JqZWN0cyAhPT0gc2VyaWFsaXplQnlWYWx1ZUlEKHRhc2suaWQpKVxuICAgICAgICAgICAgICByZXR1cm4gX3dyaXR0ZW5PYmplY3RzO1xuICAgICAgICAgICAgbW9kZWxSb290ID0gbnVsbDtcbiAgICAgICAgICB9IGVsc2UgcmV0dXJuIF93cml0dGVuT2JqZWN0cztcbiAgICAgICAgZWxzZSBpZiAoXG4gICAgICAgICAgLTEgPT09IHBhcmVudFByb3BlcnR5TmFtZS5pbmRleE9mKFwiOlwiKSAmJlxuICAgICAgICAgICgoX3dyaXR0ZW5PYmplY3RzID0gZWxlbWVudFJlZmVyZW5jZS5nZXQocGFyZW50KSksXG4gICAgICAgICAgdm9pZCAwICE9PSBfd3JpdHRlbk9iamVjdHMpXG4gICAgICAgICkge1xuICAgICAgICAgIF9leGlzdGluZ1JlZmVyZW5jZSA9IHBhcmVudFByb3BlcnR5TmFtZTtcbiAgICAgICAgICBpZiAoaXNBcnJheUltcGwocGFyZW50KSAmJiBwYXJlbnRbMF0gPT09IFJFQUNUX0VMRU1FTlRfVFlQRSlcbiAgICAgICAgICAgIHN3aXRjaCAocGFyZW50UHJvcGVydHlOYW1lKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCIxXCI6XG4gICAgICAgICAgICAgICAgX2V4aXN0aW5nUmVmZXJlbmNlID0gXCJ0eXBlXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCIyXCI6XG4gICAgICAgICAgICAgICAgX2V4aXN0aW5nUmVmZXJlbmNlID0gXCJrZXlcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcIjNcIjpcbiAgICAgICAgICAgICAgICBfZXhpc3RpbmdSZWZlcmVuY2UgPSBcInByb3BzXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCI0XCI6XG4gICAgICAgICAgICAgICAgX2V4aXN0aW5nUmVmZXJlbmNlID0gXCJfb3duZXJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBlbGVtZW50UmVmZXJlbmNlLnNldChcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgX3dyaXR0ZW5PYmplY3RzICsgXCI6XCIgKyBfZXhpc3RpbmdSZWZlcmVuY2VcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5SW1wbCh2YWx1ZSkpIHJldHVybiByZW5kZXJGcmFnbWVudChyZXF1ZXN0LCB0YXNrLCB2YWx1ZSk7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE1hcCkgcmV0dXJuIHNlcmlhbGl6ZU1hcChyZXF1ZXN0LCB2YWx1ZSk7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFNldCkgcmV0dXJuIHNlcmlhbGl6ZVNldChyZXF1ZXN0LCB2YWx1ZSk7XG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBGb3JtRGF0YSAmJiB2YWx1ZSBpbnN0YW5jZW9mIEZvcm1EYXRhKVxuICAgICAgICAgIHJldHVybiBzZXJpYWxpemVGb3JtRGF0YShyZXF1ZXN0LCB2YWx1ZSk7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gc2VyaWFsaXplRXJyb3JWYWx1ZShyZXF1ZXN0LCB2YWx1ZSk7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKVxuICAgICAgICAgIHJldHVybiBzZXJpYWxpemVUeXBlZEFycmF5KHJlcXVlc3QsIFwiQVwiLCBuZXcgVWludDhBcnJheSh2YWx1ZSkpO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJbnQ4QXJyYXkpXG4gICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZVR5cGVkQXJyYXkocmVxdWVzdCwgXCJPXCIsIHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSlcbiAgICAgICAgICByZXR1cm4gc2VyaWFsaXplVHlwZWRBcnJheShyZXF1ZXN0LCBcIm9cIiwgdmFsdWUpO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheSlcbiAgICAgICAgICByZXR1cm4gc2VyaWFsaXplVHlwZWRBcnJheShyZXF1ZXN0LCBcIlVcIiwgdmFsdWUpO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJbnQxNkFycmF5KVxuICAgICAgICAgIHJldHVybiBzZXJpYWxpemVUeXBlZEFycmF5KHJlcXVlc3QsIFwiU1wiLCB2YWx1ZSk7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFVpbnQxNkFycmF5KVxuICAgICAgICAgIHJldHVybiBzZXJpYWxpemVUeXBlZEFycmF5KHJlcXVlc3QsIFwic1wiLCB2YWx1ZSk7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEludDMyQXJyYXkpXG4gICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZVR5cGVkQXJyYXkocmVxdWVzdCwgXCJMXCIsIHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVWludDMyQXJyYXkpXG4gICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZVR5cGVkQXJyYXkocmVxdWVzdCwgXCJsXCIsIHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5KVxuICAgICAgICAgIHJldHVybiBzZXJpYWxpemVUeXBlZEFycmF5KHJlcXVlc3QsIFwiR1wiLCB2YWx1ZSk7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheSlcbiAgICAgICAgICByZXR1cm4gc2VyaWFsaXplVHlwZWRBcnJheShyZXF1ZXN0LCBcImdcIiwgdmFsdWUpO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBCaWdJbnQ2NEFycmF5KVxuICAgICAgICAgIHJldHVybiBzZXJpYWxpemVUeXBlZEFycmF5KHJlcXVlc3QsIFwiTVwiLCB2YWx1ZSk7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEJpZ1VpbnQ2NEFycmF5KVxuICAgICAgICAgIHJldHVybiBzZXJpYWxpemVUeXBlZEFycmF5KHJlcXVlc3QsIFwibVwiLCB2YWx1ZSk7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGFWaWV3KVxuICAgICAgICAgIHJldHVybiBzZXJpYWxpemVUeXBlZEFycmF5KHJlcXVlc3QsIFwiVlwiLCB2YWx1ZSk7XG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBCbG9iICYmIHZhbHVlIGluc3RhbmNlb2YgQmxvYilcbiAgICAgICAgICByZXR1cm4gc2VyaWFsaXplQmxvYihyZXF1ZXN0LCB2YWx1ZSk7XG4gICAgICAgIGlmICgoZWxlbWVudFJlZmVyZW5jZSA9IGdldEl0ZXJhdG9yRm4odmFsdWUpKSlcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKGVsZW1lbnRSZWZlcmVuY2UgPSBlbGVtZW50UmVmZXJlbmNlLmNhbGwodmFsdWUpKSxcbiAgICAgICAgICAgIGVsZW1lbnRSZWZlcmVuY2UgPT09IHZhbHVlXG4gICAgICAgICAgICAgID8gXCIkaVwiICtcbiAgICAgICAgICAgICAgICBvdXRsaW5lTW9kZWwocmVxdWVzdCwgQXJyYXkuZnJvbShlbGVtZW50UmVmZXJlbmNlKSkudG9TdHJpbmcoMTYpXG4gICAgICAgICAgICAgIDogcmVuZGVyRnJhZ21lbnQocmVxdWVzdCwgdGFzaywgQXJyYXkuZnJvbShlbGVtZW50UmVmZXJlbmNlKSlcbiAgICAgICAgICApO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgUmVhZGFibGVTdHJlYW0gJiZcbiAgICAgICAgICB2YWx1ZSBpbnN0YW5jZW9mIFJlYWRhYmxlU3RyZWFtXG4gICAgICAgIClcbiAgICAgICAgICByZXR1cm4gc2VyaWFsaXplUmVhZGFibGVTdHJlYW0ocmVxdWVzdCwgdGFzaywgdmFsdWUpO1xuICAgICAgICBlbGVtZW50UmVmZXJlbmNlID0gdmFsdWVbQVNZTkNfSVRFUkFUT1JdO1xuICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZWxlbWVudFJlZmVyZW5jZSlcbiAgICAgICAgICByZXR1cm4gcmVuZGVyQXN5bmNGcmFnbWVudChyZXF1ZXN0LCB0YXNrLCB2YWx1ZSwgZWxlbWVudFJlZmVyZW5jZSk7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHJldHVybiBcIiREXCIgKyB2YWx1ZS50b0pTT04oKTtcbiAgICAgICAgZWxlbWVudFJlZmVyZW5jZSA9IGdldFByb3RvdHlwZU9mKHZhbHVlKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGVsZW1lbnRSZWZlcmVuY2UgIT09IE9iamVjdFByb3RvdHlwZSAmJlxuICAgICAgICAgIChudWxsID09PSBlbGVtZW50UmVmZXJlbmNlIHx8XG4gICAgICAgICAgICBudWxsICE9PSBnZXRQcm90b3R5cGVPZihlbGVtZW50UmVmZXJlbmNlKSlcbiAgICAgICAgKVxuICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgXCJPbmx5IHBsYWluIG9iamVjdHMsIGFuZCBhIGZldyBidWlsdC1pbnMsIGNhbiBiZSBwYXNzZWQgdG8gQ2xpZW50IENvbXBvbmVudHMgZnJvbSBTZXJ2ZXIgQ29tcG9uZW50cy4gQ2xhc3NlcyBvciBudWxsIHByb3RvdHlwZXMgYXJlIG5vdCBzdXBwb3J0ZWQuXCIgK1xuICAgICAgICAgICAgICBkZXNjcmliZU9iamVjdEZvckVycm9yTWVzc2FnZShwYXJlbnQsIHBhcmVudFByb3BlcnR5TmFtZSlcbiAgICAgICAgICApO1xuICAgICAgICBpZiAoXCJPYmplY3RcIiAhPT0gb2JqZWN0TmFtZSh2YWx1ZSkpXG4gICAgICAgICAgY2FsbFdpdGhEZWJ1Z0NvbnRleHRJbkRFVihyZXF1ZXN0LCB0YXNrLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICBcIk9ubHkgcGxhaW4gb2JqZWN0cyBjYW4gYmUgcGFzc2VkIHRvIENsaWVudCBDb21wb25lbnRzIGZyb20gU2VydmVyIENvbXBvbmVudHMuICVzIG9iamVjdHMgYXJlIG5vdCBzdXBwb3J0ZWQuJXNcIixcbiAgICAgICAgICAgICAgb2JqZWN0TmFtZSh2YWx1ZSksXG4gICAgICAgICAgICAgIGRlc2NyaWJlT2JqZWN0Rm9yRXJyb3JNZXNzYWdlKHBhcmVudCwgcGFyZW50UHJvcGVydHlOYW1lKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgZWxzZSBpZiAoIWlzU2ltcGxlT2JqZWN0KHZhbHVlKSlcbiAgICAgICAgICBjYWxsV2l0aERlYnVnQ29udGV4dEluREVWKHJlcXVlc3QsIHRhc2ssIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgIFwiT25seSBwbGFpbiBvYmplY3RzIGNhbiBiZSBwYXNzZWQgdG8gQ2xpZW50IENvbXBvbmVudHMgZnJvbSBTZXJ2ZXIgQ29tcG9uZW50cy4gQ2xhc3NlcyBvciBvdGhlciBvYmplY3RzIHdpdGggbWV0aG9kcyBhcmUgbm90IHN1cHBvcnRlZC4lc1wiLFxuICAgICAgICAgICAgICBkZXNjcmliZU9iamVjdEZvckVycm9yTWVzc2FnZShwYXJlbnQsIHBhcmVudFByb3BlcnR5TmFtZSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgICAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModmFsdWUpO1xuICAgICAgICAgIDAgPCBzeW1ib2xzLmxlbmd0aCAmJlxuICAgICAgICAgICAgY2FsbFdpdGhEZWJ1Z0NvbnRleHRJbkRFVihyZXF1ZXN0LCB0YXNrLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgXCJPbmx5IHBsYWluIG9iamVjdHMgY2FuIGJlIHBhc3NlZCB0byBDbGllbnQgQ29tcG9uZW50cyBmcm9tIFNlcnZlciBDb21wb25lbnRzLiBPYmplY3RzIHdpdGggc3ltYm9sIHByb3BlcnRpZXMgbGlrZSAlcyBhcmUgbm90IHN1cHBvcnRlZC4lc1wiLFxuICAgICAgICAgICAgICAgIHN5bWJvbHNbMF0uZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgZGVzY3JpYmVPYmplY3RGb3JFcnJvck1lc3NhZ2UocGFyZW50LCBwYXJlbnRQcm9wZXJ0eU5hbWUpXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHZhbHVlKVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIChzZXJpYWxpemVkU2l6ZSArPSB2YWx1ZS5sZW5ndGgpLFxuICAgICAgICAgIFwiWlwiID09PSB2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSAmJlxuICAgICAgICAgIHBhcmVudFtwYXJlbnRQcm9wZXJ0eU5hbWVdIGluc3RhbmNlb2YgRGF0ZVxuICAgICAgICAgICAgPyBcIiREXCIgKyB2YWx1ZVxuICAgICAgICAgICAgOiAxMDI0IDw9IHZhbHVlLmxlbmd0aCAmJiBudWxsICE9PSBieXRlTGVuZ3RoT2ZDaHVua1xuICAgICAgICAgICAgICA/IHNlcmlhbGl6ZUxhcmdlVGV4dFN0cmluZyhyZXF1ZXN0LCB2YWx1ZSlcbiAgICAgICAgICAgICAgOiBcIiRcIiA9PT0gdmFsdWVbMF1cbiAgICAgICAgICAgICAgICA/IFwiJFwiICsgdmFsdWVcbiAgICAgICAgICAgICAgICA6IHZhbHVlXG4gICAgICAgICk7XG4gICAgICBpZiAoXCJib29sZWFuXCIgPT09IHR5cGVvZiB2YWx1ZSkgcmV0dXJuIHZhbHVlO1xuICAgICAgaWYgKFwibnVtYmVyXCIgPT09IHR5cGVvZiB2YWx1ZSkgcmV0dXJuIHNlcmlhbGl6ZU51bWJlcih2YWx1ZSk7XG4gICAgICBpZiAoXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIHZhbHVlKSByZXR1cm4gXCIkdW5kZWZpbmVkXCI7XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzQ2xpZW50UmVmZXJlbmNlKHZhbHVlKSlcbiAgICAgICAgICByZXR1cm4gc2VyaWFsaXplQ2xpZW50UmVmZXJlbmNlKFxuICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgIHBhcmVudCxcbiAgICAgICAgICAgIHBhcmVudFByb3BlcnR5TmFtZSxcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgKTtcbiAgICAgICAgaWYgKHZhbHVlLiQkdHlwZW9mID09PSBTRVJWRVJfUkVGRVJFTkNFX1RBRylcbiAgICAgICAgICByZXR1cm4gc2VyaWFsaXplU2VydmVyUmVmZXJlbmNlKHJlcXVlc3QsIHZhbHVlKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHZvaWQgMCAhPT0gcmVxdWVzdC50ZW1wb3JhcnlSZWZlcmVuY2VzICYmXG4gICAgICAgICAgKChyZXF1ZXN0ID0gcmVxdWVzdC50ZW1wb3JhcnlSZWZlcmVuY2VzLmdldCh2YWx1ZSkpLFxuICAgICAgICAgIHZvaWQgMCAhPT0gcmVxdWVzdClcbiAgICAgICAgKVxuICAgICAgICAgIHJldHVybiBcIiRUXCIgKyByZXF1ZXN0O1xuICAgICAgICBpZiAodmFsdWUuJCR0eXBlb2YgPT09IFRFTVBPUkFSWV9SRUZFUkVOQ0VfVEFHKVxuICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgXCJDb3VsZCBub3QgcmVmZXJlbmNlIGFuIG9wYXF1ZSB0ZW1wb3JhcnkgcmVmZXJlbmNlLiBUaGlzIGlzIGxpa2VseSBkdWUgdG8gbWlzY29uZmlndXJpbmcgdGhlIHRlbXBvcmFyeVJlZmVyZW5jZXMgb3B0aW9ucyBvbiB0aGUgc2VydmVyLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgaWYgKC9eb25bQS1aXS8udGVzdChwYXJlbnRQcm9wZXJ0eU5hbWUpKVxuICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgXCJFdmVudCBoYW5kbGVycyBjYW5ub3QgYmUgcGFzc2VkIHRvIENsaWVudCBDb21wb25lbnQgcHJvcHMuXCIgK1xuICAgICAgICAgICAgICBkZXNjcmliZU9iamVjdEZvckVycm9yTWVzc2FnZShwYXJlbnQsIHBhcmVudFByb3BlcnR5TmFtZSkgK1xuICAgICAgICAgICAgICBcIlxcbklmIHlvdSBuZWVkIGludGVyYWN0aXZpdHksIGNvbnNpZGVyIGNvbnZlcnRpbmcgcGFydCBvZiB0aGlzIHRvIGEgQ2xpZW50IENvbXBvbmVudC5cIlxuICAgICAgICAgICk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBqc3hDaGlsZHJlblBhcmVudHMuaGFzKHBhcmVudCkgfHxcbiAgICAgICAgICAoanN4UHJvcHNQYXJlbnRzLmhhcyhwYXJlbnQpICYmIFwiY2hpbGRyZW5cIiA9PT0gcGFyZW50UHJvcGVydHlOYW1lKVxuICAgICAgICApXG4gICAgICAgICAgdGhyb3cgKFxuICAgICAgICAgICAgKChyZXF1ZXN0ID0gdmFsdWUuZGlzcGxheU5hbWUgfHwgdmFsdWUubmFtZSB8fCBcIkNvbXBvbmVudFwiKSxcbiAgICAgICAgICAgIEVycm9yKFxuICAgICAgICAgICAgICBcIkZ1bmN0aW9ucyBhcmUgbm90IHZhbGlkIGFzIGEgY2hpbGQgb2YgQ2xpZW50IENvbXBvbmVudHMuIFRoaXMgbWF5IGhhcHBlbiBpZiB5b3UgcmV0dXJuIFwiICtcbiAgICAgICAgICAgICAgICByZXF1ZXN0ICtcbiAgICAgICAgICAgICAgICBcIiBpbnN0ZWFkIG9mIDxcIiArXG4gICAgICAgICAgICAgICAgcmVxdWVzdCArXG4gICAgICAgICAgICAgICAgXCIgLz4gZnJvbSByZW5kZXIuIE9yIG1heWJlIHlvdSBtZWFudCB0byBjYWxsIHRoaXMgZnVuY3Rpb24gcmF0aGVyIHRoYW4gcmV0dXJuIGl0LlwiICtcbiAgICAgICAgICAgICAgICBkZXNjcmliZU9iamVjdEZvckVycm9yTWVzc2FnZShwYXJlbnQsIHBhcmVudFByb3BlcnR5TmFtZSlcbiAgICAgICAgICAgICkpXG4gICAgICAgICAgKTtcbiAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgJ0Z1bmN0aW9ucyBjYW5ub3QgYmUgcGFzc2VkIGRpcmVjdGx5IHRvIENsaWVudCBDb21wb25lbnRzIHVubGVzcyB5b3UgZXhwbGljaXRseSBleHBvc2UgaXQgYnkgbWFya2luZyBpdCB3aXRoIFwidXNlIHNlcnZlclwiLiBPciBtYXliZSB5b3UgbWVhbnQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uIHJhdGhlciB0aGFuIHJldHVybiBpdC4nICtcbiAgICAgICAgICAgIGRlc2NyaWJlT2JqZWN0Rm9yRXJyb3JNZXNzYWdlKHBhcmVudCwgcGFyZW50UHJvcGVydHlOYW1lKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKFwic3ltYm9sXCIgPT09IHR5cGVvZiB2YWx1ZSkge1xuICAgICAgICB0YXNrID0gcmVxdWVzdC53cml0dGVuU3ltYm9scztcbiAgICAgICAgZWxlbWVudFJlZmVyZW5jZSA9IHRhc2suZ2V0KHZhbHVlKTtcbiAgICAgICAgaWYgKHZvaWQgMCAhPT0gZWxlbWVudFJlZmVyZW5jZSlcbiAgICAgICAgICByZXR1cm4gc2VyaWFsaXplQnlWYWx1ZUlEKGVsZW1lbnRSZWZlcmVuY2UpO1xuICAgICAgICBlbGVtZW50UmVmZXJlbmNlID0gdmFsdWUuZGVzY3JpcHRpb247XG4gICAgICAgIGlmIChTeW1ib2wuZm9yKGVsZW1lbnRSZWZlcmVuY2UpICE9PSB2YWx1ZSlcbiAgICAgICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgICAgIFwiT25seSBnbG9iYWwgc3ltYm9scyByZWNlaXZlZCBmcm9tIFN5bWJvbC5mb3IoLi4uKSBjYW4gYmUgcGFzc2VkIHRvIENsaWVudCBDb21wb25lbnRzLiBUaGUgc3ltYm9sIFN5bWJvbC5mb3IoXCIgK1xuICAgICAgICAgICAgICAodmFsdWUuZGVzY3JpcHRpb24gKyBcIikgY2Fubm90IGJlIGZvdW5kIGFtb25nIGdsb2JhbCBzeW1ib2xzLlwiKSArXG4gICAgICAgICAgICAgIGRlc2NyaWJlT2JqZWN0Rm9yRXJyb3JNZXNzYWdlKHBhcmVudCwgcGFyZW50UHJvcGVydHlOYW1lKVxuICAgICAgICAgICk7XG4gICAgICAgIHJlcXVlc3QucGVuZGluZ0NodW5rcysrO1xuICAgICAgICBfd3JpdHRlbk9iamVjdHMgPSByZXF1ZXN0Lm5leHRDaHVua0lkKys7XG4gICAgICAgIGVtaXRTeW1ib2xDaHVuayhyZXF1ZXN0LCBfd3JpdHRlbk9iamVjdHMsIGVsZW1lbnRSZWZlcmVuY2UpO1xuICAgICAgICB0YXNrLnNldCh2YWx1ZSwgX3dyaXR0ZW5PYmplY3RzKTtcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZUJ5VmFsdWVJRChfd3JpdHRlbk9iamVjdHMpO1xuICAgICAgfVxuICAgICAgaWYgKFwiYmlnaW50XCIgPT09IHR5cGVvZiB2YWx1ZSkgcmV0dXJuIFwiJG5cIiArIHZhbHVlLnRvU3RyaW5nKDEwKTtcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICBcIlR5cGUgXCIgK1xuICAgICAgICAgIHR5cGVvZiB2YWx1ZSArXG4gICAgICAgICAgXCIgaXMgbm90IHN1cHBvcnRlZCBpbiBDbGllbnQgQ29tcG9uZW50IHByb3BzLlwiICtcbiAgICAgICAgICBkZXNjcmliZU9iamVjdEZvckVycm9yTWVzc2FnZShwYXJlbnQsIHBhcmVudFByb3BlcnR5TmFtZSlcbiAgICAgICk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxvZ1JlY292ZXJhYmxlRXJyb3IocmVxdWVzdCwgZXJyb3IsIHRhc2spIHtcbiAgICAgIHZhciBwcmV2UmVxdWVzdCA9IGN1cnJlbnRSZXF1ZXN0O1xuICAgICAgY3VycmVudFJlcXVlc3QgPSBudWxsO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG9uRXJyb3IgPSByZXF1ZXN0Lm9uRXJyb3I7XG4gICAgICAgIHZhciBlcnJvckRpZ2VzdCA9XG4gICAgICAgICAgbnVsbCAhPT0gdGFza1xuICAgICAgICAgICAgPyBzdXBwb3J0c1JlcXVlc3RTdG9yYWdlXG4gICAgICAgICAgICAgID8gcmVxdWVzdFN0b3JhZ2UucnVuKFxuICAgICAgICAgICAgICAgICAgdm9pZCAwLFxuICAgICAgICAgICAgICAgICAgY2FsbFdpdGhEZWJ1Z0NvbnRleHRJbkRFVixcbiAgICAgICAgICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgICAgICAgICB0YXNrLFxuICAgICAgICAgICAgICAgICAgb25FcnJvcixcbiAgICAgICAgICAgICAgICAgIGVycm9yXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICA6IGNhbGxXaXRoRGVidWdDb250ZXh0SW5ERVYocmVxdWVzdCwgdGFzaywgb25FcnJvciwgZXJyb3IpXG4gICAgICAgICAgICA6IHN1cHBvcnRzUmVxdWVzdFN0b3JhZ2VcbiAgICAgICAgICAgICAgPyByZXF1ZXN0U3RvcmFnZS5ydW4odm9pZCAwLCBvbkVycm9yLCBlcnJvcilcbiAgICAgICAgICAgICAgOiBvbkVycm9yKGVycm9yKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGN1cnJlbnRSZXF1ZXN0ID0gcHJldlJlcXVlc3Q7XG4gICAgICB9XG4gICAgICBpZiAobnVsbCAhPSBlcnJvckRpZ2VzdCAmJiBcInN0cmluZ1wiICE9PSB0eXBlb2YgZXJyb3JEaWdlc3QpXG4gICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICdvbkVycm9yIHJldHVybmVkIHNvbWV0aGluZyB3aXRoIGEgdHlwZSBvdGhlciB0aGFuIFwic3RyaW5nXCIuIG9uRXJyb3Igc2hvdWxkIHJldHVybiBhIHN0cmluZyBhbmQgbWF5IHJldHVybiBudWxsIG9yIHVuZGVmaW5lZCBidXQgbXVzdCBub3QgcmV0dXJuIGFueXRoaW5nIGVsc2UuIEl0IHJlY2VpdmVkIHNvbWV0aGluZyBvZiB0eXBlIFwiJyArXG4gICAgICAgICAgICB0eXBlb2YgZXJyb3JEaWdlc3QgK1xuICAgICAgICAgICAgJ1wiIGluc3RlYWQnXG4gICAgICAgICk7XG4gICAgICByZXR1cm4gZXJyb3JEaWdlc3QgfHwgXCJcIjtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmF0YWxFcnJvcihyZXF1ZXN0LCBlcnJvcikge1xuICAgICAgdmFyIG9uRmF0YWxFcnJvciA9IHJlcXVlc3Qub25GYXRhbEVycm9yO1xuICAgICAgb25GYXRhbEVycm9yKGVycm9yKTtcbiAgICAgIG51bGwgIT09IHJlcXVlc3QuZGVzdGluYXRpb25cbiAgICAgICAgPyAoKHJlcXVlc3Quc3RhdHVzID0gQ0xPU0VEKSxcbiAgICAgICAgICBjbG9zZVdpdGhFcnJvcihyZXF1ZXN0LmRlc3RpbmF0aW9uLCBlcnJvcikpXG4gICAgICAgIDogKChyZXF1ZXN0LnN0YXR1cyA9IDEzKSwgKHJlcXVlc3QuZmF0YWxFcnJvciA9IGVycm9yKSk7XG4gICAgICByZXF1ZXN0LmNhY2hlQ29udHJvbGxlci5hYm9ydChcbiAgICAgICAgRXJyb3IoXCJUaGUgcmVuZGVyIHdhcyBhYm9ydGVkIGR1ZSB0byBhIGZhdGFsIGVycm9yLlwiLCB7IGNhdXNlOiBlcnJvciB9KVxuICAgICAgKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2VyaWFsaXplRXJyb3JWYWx1ZShyZXF1ZXN0LCBlcnJvcikge1xuICAgICAgdmFyIG5hbWUgPSBcIkVycm9yXCIsXG4gICAgICAgIGVudiA9ICgwLCByZXF1ZXN0LmVudmlyb25tZW50TmFtZSkoKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5hbWUgPSBlcnJvci5uYW1lO1xuICAgICAgICB2YXIgbWVzc2FnZSA9IFN0cmluZyhlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgdmFyIHN0YWNrID0gZmlsdGVyU3RhY2tUcmFjZShyZXF1ZXN0LCBwYXJzZVN0YWNrVHJhY2UoZXJyb3IsIDApKTtcbiAgICAgICAgdmFyIGVycm9yRW52ID0gZXJyb3IuZW52aXJvbm1lbnROYW1lO1xuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgZXJyb3JFbnYgJiYgKGVudiA9IGVycm9yRW52KTtcbiAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgKG1lc3NhZ2UgPVxuICAgICAgICAgIFwiQW4gZXJyb3Igb2NjdXJyZWQgYnV0IHNlcmlhbGl6aW5nIHRoZSBlcnJvciBtZXNzYWdlIGZhaWxlZC5cIiksXG4gICAgICAgICAgKHN0YWNrID0gW10pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgXCIkWlwiICtcbiAgICAgICAgb3V0bGluZU1vZGVsKHJlcXVlc3QsIHtcbiAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgICAgc3RhY2s6IHN0YWNrLFxuICAgICAgICAgIGVudjogZW52XG4gICAgICAgIH0pLnRvU3RyaW5nKDE2KVxuICAgICAgKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZW1pdEVycm9yQ2h1bmsocmVxdWVzdCwgaWQsIGRpZ2VzdCwgZXJyb3IsIGRlYnVnKSB7XG4gICAgICB2YXIgbmFtZSA9IFwiRXJyb3JcIixcbiAgICAgICAgZW52ID0gKDAsIHJlcXVlc3QuZW52aXJvbm1lbnROYW1lKSgpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICBuYW1lID0gZXJyb3IubmFtZTtcbiAgICAgICAgICB2YXIgbWVzc2FnZSA9IFN0cmluZyhlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICB2YXIgc3RhY2sgPSBmaWx0ZXJTdGFja1RyYWNlKHJlcXVlc3QsIHBhcnNlU3RhY2tUcmFjZShlcnJvciwgMCkpO1xuICAgICAgICAgIHZhciBlcnJvckVudiA9IGVycm9yLmVudmlyb25tZW50TmFtZTtcbiAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgZXJyb3JFbnYgJiYgKGVudiA9IGVycm9yRW52KTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgKG1lc3NhZ2UgPVxuICAgICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGVycm9yICYmIG51bGwgIT09IGVycm9yXG4gICAgICAgICAgICAgID8gZGVzY3JpYmVPYmplY3RGb3JFcnJvck1lc3NhZ2UoZXJyb3IpXG4gICAgICAgICAgICAgIDogU3RyaW5nKGVycm9yKSksXG4gICAgICAgICAgICAoc3RhY2sgPSBbXSk7XG4gICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgIChtZXNzYWdlID1cbiAgICAgICAgICBcIkFuIGVycm9yIG9jY3VycmVkIGJ1dCBzZXJpYWxpemluZyB0aGUgZXJyb3IgbWVzc2FnZSBmYWlsZWQuXCIpLFxuICAgICAgICAgIChzdGFjayA9IFtdKTtcbiAgICAgIH1cbiAgICAgIGRpZ2VzdCA9IHtcbiAgICAgICAgZGlnZXN0OiBkaWdlc3QsXG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgIHN0YWNrOiBzdGFjayxcbiAgICAgICAgZW52OiBlbnZcbiAgICAgIH07XG4gICAgICBpZCA9IGlkLnRvU3RyaW5nKDE2KSArIFwiOkVcIiArIHN0cmluZ2lmeShkaWdlc3QpICsgXCJcXG5cIjtcbiAgICAgIGlkID0gc3RyaW5nVG9DaHVuayhpZCk7XG4gICAgICBkZWJ1Z1xuICAgICAgICA/IHJlcXVlc3QuY29tcGxldGVkRGVidWdDaHVua3MucHVzaChpZClcbiAgICAgICAgOiByZXF1ZXN0LmNvbXBsZXRlZEVycm9yQ2h1bmtzLnB1c2goaWQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBlbWl0SW1wb3J0Q2h1bmsocmVxdWVzdCwgaWQsIGNsaWVudFJlZmVyZW5jZU1ldGFkYXRhLCBkZWJ1Zykge1xuICAgICAgY2xpZW50UmVmZXJlbmNlTWV0YWRhdGEgPSBzdHJpbmdpZnkoY2xpZW50UmVmZXJlbmNlTWV0YWRhdGEpO1xuICAgICAgaWQgPSBpZC50b1N0cmluZygxNikgKyBcIjpJXCIgKyBjbGllbnRSZWZlcmVuY2VNZXRhZGF0YSArIFwiXFxuXCI7XG4gICAgICBpZCA9IHN0cmluZ1RvQ2h1bmsoaWQpO1xuICAgICAgZGVidWdcbiAgICAgICAgPyByZXF1ZXN0LmNvbXBsZXRlZERlYnVnQ2h1bmtzLnB1c2goaWQpXG4gICAgICAgIDogcmVxdWVzdC5jb21wbGV0ZWRJbXBvcnRDaHVua3MucHVzaChpZCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVtaXRTeW1ib2xDaHVuayhyZXF1ZXN0LCBpZCwgbmFtZSkge1xuICAgICAgaWQgPSBlbmNvZGVSZWZlcmVuY2VDaHVuayhyZXF1ZXN0LCBpZCwgXCIkU1wiICsgbmFtZSk7XG4gICAgICByZXF1ZXN0LmNvbXBsZXRlZEltcG9ydENodW5rcy5wdXNoKGlkKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZW1pdE1vZGVsQ2h1bmsocmVxdWVzdCwgaWQsIGpzb24pIHtcbiAgICAgIGlkID0gaWQudG9TdHJpbmcoMTYpICsgXCI6XCIgKyBqc29uICsgXCJcXG5cIjtcbiAgICAgIGlkID0gc3RyaW5nVG9DaHVuayhpZCk7XG4gICAgICByZXF1ZXN0LmNvbXBsZXRlZFJlZ3VsYXJDaHVua3MucHVzaChpZCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVtaXREZWJ1Z0hhbHRDaHVuayhyZXF1ZXN0LCBpZCkge1xuICAgICAgaWQgPSBpZC50b1N0cmluZygxNikgKyBcIjpcXG5cIjtcbiAgICAgIGlkID0gc3RyaW5nVG9DaHVuayhpZCk7XG4gICAgICByZXF1ZXN0LmNvbXBsZXRlZERlYnVnQ2h1bmtzLnB1c2goaWQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBlbWl0RGVidWdDaHVuayhyZXF1ZXN0LCBpZCwgZGVidWdJbmZvKSB7XG4gICAgICB2YXIganNvbiA9IHNlcmlhbGl6ZURlYnVnTW9kZWwocmVxdWVzdCwgNTAwLCBkZWJ1Z0luZm8pO1xuICAgICAgbnVsbCAhPT0gcmVxdWVzdC5kZWJ1Z0Rlc3RpbmF0aW9uXG4gICAgICAgID8gKChkZWJ1Z0luZm8gPSByZXF1ZXN0Lm5leHRDaHVua0lkKyspLFxuICAgICAgICAgIChqc29uID0gZGVidWdJbmZvLnRvU3RyaW5nKDE2KSArIFwiOlwiICsganNvbiArIFwiXFxuXCIpLFxuICAgICAgICAgIHJlcXVlc3QucGVuZGluZ0RlYnVnQ2h1bmtzKyssXG4gICAgICAgICAgcmVxdWVzdC5jb21wbGV0ZWREZWJ1Z0NodW5rcy5wdXNoKHN0cmluZ1RvQ2h1bmsoanNvbikpLFxuICAgICAgICAgIChpZCA9IGlkLnRvU3RyaW5nKDE2KSArICc6RFwiJCcgKyBkZWJ1Z0luZm8udG9TdHJpbmcoMTYpICsgJ1wiXFxuJyksXG4gICAgICAgICAgcmVxdWVzdC5jb21wbGV0ZWRSZWd1bGFyQ2h1bmtzLnB1c2goc3RyaW5nVG9DaHVuayhpZCkpKVxuICAgICAgICA6ICgoaWQgPSBpZC50b1N0cmluZygxNikgKyBcIjpEXCIgKyBqc29uICsgXCJcXG5cIiksXG4gICAgICAgICAgcmVxdWVzdC5jb21wbGV0ZWRSZWd1bGFyQ2h1bmtzLnB1c2goc3RyaW5nVG9DaHVuayhpZCkpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb3V0bGluZUNvbXBvbmVudEluZm8ocmVxdWVzdCwgY29tcG9uZW50SW5mbykge1xuICAgICAgaWYgKCFyZXF1ZXN0LndyaXR0ZW5EZWJ1Z09iamVjdHMuaGFzKGNvbXBvbmVudEluZm8pKSB7XG4gICAgICAgIG51bGwgIT0gY29tcG9uZW50SW5mby5vd25lciAmJlxuICAgICAgICAgIG91dGxpbmVDb21wb25lbnRJbmZvKHJlcXVlc3QsIGNvbXBvbmVudEluZm8ub3duZXIpO1xuICAgICAgICB2YXIgb2JqZWN0TGltaXQgPSAxMDtcbiAgICAgICAgbnVsbCAhPSBjb21wb25lbnRJbmZvLnN0YWNrICYmXG4gICAgICAgICAgKG9iamVjdExpbWl0ICs9IGNvbXBvbmVudEluZm8uc3RhY2subGVuZ3RoKTtcbiAgICAgICAgb2JqZWN0TGltaXQgPSB7IG9iamVjdExpbWl0OiBvYmplY3RMaW1pdCB9O1xuICAgICAgICB2YXIgY29tcG9uZW50RGVidWdJbmZvID0ge1xuICAgICAgICAgIG5hbWU6IGNvbXBvbmVudEluZm8ubmFtZSxcbiAgICAgICAgICBrZXk6IGNvbXBvbmVudEluZm8ua2V5XG4gICAgICAgIH07XG4gICAgICAgIG51bGwgIT0gY29tcG9uZW50SW5mby5lbnYgJiZcbiAgICAgICAgICAoY29tcG9uZW50RGVidWdJbmZvLmVudiA9IGNvbXBvbmVudEluZm8uZW52KTtcbiAgICAgICAgbnVsbCAhPSBjb21wb25lbnRJbmZvLm93bmVyICYmXG4gICAgICAgICAgKGNvbXBvbmVudERlYnVnSW5mby5vd25lciA9IGNvbXBvbmVudEluZm8ub3duZXIpO1xuICAgICAgICBudWxsID09IGNvbXBvbmVudEluZm8uc3RhY2sgJiYgbnVsbCAhPSBjb21wb25lbnRJbmZvLmRlYnVnU3RhY2tcbiAgICAgICAgICA/IChjb21wb25lbnREZWJ1Z0luZm8uc3RhY2sgPSBmaWx0ZXJTdGFja1RyYWNlKFxuICAgICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgICAgICBwYXJzZVN0YWNrVHJhY2UoY29tcG9uZW50SW5mby5kZWJ1Z1N0YWNrLCAxKVxuICAgICAgICAgICAgKSlcbiAgICAgICAgICA6IG51bGwgIT0gY29tcG9uZW50SW5mby5zdGFjayAmJlxuICAgICAgICAgICAgKGNvbXBvbmVudERlYnVnSW5mby5zdGFjayA9IGNvbXBvbmVudEluZm8uc3RhY2spO1xuICAgICAgICBjb21wb25lbnREZWJ1Z0luZm8ucHJvcHMgPSBjb21wb25lbnRJbmZvLnByb3BzO1xuICAgICAgICBvYmplY3RMaW1pdCA9IG91dGxpbmVEZWJ1Z01vZGVsKFxuICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgb2JqZWN0TGltaXQsXG4gICAgICAgICAgY29tcG9uZW50RGVidWdJbmZvXG4gICAgICAgICk7XG4gICAgICAgIG9iamVjdExpbWl0ID0gc2VyaWFsaXplQnlWYWx1ZUlEKG9iamVjdExpbWl0KTtcbiAgICAgICAgcmVxdWVzdC53cml0dGVuRGVidWdPYmplY3RzLnNldChjb21wb25lbnRJbmZvLCBvYmplY3RMaW1pdCk7XG4gICAgICAgIHJlcXVlc3Qud3JpdHRlbk9iamVjdHMuc2V0KGNvbXBvbmVudEluZm8sIG9iamVjdExpbWl0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZW1pdFR5cGVkQXJyYXlDaHVuayhyZXF1ZXN0LCBpZCwgdGFnLCB0eXBlZEFycmF5LCBkZWJ1Zykge1xuICAgICAgZGVidWcgPyByZXF1ZXN0LnBlbmRpbmdEZWJ1Z0NodW5rcysrIDogcmVxdWVzdC5wZW5kaW5nQ2h1bmtzKys7XG4gICAgICB2YXIgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoXG4gICAgICAgIHR5cGVkQXJyYXkuYnVmZmVyLFxuICAgICAgICB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsXG4gICAgICAgIHR5cGVkQXJyYXkuYnl0ZUxlbmd0aFxuICAgICAgKTtcbiAgICAgIHR5cGVkQXJyYXkgPSAyMDQ4IDwgdHlwZWRBcnJheS5ieXRlTGVuZ3RoID8gYnVmZmVyLnNsaWNlKCkgOiBidWZmZXI7XG4gICAgICBidWZmZXIgPSB0eXBlZEFycmF5LmJ5dGVMZW5ndGg7XG4gICAgICBpZCA9IGlkLnRvU3RyaW5nKDE2KSArIFwiOlwiICsgdGFnICsgYnVmZmVyLnRvU3RyaW5nKDE2KSArIFwiLFwiO1xuICAgICAgaWQgPSBzdHJpbmdUb0NodW5rKGlkKTtcbiAgICAgIGRlYnVnXG4gICAgICAgID8gcmVxdWVzdC5jb21wbGV0ZWREZWJ1Z0NodW5rcy5wdXNoKGlkLCB0eXBlZEFycmF5KVxuICAgICAgICA6IHJlcXVlc3QuY29tcGxldGVkUmVndWxhckNodW5rcy5wdXNoKGlkLCB0eXBlZEFycmF5KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZW1pdFRleHRDaHVuayhyZXF1ZXN0LCBpZCwgdGV4dCwgZGVidWcpIHtcbiAgICAgIGlmIChudWxsID09PSBieXRlTGVuZ3RoT2ZDaHVuaylcbiAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgXCJFeGlzdGVuY2Ugb2YgYnl0ZUxlbmd0aE9mQ2h1bmsgc2hvdWxkIGhhdmUgYWxyZWFkeSBiZWVuIGNoZWNrZWQuIFRoaXMgaXMgYSBidWcgaW4gUmVhY3QuXCJcbiAgICAgICAgKTtcbiAgICAgIGRlYnVnID8gcmVxdWVzdC5wZW5kaW5nRGVidWdDaHVua3MrKyA6IHJlcXVlc3QucGVuZGluZ0NodW5rcysrO1xuICAgICAgdGV4dCA9IHN0cmluZ1RvQ2h1bmsodGV4dCk7XG4gICAgICB2YXIgYmluYXJ5TGVuZ3RoID0gdGV4dC5ieXRlTGVuZ3RoO1xuICAgICAgaWQgPSBpZC50b1N0cmluZygxNikgKyBcIjpUXCIgKyBiaW5hcnlMZW5ndGgudG9TdHJpbmcoMTYpICsgXCIsXCI7XG4gICAgICBpZCA9IHN0cmluZ1RvQ2h1bmsoaWQpO1xuICAgICAgZGVidWdcbiAgICAgICAgPyByZXF1ZXN0LmNvbXBsZXRlZERlYnVnQ2h1bmtzLnB1c2goaWQsIHRleHQpXG4gICAgICAgIDogcmVxdWVzdC5jb21wbGV0ZWRSZWd1bGFyQ2h1bmtzLnB1c2goaWQsIHRleHQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZW5kZXJEZWJ1Z01vZGVsKFxuICAgICAgcmVxdWVzdCxcbiAgICAgIGNvdW50ZXIsXG4gICAgICBwYXJlbnQsXG4gICAgICBwYXJlbnRQcm9wZXJ0eU5hbWUsXG4gICAgICB2YWx1ZVxuICAgICkge1xuICAgICAgaWYgKG51bGwgPT09IHZhbHVlKSByZXR1cm4gbnVsbDtcbiAgICAgIGlmICh2YWx1ZSA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFKSByZXR1cm4gXCIkXCI7XG4gICAgICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0NsaWVudFJlZmVyZW5jZSh2YWx1ZSkpXG4gICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZURlYnVnQ2xpZW50UmVmZXJlbmNlKFxuICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgIHBhcmVudCxcbiAgICAgICAgICAgIHBhcmVudFByb3BlcnR5TmFtZSxcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgKTtcbiAgICAgICAgaWYgKHZhbHVlLiQkdHlwZW9mID09PSBDT05TVFJVQ1RPUl9NQVJLRVIpIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmNvbnN0cnVjdG9yO1xuICAgICAgICAgIHZhciByZWYgPSByZXF1ZXN0LndyaXR0ZW5EZWJ1Z09iamVjdHMuZ2V0KHZhbHVlKTtcbiAgICAgICAgICB2b2lkIDAgPT09IHJlZiAmJlxuICAgICAgICAgICAgKChyZXF1ZXN0ID0gb3V0bGluZURlYnVnTW9kZWwocmVxdWVzdCwgY291bnRlciwgdmFsdWUpKSxcbiAgICAgICAgICAgIChyZWYgPSBzZXJpYWxpemVCeVZhbHVlSUQocmVxdWVzdCkpKTtcbiAgICAgICAgICByZXR1cm4gXCIkUFwiICsgcmVmLnNsaWNlKDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2b2lkIDAgIT09IHJlcXVlc3QudGVtcG9yYXJ5UmVmZXJlbmNlcykge1xuICAgICAgICAgIHZhciB0ZW1wUmVmID0gcmVxdWVzdC50ZW1wb3JhcnlSZWZlcmVuY2VzLmdldCh2YWx1ZSk7XG4gICAgICAgICAgaWYgKHZvaWQgMCAhPT0gdGVtcFJlZikgcmV0dXJuIFwiJFRcIiArIHRlbXBSZWY7XG4gICAgICAgIH1cbiAgICAgICAgdGVtcFJlZiA9IHJlcXVlc3Qud3JpdHRlbkRlYnVnT2JqZWN0cztcbiAgICAgICAgdmFyIGV4aXN0aW5nRGVidWdSZWZlcmVuY2UgPSB0ZW1wUmVmLmdldCh2YWx1ZSk7XG4gICAgICAgIGlmICh2b2lkIDAgIT09IGV4aXN0aW5nRGVidWdSZWZlcmVuY2UpXG4gICAgICAgICAgaWYgKGRlYnVnTW9kZWxSb290ID09PSB2YWx1ZSkgZGVidWdNb2RlbFJvb3QgPSBudWxsO1xuICAgICAgICAgIGVsc2UgcmV0dXJuIGV4aXN0aW5nRGVidWdSZWZlcmVuY2U7XG4gICAgICAgIGVsc2UgaWYgKC0xID09PSBwYXJlbnRQcm9wZXJ0eU5hbWUuaW5kZXhPZihcIjpcIikpXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgKChleGlzdGluZ0RlYnVnUmVmZXJlbmNlID0gdGVtcFJlZi5nZXQocGFyZW50KSksXG4gICAgICAgICAgICB2b2lkIDAgIT09IGV4aXN0aW5nRGVidWdSZWZlcmVuY2UpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoMCA+PSBjb3VudGVyLm9iamVjdExpbWl0ICYmICFkb05vdExpbWl0Lmhhcyh2YWx1ZSkpXG4gICAgICAgICAgICAgIHJldHVybiBzZXJpYWxpemVEZWZlcnJlZE9iamVjdChyZXF1ZXN0LCB2YWx1ZSk7XG4gICAgICAgICAgICB2YXIgcHJvcGVydHlOYW1lID0gcGFyZW50UHJvcGVydHlOYW1lO1xuICAgICAgICAgICAgaWYgKGlzQXJyYXlJbXBsKHBhcmVudCkgJiYgcGFyZW50WzBdID09PSBSRUFDVF9FTEVNRU5UX1RZUEUpXG4gICAgICAgICAgICAgIHN3aXRjaCAocGFyZW50UHJvcGVydHlOYW1lKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcIjFcIjpcbiAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZSA9IFwidHlwZVwiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIjJcIjpcbiAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZSA9IFwia2V5XCI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiM1wiOlxuICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lID0gXCJwcm9wc1wiO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIjRcIjpcbiAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZSA9IFwiX293bmVyXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRlbXBSZWYuc2V0KHZhbHVlLCBleGlzdGluZ0RlYnVnUmVmZXJlbmNlICsgXCI6XCIgKyBwcm9wZXJ0eU5hbWUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZGVidWdOb091dGxpbmUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUudGhlbilcbiAgICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZURlYnVnVGhlbmFibGUocmVxdWVzdCwgY291bnRlciwgdmFsdWUpO1xuICAgICAgICAgICAgcmVxdWVzdCA9IG91dGxpbmVEZWJ1Z01vZGVsKHJlcXVlc3QsIGNvdW50ZXIsIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBzZXJpYWxpemVCeVZhbHVlSUQocmVxdWVzdCk7XG4gICAgICAgICAgfVxuICAgICAgICBwYXJlbnQgPSByZXF1ZXN0LndyaXR0ZW5PYmplY3RzLmdldCh2YWx1ZSk7XG4gICAgICAgIGlmICh2b2lkIDAgIT09IHBhcmVudCkgcmV0dXJuIHBhcmVudDtcbiAgICAgICAgaWYgKDAgPj0gY291bnRlci5vYmplY3RMaW1pdCAmJiAhZG9Ob3RMaW1pdC5oYXModmFsdWUpKVxuICAgICAgICAgIHJldHVybiBzZXJpYWxpemVEZWZlcnJlZE9iamVjdChyZXF1ZXN0LCB2YWx1ZSk7XG4gICAgICAgIGNvdW50ZXIub2JqZWN0TGltaXQtLTtcbiAgICAgICAgcGFyZW50ID0gcmVxdWVzdC5kZWZlcnJlZERlYnVnT2JqZWN0cztcbiAgICAgICAgaWYgKFxuICAgICAgICAgIG51bGwgIT09IHBhcmVudCAmJlxuICAgICAgICAgICgocGFyZW50UHJvcGVydHlOYW1lID0gcGFyZW50LmV4aXN0aW5nLmdldCh2YWx1ZSkpLFxuICAgICAgICAgIHZvaWQgMCAhPT0gcGFyZW50UHJvcGVydHlOYW1lKVxuICAgICAgICApXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHBhcmVudC5leGlzdGluZy5kZWxldGUodmFsdWUpLFxuICAgICAgICAgICAgcGFyZW50LnJldGFpbmVkLmRlbGV0ZShwYXJlbnRQcm9wZXJ0eU5hbWUpLFxuICAgICAgICAgICAgZW1pdE91dGxpbmVkRGVidWdNb2RlbENodW5rKFxuICAgICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgICAgICBwYXJlbnRQcm9wZXJ0eU5hbWUsXG4gICAgICAgICAgICAgIGNvdW50ZXIsXG4gICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgc2VyaWFsaXplQnlWYWx1ZUlEKHBhcmVudFByb3BlcnR5TmFtZSlcbiAgICAgICAgICApO1xuICAgICAgICBzd2l0Y2ggKHZhbHVlLiQkdHlwZW9mKSB7XG4gICAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAgICBudWxsICE9IHZhbHVlLl9vd25lciAmJiBvdXRsaW5lQ29tcG9uZW50SW5mbyhyZXF1ZXN0LCB2YWx1ZS5fb3duZXIpO1xuICAgICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHZhbHVlLnR5cGUgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gdmFsdWUudHlwZSAmJlxuICAgICAgICAgICAgICBkb05vdExpbWl0LmFkZCh2YWx1ZS50eXBlKTtcbiAgICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiB2YWx1ZS5rZXkgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gdmFsdWUua2V5ICYmXG4gICAgICAgICAgICAgIGRvTm90TGltaXQuYWRkKHZhbHVlLmtleSk7XG4gICAgICAgICAgICBkb05vdExpbWl0LmFkZCh2YWx1ZS5wcm9wcyk7XG4gICAgICAgICAgICBudWxsICE9PSB2YWx1ZS5fb3duZXIgJiYgZG9Ob3RMaW1pdC5hZGQodmFsdWUuX293bmVyKTtcbiAgICAgICAgICAgIGNvdW50ZXIgPSBudWxsO1xuICAgICAgICAgICAgaWYgKG51bGwgIT0gdmFsdWUuX2RlYnVnU3RhY2spXG4gICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgY291bnRlciA9IGZpbHRlclN0YWNrVHJhY2UoXG4gICAgICAgICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgICAgICAgICAgcGFyc2VTdGFja1RyYWNlKHZhbHVlLl9kZWJ1Z1N0YWNrLCAxKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBkb05vdExpbWl0LmFkZChjb3VudGVyKSxcbiAgICAgICAgICAgICAgICAgIHJlcXVlc3QgPSAwO1xuICAgICAgICAgICAgICAgIHJlcXVlc3QgPCBjb3VudGVyLmxlbmd0aDtcbiAgICAgICAgICAgICAgICByZXF1ZXN0KytcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGRvTm90TGltaXQuYWRkKGNvdW50ZXJbcmVxdWVzdF0pO1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgUkVBQ1RfRUxFTUVOVF9UWVBFLFxuICAgICAgICAgICAgICB2YWx1ZS50eXBlLFxuICAgICAgICAgICAgICB2YWx1ZS5rZXksXG4gICAgICAgICAgICAgIHZhbHVlLnByb3BzLFxuICAgICAgICAgICAgICB2YWx1ZS5fb3duZXIsXG4gICAgICAgICAgICAgIGNvdW50ZXIsXG4gICAgICAgICAgICAgIHZhbHVlLl9zdG9yZS52YWxpZGF0ZWRcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHZhbHVlLnRoZW4pXG4gICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZURlYnVnVGhlbmFibGUocmVxdWVzdCwgY291bnRlciwgdmFsdWUpO1xuICAgICAgICBpZiAoaXNBcnJheUltcGwodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgIHZhbHVlID0gQXJyYXkuZnJvbSh2YWx1ZSk7XG4gICAgICAgICAgY291bnRlci5vYmplY3RMaW1pdCsrO1xuICAgICAgICAgIGZvciAocmVmID0gMDsgcmVmIDwgdmFsdWUubGVuZ3RoOyByZWYrKykge1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gdmFsdWVbcmVmXTtcbiAgICAgICAgICAgIGRvTm90TGltaXQuYWRkKGVudHJ5KTtcbiAgICAgICAgICAgIHZhciBrZXkgPSBlbnRyeVswXTtcbiAgICAgICAgICAgIGVudHJ5ID0gZW50cnlbMV07XG4gICAgICAgICAgICBcIm9iamVjdFwiID09PSB0eXBlb2Yga2V5ICYmIG51bGwgIT09IGtleSAmJiBkb05vdExpbWl0LmFkZChrZXkpO1xuICAgICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGVudHJ5ICYmXG4gICAgICAgICAgICAgIG51bGwgIT09IGVudHJ5ICYmXG4gICAgICAgICAgICAgIGRvTm90TGltaXQuYWRkKGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFwiJFFcIiArIG91dGxpbmVEZWJ1Z01vZGVsKHJlcXVlc3QsIGNvdW50ZXIsIHZhbHVlKS50b1N0cmluZygxNik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICAgICAgdmFsdWUgPSBBcnJheS5mcm9tKHZhbHVlKTtcbiAgICAgICAgICBjb3VudGVyLm9iamVjdExpbWl0Kys7XG4gICAgICAgICAgZm9yIChyZWYgPSAwOyByZWYgPCB2YWx1ZS5sZW5ndGg7IHJlZisrKVxuICAgICAgICAgICAgKGtleSA9IHZhbHVlW3JlZl0pLFxuICAgICAgICAgICAgICBcIm9iamVjdFwiID09PSB0eXBlb2Yga2V5ICYmIG51bGwgIT09IGtleSAmJiBkb05vdExpbWl0LmFkZChrZXkpO1xuICAgICAgICAgIHJldHVybiBcIiRXXCIgKyBvdXRsaW5lRGVidWdNb2RlbChyZXF1ZXN0LCBjb3VudGVyLCB2YWx1ZSkudG9TdHJpbmcoMTYpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBGb3JtRGF0YSAmJiB2YWx1ZSBpbnN0YW5jZW9mIEZvcm1EYXRhKVxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAodmFsdWUgPSBBcnJheS5mcm9tKHZhbHVlLmVudHJpZXMoKSkpLFxuICAgICAgICAgICAgXCIkS1wiICtcbiAgICAgICAgICAgICAgb3V0bGluZURlYnVnTW9kZWwoXG4gICAgICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgICAgICB7IG9iamVjdExpbWl0OiAyICogdmFsdWUubGVuZ3RoICsgMSB9LFxuICAgICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICAgICkudG9TdHJpbmcoMTYpXG4gICAgICAgICAgKTtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICBjb3VudGVyID0gXCJFcnJvclwiO1xuICAgICAgICAgIHZhciBlbnYgPSAoMCwgcmVxdWVzdC5lbnZpcm9ubWVudE5hbWUpKCk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIChjb3VudGVyID0gdmFsdWUubmFtZSksXG4gICAgICAgICAgICAgIChyZWYgPSBTdHJpbmcodmFsdWUubWVzc2FnZSkpLFxuICAgICAgICAgICAgICAoa2V5ID0gZmlsdGVyU3RhY2tUcmFjZShyZXF1ZXN0LCBwYXJzZVN0YWNrVHJhY2UodmFsdWUsIDApKSksXG4gICAgICAgICAgICAgIChlbnRyeSA9IHZhbHVlLmVudmlyb25tZW50TmFtZSksXG4gICAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBlbnRyeSAmJiAoZW52ID0gZW50cnkpO1xuICAgICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICAgIChyZWYgPVxuICAgICAgICAgICAgICBcIkFuIGVycm9yIG9jY3VycmVkIGJ1dCBzZXJpYWxpemluZyB0aGUgZXJyb3IgbWVzc2FnZSBmYWlsZWQuXCIpLFxuICAgICAgICAgICAgICAoa2V5ID0gW10pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXF1ZXN0ID1cbiAgICAgICAgICAgIFwiJFpcIiArXG4gICAgICAgICAgICBvdXRsaW5lRGVidWdNb2RlbChcbiAgICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgICAgeyBvYmplY3RMaW1pdDogMiAqIGtleS5sZW5ndGggKyAxIH0sXG4gICAgICAgICAgICAgIHsgbmFtZTogY291bnRlciwgbWVzc2FnZTogcmVmLCBzdGFjazoga2V5LCBlbnY6IGVudiB9XG4gICAgICAgICAgICApLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcilcbiAgICAgICAgICByZXR1cm4gc2VyaWFsaXplRGVidWdUeXBlZEFycmF5KHJlcXVlc3QsIFwiQVwiLCBuZXcgVWludDhBcnJheSh2YWx1ZSkpO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJbnQ4QXJyYXkpXG4gICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZURlYnVnVHlwZWRBcnJheShyZXF1ZXN0LCBcIk9cIiwgdmFsdWUpO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5KVxuICAgICAgICAgIHJldHVybiBzZXJpYWxpemVEZWJ1Z1R5cGVkQXJyYXkocmVxdWVzdCwgXCJvXCIsIHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVWludDhDbGFtcGVkQXJyYXkpXG4gICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZURlYnVnVHlwZWRBcnJheShyZXF1ZXN0LCBcIlVcIiwgdmFsdWUpO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJbnQxNkFycmF5KVxuICAgICAgICAgIHJldHVybiBzZXJpYWxpemVEZWJ1Z1R5cGVkQXJyYXkocmVxdWVzdCwgXCJTXCIsIHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVWludDE2QXJyYXkpXG4gICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZURlYnVnVHlwZWRBcnJheShyZXF1ZXN0LCBcInNcIiwgdmFsdWUpO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJbnQzMkFycmF5KVxuICAgICAgICAgIHJldHVybiBzZXJpYWxpemVEZWJ1Z1R5cGVkQXJyYXkocmVxdWVzdCwgXCJMXCIsIHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVWludDMyQXJyYXkpXG4gICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZURlYnVnVHlwZWRBcnJheShyZXF1ZXN0LCBcImxcIiwgdmFsdWUpO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkpXG4gICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZURlYnVnVHlwZWRBcnJheShyZXF1ZXN0LCBcIkdcIiwgdmFsdWUpO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXkpXG4gICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZURlYnVnVHlwZWRBcnJheShyZXF1ZXN0LCBcImdcIiwgdmFsdWUpO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBCaWdJbnQ2NEFycmF5KVxuICAgICAgICAgIHJldHVybiBzZXJpYWxpemVEZWJ1Z1R5cGVkQXJyYXkocmVxdWVzdCwgXCJNXCIsIHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQmlnVWludDY0QXJyYXkpXG4gICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZURlYnVnVHlwZWRBcnJheShyZXF1ZXN0LCBcIm1cIiwgdmFsdWUpO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRhVmlldylcbiAgICAgICAgICByZXR1cm4gc2VyaWFsaXplRGVidWdUeXBlZEFycmF5KHJlcXVlc3QsIFwiVlwiLCB2YWx1ZSk7XG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBCbG9iICYmIHZhbHVlIGluc3RhbmNlb2YgQmxvYilcbiAgICAgICAgICByZXR1cm4gc2VyaWFsaXplRGVidWdCbG9iKHJlcXVlc3QsIHZhbHVlKTtcbiAgICAgICAgaWYgKGdldEl0ZXJhdG9yRm4odmFsdWUpKSByZXR1cm4gQXJyYXkuZnJvbSh2YWx1ZSk7XG4gICAgICAgIHJlcXVlc3QgPSBnZXRQcm90b3R5cGVPZih2YWx1ZSk7XG4gICAgICAgIGlmIChyZXF1ZXN0ICE9PSBPYmplY3RQcm90b3R5cGUgJiYgbnVsbCAhPT0gcmVxdWVzdCkge1xuICAgICAgICAgIGNvdW50ZXIgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGZvciAoZW52IGluIHZhbHVlKVxuICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGVudikgfHwgaXNHZXR0ZXIocmVxdWVzdCwgZW52KSlcbiAgICAgICAgICAgICAgY291bnRlcltlbnZdID0gdmFsdWVbZW52XTtcbiAgICAgICAgICByZWYgPSByZXF1ZXN0LmNvbnN0cnVjdG9yO1xuICAgICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHJlZiB8fFxuICAgICAgICAgICAgcmVmLnByb3RvdHlwZSAhPT0gcmVxdWVzdCB8fFxuICAgICAgICAgICAgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgXCJcIikgfHxcbiAgICAgICAgICAgIGlzR2V0dGVyKHJlcXVlc3QsIFwiXCIpIHx8XG4gICAgICAgICAgICAoY291bnRlcltcIlwiXSA9IHsgJCR0eXBlb2Y6IENPTlNUUlVDVE9SX01BUktFUiwgY29uc3RydWN0b3I6IHJlZiB9KTtcbiAgICAgICAgICByZXR1cm4gY291bnRlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHZhbHVlKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBcIlpcIiA9PT0gdmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gJiZcbiAgICAgICAgICBwYXJlbnRbcGFyZW50UHJvcGVydHlOYW1lXSBpbnN0YW5jZW9mIERhdGVcbiAgICAgICAgKVxuICAgICAgICAgIHJldHVybiBcIiREXCIgKyB2YWx1ZTtcbiAgICAgICAgaWYgKDEwMjQgPD0gdmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKDAgPj0gY291bnRlci5vYmplY3RMaW1pdClcbiAgICAgICAgICAgIHJldHVybiBzZXJpYWxpemVEZWZlcnJlZE9iamVjdChyZXF1ZXN0LCB2YWx1ZSk7XG4gICAgICAgICAgY291bnRlci5vYmplY3RMaW1pdC0tO1xuICAgICAgICAgIHJlcXVlc3QucGVuZGluZ0RlYnVnQ2h1bmtzKys7XG4gICAgICAgICAgY291bnRlciA9IHJlcXVlc3QubmV4dENodW5rSWQrKztcbiAgICAgICAgICBlbWl0VGV4dENodW5rKHJlcXVlc3QsIGNvdW50ZXIsIHZhbHVlLCAhMCk7XG4gICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZUJ5VmFsdWVJRChjb3VudGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCIkXCIgPT09IHZhbHVlWzBdID8gXCIkXCIgKyB2YWx1ZSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKFwiYm9vbGVhblwiID09PSB0eXBlb2YgdmFsdWUpIHJldHVybiB2YWx1ZTtcbiAgICAgIGlmIChcIm51bWJlclwiID09PSB0eXBlb2YgdmFsdWUpIHJldHVybiBzZXJpYWxpemVOdW1iZXIodmFsdWUpO1xuICAgICAgaWYgKFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiB2YWx1ZSkgcmV0dXJuIFwiJHVuZGVmaW5lZFwiO1xuICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0NsaWVudFJlZmVyZW5jZSh2YWx1ZSkpXG4gICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZURlYnVnQ2xpZW50UmVmZXJlbmNlKFxuICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgIHBhcmVudCxcbiAgICAgICAgICAgIHBhcmVudFByb3BlcnR5TmFtZSxcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHZvaWQgMCAhPT0gcmVxdWVzdC50ZW1wb3JhcnlSZWZlcmVuY2VzICYmXG4gICAgICAgICAgKChjb3VudGVyID0gcmVxdWVzdC50ZW1wb3JhcnlSZWZlcmVuY2VzLmdldCh2YWx1ZSkpLFxuICAgICAgICAgIHZvaWQgMCAhPT0gY291bnRlcilcbiAgICAgICAgKVxuICAgICAgICAgIHJldHVybiBcIiRUXCIgKyBjb3VudGVyO1xuICAgICAgICBjb3VudGVyID0gcmVxdWVzdC53cml0dGVuRGVidWdPYmplY3RzO1xuICAgICAgICByZWYgPSBjb3VudGVyLmdldCh2YWx1ZSk7XG4gICAgICAgIGlmICh2b2lkIDAgIT09IHJlZikgcmV0dXJuIHJlZjtcbiAgICAgICAgcmVmID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgICBrZXkgPSB2YWx1ZS5uYW1lO1xuICAgICAgICBrZXkgPVxuICAgICAgICAgIFwiJEVcIiArXG4gICAgICAgICAgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBrZXlcbiAgICAgICAgICAgID8gXCJPYmplY3QuZGVmaW5lUHJvcGVydHkoXCIgK1xuICAgICAgICAgICAgICByZWYgK1xuICAgICAgICAgICAgICAnLFwibmFtZVwiLHt2YWx1ZTonICtcbiAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoa2V5KSArXG4gICAgICAgICAgICAgIFwifSlcIlxuICAgICAgICAgICAgOiBcIihcIiArIHJlZiArIFwiKVwiKTtcbiAgICAgICAgcmVxdWVzdC5wZW5kaW5nRGVidWdDaHVua3MrKztcbiAgICAgICAgcmVmID0gcmVxdWVzdC5uZXh0Q2h1bmtJZCsrO1xuICAgICAgICBrZXkgPSBlbmNvZGVSZWZlcmVuY2VDaHVuayhyZXF1ZXN0LCByZWYsIGtleSk7XG4gICAgICAgIHJlcXVlc3QuY29tcGxldGVkRGVidWdDaHVua3MucHVzaChrZXkpO1xuICAgICAgICByZXF1ZXN0ID0gc2VyaWFsaXplQnlWYWx1ZUlEKHJlZik7XG4gICAgICAgIGNvdW50ZXIuc2V0KHZhbHVlLCByZXF1ZXN0KTtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgICB9XG4gICAgICBpZiAoXCJzeW1ib2xcIiA9PT0gdHlwZW9mIHZhbHVlKSB7XG4gICAgICAgIGNvdW50ZXIgPSByZXF1ZXN0LndyaXR0ZW5TeW1ib2xzLmdldCh2YWx1ZSk7XG4gICAgICAgIGlmICh2b2lkIDAgIT09IGNvdW50ZXIpIHJldHVybiBzZXJpYWxpemVCeVZhbHVlSUQoY291bnRlcik7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuZGVzY3JpcHRpb247XG4gICAgICAgIHJlcXVlc3QucGVuZGluZ0NodW5rcysrO1xuICAgICAgICBjb3VudGVyID0gcmVxdWVzdC5uZXh0Q2h1bmtJZCsrO1xuICAgICAgICBlbWl0U3ltYm9sQ2h1bmsocmVxdWVzdCwgY291bnRlciwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gc2VyaWFsaXplQnlWYWx1ZUlEKGNvdW50ZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFwiYmlnaW50XCIgPT09IHR5cGVvZiB2YWx1ZVxuICAgICAgICA/IFwiJG5cIiArIHZhbHVlLnRvU3RyaW5nKDEwKVxuICAgICAgICA6IHZhbHVlIGluc3RhbmNlb2YgRGF0ZVxuICAgICAgICAgID8gXCIkRFwiICsgdmFsdWUudG9KU09OKClcbiAgICAgICAgICA6IFwidW5rbm93biB0eXBlIFwiICsgdHlwZW9mIHZhbHVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXJpYWxpemVEZWJ1Z01vZGVsKHJlcXVlc3QsIG9iamVjdExpbWl0LCBtb2RlbCkge1xuICAgICAgZnVuY3Rpb24gcmVwbGFjZXIocGFyZW50UHJvcGVydHlOYW1lLCB2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiByZW5kZXJEZWJ1Z01vZGVsKFxuICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgIGNvdW50ZXIsXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgcGFyZW50UHJvcGVydHlOYW1lLFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIFwiVW5rbm93biBWYWx1ZTogUmVhY3QgY291bGQgbm90IHNlbmQgaXQgZnJvbSB0aGUgc2VydmVyLlxcblwiICtcbiAgICAgICAgICAgIHgubWVzc2FnZVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBjb3VudGVyID0geyBvYmplY3RMaW1pdDogb2JqZWN0TGltaXQgfTtcbiAgICAgIG9iamVjdExpbWl0ID0gZGVidWdOb091dGxpbmU7XG4gICAgICBkZWJ1Z05vT3V0bGluZSA9IG1vZGVsO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeShtb2RlbCwgcmVwbGFjZXIpO1xuICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICByZXR1cm4gc3RyaW5naWZ5KFxuICAgICAgICAgIFwiVW5rbm93biBWYWx1ZTogUmVhY3QgY291bGQgbm90IHNlbmQgaXQgZnJvbSB0aGUgc2VydmVyLlxcblwiICtcbiAgICAgICAgICAgIHgubWVzc2FnZVxuICAgICAgICApO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZGVidWdOb091dGxpbmUgPSBvYmplY3RMaW1pdDtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZW1pdE91dGxpbmVkRGVidWdNb2RlbENodW5rKHJlcXVlc3QsIGlkLCBjb3VudGVyLCBtb2RlbCkge1xuICAgICAgZnVuY3Rpb24gcmVwbGFjZXIocGFyZW50UHJvcGVydHlOYW1lLCB2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiByZW5kZXJEZWJ1Z01vZGVsKFxuICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgIGNvdW50ZXIsXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgcGFyZW50UHJvcGVydHlOYW1lLFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIFwiVW5rbm93biBWYWx1ZTogUmVhY3QgY291bGQgbm90IHNlbmQgaXQgZnJvbSB0aGUgc2VydmVyLlxcblwiICtcbiAgICAgICAgICAgIHgubWVzc2FnZVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBtb2RlbCAmJiBudWxsICE9PSBtb2RlbCAmJiBkb05vdExpbWl0LmFkZChtb2RlbCk7XG4gICAgICB2YXIgcHJldk1vZGVsUm9vdCA9IGRlYnVnTW9kZWxSb290O1xuICAgICAgZGVidWdNb2RlbFJvb3QgPSBtb2RlbDtcbiAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBtb2RlbCAmJlxuICAgICAgICBudWxsICE9PSBtb2RlbCAmJlxuICAgICAgICByZXF1ZXN0LndyaXR0ZW5EZWJ1Z09iamVjdHMuc2V0KG1vZGVsLCBzZXJpYWxpemVCeVZhbHVlSUQoaWQpKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBqc29uID0gc3RyaW5naWZ5KG1vZGVsLCByZXBsYWNlcik7XG4gICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgIGpzb24gPSBzdHJpbmdpZnkoXG4gICAgICAgICAgXCJVbmtub3duIFZhbHVlOiBSZWFjdCBjb3VsZCBub3Qgc2VuZCBpdCBmcm9tIHRoZSBzZXJ2ZXIuXFxuXCIgK1xuICAgICAgICAgICAgeC5tZXNzYWdlXG4gICAgICAgICk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBkZWJ1Z01vZGVsUm9vdCA9IHByZXZNb2RlbFJvb3Q7XG4gICAgICB9XG4gICAgICBpZCA9IGlkLnRvU3RyaW5nKDE2KSArIFwiOlwiICsganNvbiArIFwiXFxuXCI7XG4gICAgICBpZCA9IHN0cmluZ1RvQ2h1bmsoaWQpO1xuICAgICAgcmVxdWVzdC5jb21wbGV0ZWREZWJ1Z0NodW5rcy5wdXNoKGlkKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb3V0bGluZURlYnVnTW9kZWwocmVxdWVzdCwgY291bnRlciwgbW9kZWwpIHtcbiAgICAgIHZhciBpZCA9IHJlcXVlc3QubmV4dENodW5rSWQrKztcbiAgICAgIHJlcXVlc3QucGVuZGluZ0RlYnVnQ2h1bmtzKys7XG4gICAgICBlbWl0T3V0bGluZWREZWJ1Z01vZGVsQ2h1bmsocmVxdWVzdCwgaWQsIGNvdW50ZXIsIG1vZGVsKTtcbiAgICAgIHJldHVybiBpZDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZW1pdFRpbWVPcmlnaW5DaHVuayhyZXF1ZXN0LCB0aW1lT3JpZ2luKSB7XG4gICAgICByZXF1ZXN0LnBlbmRpbmdEZWJ1Z0NodW5rcysrO1xuICAgICAgdGltZU9yaWdpbiA9IHN0cmluZ1RvQ2h1bmsoXCI6TlwiICsgdGltZU9yaWdpbiArIFwiXFxuXCIpO1xuICAgICAgcmVxdWVzdC5jb21wbGV0ZWREZWJ1Z0NodW5rcy5wdXNoKHRpbWVPcmlnaW4pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3J3YXJkRGVidWdJbmZvKHJlcXVlc3QkanNjb21wJDEsIHRhc2ssIGRlYnVnSW5mbykge1xuICAgICAgZm9yICh2YXIgaWQgPSB0YXNrLmlkLCBpID0gMDsgaSA8IGRlYnVnSW5mby5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgaW5mbyA9IGRlYnVnSW5mb1tpXTtcbiAgICAgICAgaWYgKFwibnVtYmVyXCIgPT09IHR5cGVvZiBpbmZvLnRpbWUpXG4gICAgICAgICAgbWFya09wZXJhdGlvbkVuZFRpbWUocmVxdWVzdCRqc2NvbXAkMSwgdGFzaywgaW5mby50aW1lKTtcbiAgICAgICAgZWxzZSBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGluZm8ubmFtZSlcbiAgICAgICAgICBvdXRsaW5lQ29tcG9uZW50SW5mbyhyZXF1ZXN0JGpzY29tcCQxLCBpbmZvKSxcbiAgICAgICAgICAgIHJlcXVlc3QkanNjb21wJDEucGVuZGluZ0NodW5rcysrLFxuICAgICAgICAgICAgZW1pdERlYnVnQ2h1bmsocmVxdWVzdCRqc2NvbXAkMSwgaWQsIGluZm8pO1xuICAgICAgICBlbHNlIGlmIChpbmZvLmF3YWl0ZWQpIHtcbiAgICAgICAgICB2YXIgaW9JbmZvID0gaW5mby5hd2FpdGVkO1xuICAgICAgICAgIGlmICghKGlvSW5mby5lbmQgPD0gcmVxdWVzdCRqc2NvbXAkMS50aW1lT3JpZ2luKSkge1xuICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSByZXF1ZXN0JGpzY29tcCQxLFxuICAgICAgICAgICAgICBpb0luZm8kanNjb21wJDAgPSBpb0luZm87XG4gICAgICAgICAgICBpZiAoIXJlcXVlc3Qud3JpdHRlbk9iamVjdHMuaGFzKGlvSW5mbyRqc2NvbXAkMCkpIHtcbiAgICAgICAgICAgICAgcmVxdWVzdC5wZW5kaW5nRGVidWdDaHVua3MrKztcbiAgICAgICAgICAgICAgdmFyIGlkJGpzY29tcCQwID0gcmVxdWVzdC5uZXh0Q2h1bmtJZCsrLFxuICAgICAgICAgICAgICAgIG93bmVyID0gaW9JbmZvJGpzY29tcCQwLm93bmVyO1xuICAgICAgICAgICAgICBudWxsICE9IG93bmVyICYmIG91dGxpbmVDb21wb25lbnRJbmZvKHJlcXVlc3QsIG93bmVyKTtcbiAgICAgICAgICAgICAgdmFyIGRlYnVnU3RhY2sgPVxuICAgICAgICAgICAgICAgIG51bGwgPT0gaW9JbmZvJGpzY29tcCQwLnN0YWNrICYmXG4gICAgICAgICAgICAgICAgbnVsbCAhPSBpb0luZm8kanNjb21wJDAuZGVidWdTdGFja1xuICAgICAgICAgICAgICAgICAgPyBmaWx0ZXJTdGFja1RyYWNlKFxuICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgICAgICAgICAgICAgcGFyc2VTdGFja1RyYWNlKGlvSW5mbyRqc2NvbXAkMC5kZWJ1Z1N0YWNrLCAxKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICA6IGlvSW5mbyRqc2NvbXAkMC5zdGFjaztcbiAgICAgICAgICAgICAgdmFyIHJlcXVlc3QkanNjb21wJDAgPSByZXF1ZXN0LFxuICAgICAgICAgICAgICAgIGlkJGpzY29tcCQxID0gaWQkanNjb21wJDAsXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBpb0luZm8kanNjb21wJDAudmFsdWUsXG4gICAgICAgICAgICAgICAgZW52ID0gaW9JbmZvJGpzY29tcCQwLmVudixcbiAgICAgICAgICAgICAgICBvYmplY3RMaW1pdCA9IDEwO1xuICAgICAgICAgICAgICBkZWJ1Z1N0YWNrICYmIChvYmplY3RMaW1pdCArPSBkZWJ1Z1N0YWNrLmxlbmd0aCk7XG4gICAgICAgICAgICAgIHZhciBkZWJ1Z0lPSW5mbyA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBpb0luZm8kanNjb21wJDAubmFtZSxcbiAgICAgICAgICAgICAgICBzdGFydDogaW9JbmZvJGpzY29tcCQwLnN0YXJ0IC0gcmVxdWVzdCRqc2NvbXAkMC50aW1lT3JpZ2luLFxuICAgICAgICAgICAgICAgIGVuZDogaW9JbmZvJGpzY29tcCQwLmVuZCAtIHJlcXVlc3QkanNjb21wJDAudGltZU9yaWdpblxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBudWxsICE9IGVudiAmJiAoZGVidWdJT0luZm8uZW52ID0gZW52KTtcbiAgICAgICAgICAgICAgbnVsbCAhPSBkZWJ1Z1N0YWNrICYmIChkZWJ1Z0lPSW5mby5zdGFjayA9IGRlYnVnU3RhY2spO1xuICAgICAgICAgICAgICBudWxsICE9IG93bmVyICYmIChkZWJ1Z0lPSW5mby5vd25lciA9IG93bmVyKTtcbiAgICAgICAgICAgICAgdm9pZCAwICE9PSB2YWx1ZSAmJiAoZGVidWdJT0luZm8udmFsdWUgPSB2YWx1ZSk7XG4gICAgICAgICAgICAgIHZhbHVlID0gc2VyaWFsaXplRGVidWdNb2RlbChcbiAgICAgICAgICAgICAgICByZXF1ZXN0JGpzY29tcCQwLFxuICAgICAgICAgICAgICAgIG9iamVjdExpbWl0LFxuICAgICAgICAgICAgICAgIGRlYnVnSU9JbmZvXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGlkJGpzY29tcCQxID0gaWQkanNjb21wJDEudG9TdHJpbmcoMTYpICsgXCI6SlwiICsgdmFsdWUgKyBcIlxcblwiO1xuICAgICAgICAgICAgICBpZCRqc2NvbXAkMSA9IHN0cmluZ1RvQ2h1bmsoaWQkanNjb21wJDEpO1xuICAgICAgICAgICAgICByZXF1ZXN0JGpzY29tcCQwLmNvbXBsZXRlZERlYnVnQ2h1bmtzLnB1c2goaWQkanNjb21wJDEpO1xuICAgICAgICAgICAgICByZXF1ZXN0LndyaXR0ZW5EZWJ1Z09iamVjdHMuc2V0KFxuICAgICAgICAgICAgICAgIGlvSW5mbyRqc2NvbXAkMCxcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVCeVZhbHVlSUQoaWQkanNjb21wJDApXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXF1ZXN0ID1cbiAgICAgICAgICAgICAgbnVsbCA9PSBpbmZvLnN0YWNrICYmIG51bGwgIT0gaW5mby5kZWJ1Z1N0YWNrXG4gICAgICAgICAgICAgICAgPyBmaWx0ZXJTdGFja1RyYWNlKFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0JGpzY29tcCQxLFxuICAgICAgICAgICAgICAgICAgICBwYXJzZVN0YWNrVHJhY2UoaW5mby5kZWJ1Z1N0YWNrLCAxKVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIDogaW5mby5zdGFjaztcbiAgICAgICAgICAgIGlvSW5mbyA9IHsgYXdhaXRlZDogaW9JbmZvIH07XG4gICAgICAgICAgICBudWxsICE9IGluZm8uZW52ICYmIChpb0luZm8uZW52ID0gaW5mby5lbnYpO1xuICAgICAgICAgICAgbnVsbCAhPSBpbmZvLm93bmVyICYmIChpb0luZm8ub3duZXIgPSBpbmZvLm93bmVyKTtcbiAgICAgICAgICAgIG51bGwgIT0gcmVxdWVzdCAmJiAoaW9JbmZvLnN0YWNrID0gcmVxdWVzdCk7XG4gICAgICAgICAgICByZXF1ZXN0JGpzY29tcCQxLnBlbmRpbmdDaHVua3MrKztcbiAgICAgICAgICAgIGVtaXREZWJ1Z0NodW5rKHJlcXVlc3QkanNjb21wJDEsIGlkLCBpb0luZm8pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgcmVxdWVzdCRqc2NvbXAkMS5wZW5kaW5nQ2h1bmtzKyssXG4gICAgICAgICAgICBlbWl0RGVidWdDaHVuayhyZXF1ZXN0JGpzY29tcCQxLCBpZCwgaW5mbyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZvcndhcmREZWJ1Z0luZm9Gcm9tVGhlbmFibGUocmVxdWVzdCwgdGFzaywgdGhlbmFibGUpIHtcbiAgICAgICh0aGVuYWJsZSA9IHRoZW5hYmxlLl9kZWJ1Z0luZm8pICYmXG4gICAgICAgIGZvcndhcmREZWJ1Z0luZm8ocmVxdWVzdCwgdGFzaywgdGhlbmFibGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3J3YXJkRGVidWdJbmZvRnJvbUN1cnJlbnRDb250ZXh0KHJlcXVlc3QsIHRhc2ssIHRoZW5hYmxlKSB7XG4gICAgICAodGhlbmFibGUgPSB0aGVuYWJsZS5fZGVidWdJbmZvKSAmJlxuICAgICAgICBmb3J3YXJkRGVidWdJbmZvKHJlcXVlc3QsIHRhc2ssIHRoZW5hYmxlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbWFya09wZXJhdGlvbkVuZFRpbWUocmVxdWVzdCwgdGFzaywgdGltZXN0YW1wKSB7XG4gICAgICAhKHJlcXVlc3Quc3RhdHVzID09PSBBQk9SVElORyAmJiB0aW1lc3RhbXAgPiByZXF1ZXN0LmFib3J0VGltZSkgJiZcbiAgICAgICAgdGltZXN0YW1wID4gdGFzay50aW1lICYmXG4gICAgICAgICh0YXNrLnRpbWUgPSB0aW1lc3RhbXApO1xuICAgIH1cbiAgICBmdW5jdGlvbiBlbWl0Q2h1bmsocmVxdWVzdCwgdGFzaywgdmFsdWUpIHtcbiAgICAgIHZhciBpZCA9IHRhc2suaWQ7XG4gICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgdmFsdWUgJiYgbnVsbCAhPT0gYnl0ZUxlbmd0aE9mQ2h1bmtcbiAgICAgICAgPyBlbWl0VGV4dENodW5rKHJlcXVlc3QsIGlkLCB2YWx1ZSwgITEpXG4gICAgICAgIDogdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlclxuICAgICAgICAgID8gZW1pdFR5cGVkQXJyYXlDaHVuayhyZXF1ZXN0LCBpZCwgXCJBXCIsIG5ldyBVaW50OEFycmF5KHZhbHVlKSwgITEpXG4gICAgICAgICAgOiB2YWx1ZSBpbnN0YW5jZW9mIEludDhBcnJheVxuICAgICAgICAgICAgPyBlbWl0VHlwZWRBcnJheUNodW5rKHJlcXVlc3QsIGlkLCBcIk9cIiwgdmFsdWUsICExKVxuICAgICAgICAgICAgOiB2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXlcbiAgICAgICAgICAgICAgPyBlbWl0VHlwZWRBcnJheUNodW5rKHJlcXVlc3QsIGlkLCBcIm9cIiwgdmFsdWUsICExKVxuICAgICAgICAgICAgICA6IHZhbHVlIGluc3RhbmNlb2YgVWludDhDbGFtcGVkQXJyYXlcbiAgICAgICAgICAgICAgICA/IGVtaXRUeXBlZEFycmF5Q2h1bmsocmVxdWVzdCwgaWQsIFwiVVwiLCB2YWx1ZSwgITEpXG4gICAgICAgICAgICAgICAgOiB2YWx1ZSBpbnN0YW5jZW9mIEludDE2QXJyYXlcbiAgICAgICAgICAgICAgICAgID8gZW1pdFR5cGVkQXJyYXlDaHVuayhyZXF1ZXN0LCBpZCwgXCJTXCIsIHZhbHVlLCAhMSlcbiAgICAgICAgICAgICAgICAgIDogdmFsdWUgaW5zdGFuY2VvZiBVaW50MTZBcnJheVxuICAgICAgICAgICAgICAgICAgICA/IGVtaXRUeXBlZEFycmF5Q2h1bmsocmVxdWVzdCwgaWQsIFwic1wiLCB2YWx1ZSwgITEpXG4gICAgICAgICAgICAgICAgICAgIDogdmFsdWUgaW5zdGFuY2VvZiBJbnQzMkFycmF5XG4gICAgICAgICAgICAgICAgICAgICAgPyBlbWl0VHlwZWRBcnJheUNodW5rKHJlcXVlc3QsIGlkLCBcIkxcIiwgdmFsdWUsICExKVxuICAgICAgICAgICAgICAgICAgICAgIDogdmFsdWUgaW5zdGFuY2VvZiBVaW50MzJBcnJheVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBlbWl0VHlwZWRBcnJheUNodW5rKHJlcXVlc3QsIGlkLCBcImxcIiwgdmFsdWUsICExKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZSBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IGVtaXRUeXBlZEFycmF5Q2h1bmsocmVxdWVzdCwgaWQsIFwiR1wiLCB2YWx1ZSwgITEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogdmFsdWUgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGVtaXRUeXBlZEFycmF5Q2h1bmsocmVxdWVzdCwgaWQsIFwiZ1wiLCB2YWx1ZSwgITEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZSBpbnN0YW5jZW9mIEJpZ0ludDY0QXJyYXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZW1pdFR5cGVkQXJyYXlDaHVuayhyZXF1ZXN0LCBpZCwgXCJNXCIsIHZhbHVlLCAhMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdmFsdWUgaW5zdGFuY2VvZiBCaWdVaW50NjRBcnJheVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGVtaXRUeXBlZEFycmF5Q2h1bmsoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgITFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdmFsdWUgaW5zdGFuY2VvZiBEYXRhVmlld1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZW1pdFR5cGVkQXJyYXlDaHVuayhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgITFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICgodmFsdWUgPSBzdHJpbmdpZnkodmFsdWUsIHRhc2sudG9KU09OKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWl0TW9kZWxDaHVuayhyZXF1ZXN0LCB0YXNrLmlkLCB2YWx1ZSkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBlcnJvcmVkVGFzayhyZXF1ZXN0LCB0YXNrLCBlcnJvcikge1xuICAgICAgdGFzay50aW1lZCAmJiBtYXJrT3BlcmF0aW9uRW5kVGltZShyZXF1ZXN0LCB0YXNrLCBwZXJmb3JtYW5jZS5ub3coKSk7XG4gICAgICB0YXNrLnN0YXR1cyA9IDQ7XG4gICAgICB2YXIgZGlnZXN0ID0gbG9nUmVjb3ZlcmFibGVFcnJvcihyZXF1ZXN0LCBlcnJvciwgdGFzayk7XG4gICAgICBlbWl0RXJyb3JDaHVuayhyZXF1ZXN0LCB0YXNrLmlkLCBkaWdlc3QsIGVycm9yLCAhMSk7XG4gICAgICByZXF1ZXN0LmFib3J0YWJsZVRhc2tzLmRlbGV0ZSh0YXNrKTtcbiAgICAgIGNhbGxPbkFsbFJlYWR5SWZSZWFkeShyZXF1ZXN0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmV0cnlUYXNrKHJlcXVlc3QsIHRhc2spIHtcbiAgICAgIGlmICgwID09PSB0YXNrLnN0YXR1cykge1xuICAgICAgICB2YXIgcHJldkNhbkVtaXREZWJ1Z0luZm8gPSBjYW5FbWl0RGVidWdJbmZvO1xuICAgICAgICB0YXNrLnN0YXR1cyA9IDU7XG4gICAgICAgIHZhciBwYXJlbnRTZXJpYWxpemVkU2l6ZSA9IHNlcmlhbGl6ZWRTaXplO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG1vZGVsUm9vdCA9IHRhc2subW9kZWw7XG4gICAgICAgICAgY2FuRW1pdERlYnVnSW5mbyA9ICEwO1xuICAgICAgICAgIHZhciByZXNvbHZlZE1vZGVsID0gcmVuZGVyTW9kZWxEZXN0cnVjdGl2ZShcbiAgICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgICB0YXNrLFxuICAgICAgICAgICAgZW1wdHlSb290LFxuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIHRhc2subW9kZWxcbiAgICAgICAgICApO1xuICAgICAgICAgIGNhbkVtaXREZWJ1Z0luZm8gPSAhMTtcbiAgICAgICAgICBtb2RlbFJvb3QgPSByZXNvbHZlZE1vZGVsO1xuICAgICAgICAgIHRhc2sua2V5UGF0aCA9IG51bGw7XG4gICAgICAgICAgdGFzay5pbXBsaWNpdFNsb3QgPSAhMTtcbiAgICAgICAgICB2YXIgY3VycmVudEVudiA9ICgwLCByZXF1ZXN0LmVudmlyb25tZW50TmFtZSkoKTtcbiAgICAgICAgICBjdXJyZW50RW52ICE9PSB0YXNrLmVudmlyb25tZW50TmFtZSAmJlxuICAgICAgICAgICAgKHJlcXVlc3QucGVuZGluZ0NodW5rcysrLFxuICAgICAgICAgICAgZW1pdERlYnVnQ2h1bmsocmVxdWVzdCwgdGFzay5pZCwgeyBlbnY6IGN1cnJlbnRFbnYgfSkpO1xuICAgICAgICAgIHRhc2sudGltZWQgJiYgbWFya09wZXJhdGlvbkVuZFRpbWUocmVxdWVzdCwgdGFzaywgcGVyZm9ybWFuY2Uubm93KCkpO1xuICAgICAgICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgcmVzb2x2ZWRNb2RlbCAmJiBudWxsICE9PSByZXNvbHZlZE1vZGVsKVxuICAgICAgICAgICAgcmVxdWVzdC53cml0dGVuT2JqZWN0cy5zZXQoXG4gICAgICAgICAgICAgIHJlc29sdmVkTW9kZWwsXG4gICAgICAgICAgICAgIHNlcmlhbGl6ZUJ5VmFsdWVJRCh0YXNrLmlkKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgZW1pdENodW5rKHJlcXVlc3QsIHRhc2ssIHJlc29sdmVkTW9kZWwpO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGpzb24gPSBzdHJpbmdpZnkocmVzb2x2ZWRNb2RlbCk7XG4gICAgICAgICAgICBlbWl0TW9kZWxDaHVuayhyZXF1ZXN0LCB0YXNrLmlkLCBqc29uKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGFzay5zdGF0dXMgPSAxO1xuICAgICAgICAgIHJlcXVlc3QuYWJvcnRhYmxlVGFza3MuZGVsZXRlKHRhc2spO1xuICAgICAgICAgIGNhbGxPbkFsbFJlYWR5SWZSZWFkeShyZXF1ZXN0KTtcbiAgICAgICAgfSBjYXRjaCAodGhyb3duVmFsdWUpIHtcbiAgICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IEFCT1JUSU5HKSB7XG4gICAgICAgICAgICByZXF1ZXN0LmFib3J0YWJsZVRhc2tzLmRlbGV0ZSh0YXNrKTtcbiAgICAgICAgICAgIHRhc2suc3RhdHVzID0gMDtcbiAgICAgICAgICAgIHZhciBlcnJvcklkID0gcmVxdWVzdC5mYXRhbEVycm9yO1xuICAgICAgICAgICAgYWJvcnRUYXNrKHRhc2spO1xuICAgICAgICAgICAgZmluaXNoQWJvcnRlZFRhc2sodGFzaywgcmVxdWVzdCwgZXJyb3JJZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB4ID1cbiAgICAgICAgICAgICAgdGhyb3duVmFsdWUgPT09IFN1c3BlbnNlRXhjZXB0aW9uXG4gICAgICAgICAgICAgICAgPyBnZXRTdXNwZW5kZWRUaGVuYWJsZSgpXG4gICAgICAgICAgICAgICAgOiB0aHJvd25WYWx1ZTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHggJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0geCAmJlxuICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB4LnRoZW5cbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICB0YXNrLnN0YXR1cyA9IDA7XG4gICAgICAgICAgICAgIHRhc2sudGhlbmFibGVTdGF0ZSA9IGdldFRoZW5hYmxlU3RhdGVBZnRlclN1c3BlbmRpbmcoKTtcbiAgICAgICAgICAgICAgdmFyIHBpbmcgPSB0YXNrLnBpbmc7XG4gICAgICAgICAgICAgIHgudGhlbihwaW5nLCBwaW5nKTtcbiAgICAgICAgICAgIH0gZWxzZSBlcnJvcmVkVGFzayhyZXF1ZXN0LCB0YXNrLCB4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgKGNhbkVtaXREZWJ1Z0luZm8gPSBwcmV2Q2FuRW1pdERlYnVnSW5mbyksXG4gICAgICAgICAgICAoc2VyaWFsaXplZFNpemUgPSBwYXJlbnRTZXJpYWxpemVkU2l6ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdHJ5U3RyZWFtVGFzayhyZXF1ZXN0LCB0YXNrKSB7XG4gICAgICB2YXIgcHJldkNhbkVtaXREZWJ1Z0luZm8gPSBjYW5FbWl0RGVidWdJbmZvO1xuICAgICAgY2FuRW1pdERlYnVnSW5mbyA9ICExO1xuICAgICAgdmFyIHBhcmVudFNlcmlhbGl6ZWRTaXplID0gc2VyaWFsaXplZFNpemU7XG4gICAgICB0cnkge1xuICAgICAgICBlbWl0Q2h1bmsocmVxdWVzdCwgdGFzaywgdGFzay5tb2RlbCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICAoc2VyaWFsaXplZFNpemUgPSBwYXJlbnRTZXJpYWxpemVkU2l6ZSksXG4gICAgICAgICAgKGNhbkVtaXREZWJ1Z0luZm8gPSBwcmV2Q2FuRW1pdERlYnVnSW5mbyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBlcmZvcm1Xb3JrKHJlcXVlc3QpIHtcbiAgICAgIHZhciBwcmV2RGlzcGF0Y2hlciA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzU2VydmVyLkg7XG4gICAgICBSZWFjdFNoYXJlZEludGVybmFsc1NlcnZlci5IID0gSG9va3NEaXNwYXRjaGVyO1xuICAgICAgdmFyIHByZXZSZXF1ZXN0ID0gY3VycmVudFJlcXVlc3Q7XG4gICAgICBjdXJyZW50UmVxdWVzdCQxID0gY3VycmVudFJlcXVlc3QgPSByZXF1ZXN0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHBpbmdlZFRhc2tzID0gcmVxdWVzdC5waW5nZWRUYXNrcztcbiAgICAgICAgcmVxdWVzdC5waW5nZWRUYXNrcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBpbmdlZFRhc2tzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgIHJldHJ5VGFzayhyZXF1ZXN0LCBwaW5nZWRUYXNrc1tpXSk7XG4gICAgICAgIGZsdXNoQ29tcGxldGVkQ2h1bmtzKHJlcXVlc3QpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgbG9nUmVjb3ZlcmFibGVFcnJvcihyZXF1ZXN0LCBlcnJvciwgbnVsbCksIGZhdGFsRXJyb3IocmVxdWVzdCwgZXJyb3IpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzU2VydmVyLkggPSBwcmV2RGlzcGF0Y2hlciksXG4gICAgICAgICAgKGN1cnJlbnRSZXF1ZXN0JDEgPSBudWxsKSxcbiAgICAgICAgICAoY3VycmVudFJlcXVlc3QgPSBwcmV2UmVxdWVzdCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFib3J0VGFzayh0YXNrKSB7XG4gICAgICAwID09PSB0YXNrLnN0YXR1cyAmJiAodGFzay5zdGF0dXMgPSAzKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmluaXNoQWJvcnRlZFRhc2sodGFzaywgcmVxdWVzdCwgZXJyb3JJZCkge1xuICAgICAgaWYgKDMgPT09IHRhc2suc3RhdHVzKSB7XG4gICAgICAgIHZhciBtb2RlbCA9IHRhc2subW9kZWw7XG4gICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBtb2RlbCAmJlxuICAgICAgICAgIG51bGwgIT09IG1vZGVsICYmXG4gICAgICAgICAgKG1vZGVsID0gbW9kZWwuX2RlYnVnSW5mbykgJiZcbiAgICAgICAgICBmb3J3YXJkRGVidWdJbmZvKHJlcXVlc3QsIHRhc2ssIG1vZGVsKTtcbiAgICAgICAgdGFzay50aW1lZCAmJiBtYXJrT3BlcmF0aW9uRW5kVGltZShyZXF1ZXN0LCB0YXNrLCByZXF1ZXN0LmFib3J0VGltZSk7XG4gICAgICAgIGVycm9ySWQgPSBzZXJpYWxpemVCeVZhbHVlSUQoZXJyb3JJZCk7XG4gICAgICAgIHRhc2sgPSBlbmNvZGVSZWZlcmVuY2VDaHVuayhyZXF1ZXN0LCB0YXNrLmlkLCBlcnJvcklkKTtcbiAgICAgICAgcmVxdWVzdC5jb21wbGV0ZWRFcnJvckNodW5rcy5wdXNoKHRhc2spO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBmbHVzaENvbXBsZXRlZENodW5rcyhyZXF1ZXN0KSB7XG4gICAgICBpZiAobnVsbCAhPT0gcmVxdWVzdC5kZWJ1Z0Rlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBkZWJ1Z0Rlc3RpbmF0aW9uID0gcmVxdWVzdC5kZWJ1Z0Rlc3RpbmF0aW9uO1xuICAgICAgICBjdXJyZW50VmlldyA9IG5ldyBVaW50OEFycmF5KDIwNDgpO1xuICAgICAgICB3cml0dGVuQnl0ZXMgPSAwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICB2YXIgZGVidWdDaHVua3MgPSByZXF1ZXN0LmNvbXBsZXRlZERlYnVnQ2h1bmtzLCBpID0gMDtcbiAgICAgICAgICAgIGkgPCBkZWJ1Z0NodW5rcy5sZW5ndGg7XG4gICAgICAgICAgICBpKytcbiAgICAgICAgICApXG4gICAgICAgICAgICByZXF1ZXN0LnBlbmRpbmdEZWJ1Z0NodW5rcy0tLFxuICAgICAgICAgICAgICB3cml0ZUNodW5rQW5kUmV0dXJuKGRlYnVnRGVzdGluYXRpb24sIGRlYnVnQ2h1bmtzW2ldKTtcbiAgICAgICAgICBkZWJ1Z0NodW5rcy5zcGxpY2UoMCwgaSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgY29tcGxldGVXcml0aW5nKGRlYnVnRGVzdGluYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkZWJ1Z0Rlc3RpbmF0aW9uID0gcmVxdWVzdC5kZXN0aW5hdGlvbjtcbiAgICAgIGlmIChudWxsICE9PSBkZWJ1Z0Rlc3RpbmF0aW9uKSB7XG4gICAgICAgIGN1cnJlbnRWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoMjA0OCk7XG4gICAgICAgIHdyaXR0ZW5CeXRlcyA9IDA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIGltcG9ydHNDaHVua3MgPSByZXF1ZXN0LmNvbXBsZXRlZEltcG9ydENodW5rcztcbiAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgZGVidWdDaHVua3MgPSAwO1xuICAgICAgICAgICAgZGVidWdDaHVua3MgPCBpbXBvcnRzQ2h1bmtzLmxlbmd0aDtcbiAgICAgICAgICAgIGRlYnVnQ2h1bmtzKytcbiAgICAgICAgICApXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIChyZXF1ZXN0LnBlbmRpbmdDaHVua3MtLSxcbiAgICAgICAgICAgICAgIXdyaXRlQ2h1bmtBbmRSZXR1cm4oXG4gICAgICAgICAgICAgICAgZGVidWdEZXN0aW5hdGlvbixcbiAgICAgICAgICAgICAgICBpbXBvcnRzQ2h1bmtzW2RlYnVnQ2h1bmtzXVxuICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHJlcXVlc3QuZGVzdGluYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICBkZWJ1Z0NodW5rcysrO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBpbXBvcnRzQ2h1bmtzLnNwbGljZSgwLCBkZWJ1Z0NodW5rcyk7XG4gICAgICAgICAgdmFyIGhpbnRDaHVua3MgPSByZXF1ZXN0LmNvbXBsZXRlZEhpbnRDaHVua3M7XG4gICAgICAgICAgZm9yIChkZWJ1Z0NodW5rcyA9IDA7IGRlYnVnQ2h1bmtzIDwgaGludENodW5rcy5sZW5ndGg7IGRlYnVnQ2h1bmtzKyspXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICF3cml0ZUNodW5rQW5kUmV0dXJuKGRlYnVnRGVzdGluYXRpb24sIGhpbnRDaHVua3NbZGVidWdDaHVua3NdKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHJlcXVlc3QuZGVzdGluYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICBkZWJ1Z0NodW5rcysrO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBoaW50Q2h1bmtzLnNwbGljZSgwLCBkZWJ1Z0NodW5rcyk7XG4gICAgICAgICAgaWYgKG51bGwgPT09IHJlcXVlc3QuZGVidWdEZXN0aW5hdGlvbikge1xuICAgICAgICAgICAgdmFyIF9kZWJ1Z0NodW5rcyA9IHJlcXVlc3QuY29tcGxldGVkRGVidWdDaHVua3M7XG4gICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICBkZWJ1Z0NodW5rcyA9IDA7XG4gICAgICAgICAgICAgIGRlYnVnQ2h1bmtzIDwgX2RlYnVnQ2h1bmtzLmxlbmd0aDtcbiAgICAgICAgICAgICAgZGVidWdDaHVua3MrK1xuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKHJlcXVlc3QucGVuZGluZ0RlYnVnQ2h1bmtzLS0sXG4gICAgICAgICAgICAgICAgIXdyaXRlQ2h1bmtBbmRSZXR1cm4oXG4gICAgICAgICAgICAgICAgICBkZWJ1Z0Rlc3RpbmF0aW9uLFxuICAgICAgICAgICAgICAgICAgX2RlYnVnQ2h1bmtzW2RlYnVnQ2h1bmtzXVxuICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJlcXVlc3QuZGVzdGluYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgIGRlYnVnQ2h1bmtzKys7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9kZWJ1Z0NodW5rcy5zcGxpY2UoMCwgZGVidWdDaHVua3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcmVndWxhckNodW5rcyA9IHJlcXVlc3QuY29tcGxldGVkUmVndWxhckNodW5rcztcbiAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgZGVidWdDaHVua3MgPSAwO1xuICAgICAgICAgICAgZGVidWdDaHVua3MgPCByZWd1bGFyQ2h1bmtzLmxlbmd0aDtcbiAgICAgICAgICAgIGRlYnVnQ2h1bmtzKytcbiAgICAgICAgICApXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIChyZXF1ZXN0LnBlbmRpbmdDaHVua3MtLSxcbiAgICAgICAgICAgICAgIXdyaXRlQ2h1bmtBbmRSZXR1cm4oXG4gICAgICAgICAgICAgICAgZGVidWdEZXN0aW5hdGlvbixcbiAgICAgICAgICAgICAgICByZWd1bGFyQ2h1bmtzW2RlYnVnQ2h1bmtzXVxuICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHJlcXVlc3QuZGVzdGluYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICBkZWJ1Z0NodW5rcysrO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICByZWd1bGFyQ2h1bmtzLnNwbGljZSgwLCBkZWJ1Z0NodW5rcyk7XG4gICAgICAgICAgdmFyIGVycm9yQ2h1bmtzID0gcmVxdWVzdC5jb21wbGV0ZWRFcnJvckNodW5rcztcbiAgICAgICAgICBmb3IgKGRlYnVnQ2h1bmtzID0gMDsgZGVidWdDaHVua3MgPCBlcnJvckNodW5rcy5sZW5ndGg7IGRlYnVnQ2h1bmtzKyspXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIChyZXF1ZXN0LnBlbmRpbmdDaHVua3MtLSxcbiAgICAgICAgICAgICAgIXdyaXRlQ2h1bmtBbmRSZXR1cm4oZGVidWdEZXN0aW5hdGlvbiwgZXJyb3JDaHVua3NbZGVidWdDaHVua3NdKSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICByZXF1ZXN0LmRlc3RpbmF0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgZGVidWdDaHVua3MrKztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgZXJyb3JDaHVua3Muc3BsaWNlKDAsIGRlYnVnQ2h1bmtzKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAocmVxdWVzdC5mbHVzaFNjaGVkdWxlZCA9ICExKSwgY29tcGxldGVXcml0aW5nKGRlYnVnRGVzdGluYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAwID09PSByZXF1ZXN0LnBlbmRpbmdDaHVua3MgJiZcbiAgICAgICAgKChpbXBvcnRzQ2h1bmtzID0gcmVxdWVzdC5kZWJ1Z0Rlc3RpbmF0aW9uKSxcbiAgICAgICAgMCA9PT0gcmVxdWVzdC5wZW5kaW5nRGVidWdDaHVua3NcbiAgICAgICAgICA/IChudWxsICE9PSBpbXBvcnRzQ2h1bmtzICYmXG4gICAgICAgICAgICAgIChpbXBvcnRzQ2h1bmtzLmNsb3NlKCksIChyZXF1ZXN0LmRlYnVnRGVzdGluYXRpb24gPSBudWxsKSksXG4gICAgICAgICAgICByZXF1ZXN0LnN0YXR1cyA8IEFCT1JUSU5HICYmXG4gICAgICAgICAgICAgIHJlcXVlc3QuY2FjaGVDb250cm9sbGVyLmFib3J0KFxuICAgICAgICAgICAgICAgIEVycm9yKFxuICAgICAgICAgICAgICAgICAgXCJUaGlzIHJlbmRlciBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LiBBbGwgY2FjaGVTaWduYWxzIGFyZSBub3cgYWJvcnRlZCB0byBhbGxvdyBjbGVhbiB1cCBvZiBhbnkgdW51c2VkIHJlc291cmNlcy5cIlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIG51bGwgIT09IHJlcXVlc3QuZGVzdGluYXRpb24gJiZcbiAgICAgICAgICAgICAgKChyZXF1ZXN0LnN0YXR1cyA9IENMT1NFRCksXG4gICAgICAgICAgICAgIHJlcXVlc3QuZGVzdGluYXRpb24uY2xvc2UoKSxcbiAgICAgICAgICAgICAgKHJlcXVlc3QuZGVzdGluYXRpb24gPSBudWxsKSksXG4gICAgICAgICAgICBudWxsICE9PSByZXF1ZXN0LmRlYnVnRGVzdGluYXRpb24gJiZcbiAgICAgICAgICAgICAgKHJlcXVlc3QuZGVidWdEZXN0aW5hdGlvbi5jbG9zZSgpLFxuICAgICAgICAgICAgICAocmVxdWVzdC5kZWJ1Z0Rlc3RpbmF0aW9uID0gbnVsbCkpKVxuICAgICAgICAgIDogbnVsbCAhPT0gaW1wb3J0c0NodW5rcyAmJlxuICAgICAgICAgICAgbnVsbCAhPT0gcmVxdWVzdC5kZXN0aW5hdGlvbiAmJlxuICAgICAgICAgICAgKChyZXF1ZXN0LnN0YXR1cyA9IENMT1NFRCksXG4gICAgICAgICAgICByZXF1ZXN0LmRlc3RpbmF0aW9uLmNsb3NlKCksXG4gICAgICAgICAgICAocmVxdWVzdC5kZXN0aW5hdGlvbiA9IG51bGwpKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0YXJ0V29yayhyZXF1ZXN0KSB7XG4gICAgICByZXF1ZXN0LmZsdXNoU2NoZWR1bGVkID0gbnVsbCAhPT0gcmVxdWVzdC5kZXN0aW5hdGlvbjtcbiAgICAgIHN1cHBvcnRzUmVxdWVzdFN0b3JhZ2VcbiAgICAgICAgPyBzY2hlZHVsZU1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXF1ZXN0U3RvcmFnZS5ydW4ocmVxdWVzdCwgcGVyZm9ybVdvcmssIHJlcXVlc3QpO1xuICAgICAgICAgIH0pXG4gICAgICAgIDogc2NoZWR1bGVNaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBlcmZvcm1Xb3JrKHJlcXVlc3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIDEwID09PSByZXF1ZXN0LnN0YXR1cyAmJiAocmVxdWVzdC5zdGF0dXMgPSAxMSk7XG4gICAgICB9LCAwKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZW5xdWV1ZUZsdXNoKHJlcXVlc3QpIHtcbiAgICAgICExICE9PSByZXF1ZXN0LmZsdXNoU2NoZWR1bGVkIHx8XG4gICAgICAgIDAgIT09IHJlcXVlc3QucGluZ2VkVGFza3MubGVuZ3RoIHx8XG4gICAgICAgIChudWxsID09PSByZXF1ZXN0LmRlc3RpbmF0aW9uICYmIG51bGwgPT09IHJlcXVlc3QuZGVidWdEZXN0aW5hdGlvbikgfHxcbiAgICAgICAgKChyZXF1ZXN0LmZsdXNoU2NoZWR1bGVkID0gITApLFxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXF1ZXN0LmZsdXNoU2NoZWR1bGVkID0gITE7XG4gICAgICAgICAgZmx1c2hDb21wbGV0ZWRDaHVua3MocmVxdWVzdCk7XG4gICAgICAgIH0sIDApKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2FsbE9uQWxsUmVhZHlJZlJlYWR5KHJlcXVlc3QpIHtcbiAgICAgIDAgPT09IHJlcXVlc3QuYWJvcnRhYmxlVGFza3Muc2l6ZSAmJlxuICAgICAgICAoKHJlcXVlc3QgPSByZXF1ZXN0Lm9uQWxsUmVhZHkpLCByZXF1ZXN0KCkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzdGFydEZsb3dpbmcocmVxdWVzdCwgZGVzdGluYXRpb24pIHtcbiAgICAgIGlmICgxMyA9PT0gcmVxdWVzdC5zdGF0dXMpXG4gICAgICAgIChyZXF1ZXN0LnN0YXR1cyA9IENMT1NFRCksXG4gICAgICAgICAgY2xvc2VXaXRoRXJyb3IoZGVzdGluYXRpb24sIHJlcXVlc3QuZmF0YWxFcnJvcik7XG4gICAgICBlbHNlIGlmIChyZXF1ZXN0LnN0YXR1cyAhPT0gQ0xPU0VEICYmIG51bGwgPT09IHJlcXVlc3QuZGVzdGluYXRpb24pIHtcbiAgICAgICAgcmVxdWVzdC5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGZsdXNoQ29tcGxldGVkQ2h1bmtzKHJlcXVlc3QpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGxvZ1JlY292ZXJhYmxlRXJyb3IocmVxdWVzdCwgZXJyb3IsIG51bGwpLCBmYXRhbEVycm9yKHJlcXVlc3QsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBmaW5pc2hBYm9ydChyZXF1ZXN0LCBhYm9ydGVkVGFza3MsIGVycm9ySWQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGFib3J0ZWRUYXNrcy5mb3JFYWNoKGZ1bmN0aW9uICh0YXNrKSB7XG4gICAgICAgICAgcmV0dXJuIGZpbmlzaEFib3J0ZWRUYXNrKHRhc2ssIHJlcXVlc3QsIGVycm9ySWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIG9uQWxsUmVhZHkgPSByZXF1ZXN0Lm9uQWxsUmVhZHk7XG4gICAgICAgIG9uQWxsUmVhZHkoKTtcbiAgICAgICAgZmx1c2hDb21wbGV0ZWRDaHVua3MocmVxdWVzdCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBsb2dSZWNvdmVyYWJsZUVycm9yKHJlcXVlc3QsIGVycm9yLCBudWxsKSwgZmF0YWxFcnJvcihyZXF1ZXN0LCBlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFib3J0KHJlcXVlc3QsIHJlYXNvbikge1xuICAgICAgaWYgKCEoMTEgPCByZXF1ZXN0LnN0YXR1cykpXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVxdWVzdC5zdGF0dXMgPSBBQk9SVElORztcbiAgICAgICAgICByZXF1ZXN0LmFib3J0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICAgIHJlcXVlc3QuY2FjaGVDb250cm9sbGVyLmFib3J0KHJlYXNvbik7XG4gICAgICAgICAgdmFyIGFib3J0YWJsZVRhc2tzID0gcmVxdWVzdC5hYm9ydGFibGVUYXNrcztcbiAgICAgICAgICBpZiAoMCA8IGFib3J0YWJsZVRhc2tzLnNpemUpIHtcbiAgICAgICAgICAgIHZhciBlcnJvciA9XG4gICAgICAgICAgICAgICAgdm9pZCAwID09PSByZWFzb25cbiAgICAgICAgICAgICAgICAgID8gRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgXCJUaGUgcmVuZGVyIHdhcyBhYm9ydGVkIGJ5IHRoZSBzZXJ2ZXIgd2l0aG91dCBhIHJlYXNvbi5cIlxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICA6IFwib2JqZWN0XCIgPT09IHR5cGVvZiByZWFzb24gJiZcbiAgICAgICAgICAgICAgICAgICAgICBudWxsICE9PSByZWFzb24gJiZcbiAgICAgICAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZWFzb24udGhlblxuICAgICAgICAgICAgICAgICAgICA/IEVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJUaGUgcmVuZGVyIHdhcyBhYm9ydGVkIGJ5IHRoZSBzZXJ2ZXIgd2l0aCBhIHByb21pc2UuXCJcbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIDogcmVhc29uLFxuICAgICAgICAgICAgICBkaWdlc3QgPSBsb2dSZWNvdmVyYWJsZUVycm9yKHJlcXVlc3QsIGVycm9yLCBudWxsKSxcbiAgICAgICAgICAgICAgX2Vycm9ySWQyID0gcmVxdWVzdC5uZXh0Q2h1bmtJZCsrO1xuICAgICAgICAgICAgcmVxdWVzdC5mYXRhbEVycm9yID0gX2Vycm9ySWQyO1xuICAgICAgICAgICAgcmVxdWVzdC5wZW5kaW5nQ2h1bmtzKys7XG4gICAgICAgICAgICBlbWl0RXJyb3JDaHVuayhyZXF1ZXN0LCBfZXJyb3JJZDIsIGRpZ2VzdCwgZXJyb3IsICExKTtcbiAgICAgICAgICAgIGFib3J0YWJsZVRhc2tzLmZvckVhY2goZnVuY3Rpb24gKHRhc2spIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGFib3J0VGFzayh0YXNrLCByZXF1ZXN0LCBfZXJyb3JJZDIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZpbmlzaEFib3J0KHJlcXVlc3QsIGFib3J0YWJsZVRhc2tzLCBfZXJyb3JJZDIpO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBvbkFsbFJlYWR5ID0gcmVxdWVzdC5vbkFsbFJlYWR5O1xuICAgICAgICAgICAgb25BbGxSZWFkeSgpO1xuICAgICAgICAgICAgZmx1c2hDb21wbGV0ZWRDaHVua3MocmVxdWVzdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvciQyKSB7XG4gICAgICAgICAgbG9nUmVjb3ZlcmFibGVFcnJvcihyZXF1ZXN0LCBlcnJvciQyLCBudWxsKSxcbiAgICAgICAgICAgIGZhdGFsRXJyb3IocmVxdWVzdCwgZXJyb3IkMik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZnJvbUhleChzdHIpIHtcbiAgICAgIHJldHVybiBwYXJzZUludChzdHIsIDE2KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2xvc2VEZWJ1Z0NoYW5uZWwocmVxdWVzdCkge1xuICAgICAgdmFyIGRlZmVycmVkRGVidWdPYmplY3RzID0gcmVxdWVzdC5kZWZlcnJlZERlYnVnT2JqZWN0cztcbiAgICAgIGlmIChudWxsID09PSBkZWZlcnJlZERlYnVnT2JqZWN0cylcbiAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgXCJyZXNvbHZlRGVidWdNZXNzYWdlL2Nsb3NlRGVidWdDaGFubmVsIHNob3VsZCBub3QgYmUgY2FsbGVkIGZvciBhIFJlcXVlc3QgdGhhdCB3YXNuJ3Qga2VwdCBhbGl2ZS4gVGhpcyBpcyBhIGJ1ZyBpbiBSZWFjdC5cIlxuICAgICAgICApO1xuICAgICAgZGVmZXJyZWREZWJ1Z09iamVjdHMucmV0YWluZWQuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGlkKSB7XG4gICAgICAgIHJlcXVlc3QucGVuZGluZ0RlYnVnQ2h1bmtzLS07XG4gICAgICAgIGRlZmVycmVkRGVidWdPYmplY3RzLnJldGFpbmVkLmRlbGV0ZShpZCk7XG4gICAgICAgIGRlZmVycmVkRGVidWdPYmplY3RzLmV4aXN0aW5nLmRlbGV0ZSh2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIGVucXVldWVGbHVzaChyZXF1ZXN0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVzb2x2ZVNlcnZlclJlZmVyZW5jZShidW5kbGVyQ29uZmlnLCBpZCkge1xuICAgICAgdmFyIG5hbWUgPSBcIlwiLFxuICAgICAgICByZXNvbHZlZE1vZHVsZURhdGEgPSBidW5kbGVyQ29uZmlnW2lkXTtcbiAgICAgIGlmIChyZXNvbHZlZE1vZHVsZURhdGEpIG5hbWUgPSByZXNvbHZlZE1vZHVsZURhdGEubmFtZTtcbiAgICAgIGVsc2Uge1xuICAgICAgICB2YXIgaWR4ID0gaWQubGFzdEluZGV4T2YoXCIjXCIpO1xuICAgICAgICAtMSAhPT0gaWR4ICYmXG4gICAgICAgICAgKChuYW1lID0gaWQuc2xpY2UoaWR4ICsgMSkpLFxuICAgICAgICAgIChyZXNvbHZlZE1vZHVsZURhdGEgPSBidW5kbGVyQ29uZmlnW2lkLnNsaWNlKDAsIGlkeCldKSk7XG4gICAgICAgIGlmICghcmVzb2x2ZWRNb2R1bGVEYXRhKVxuICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgJ0NvdWxkIG5vdCBmaW5kIHRoZSBtb2R1bGUgXCInICtcbiAgICAgICAgICAgICAgaWQgK1xuICAgICAgICAgICAgICAnXCIgaW4gdGhlIFJlYWN0IFNlcnZlciBNYW5pZmVzdC4gVGhpcyBpcyBwcm9iYWJseSBhIGJ1ZyBpbiB0aGUgUmVhY3QgU2VydmVyIENvbXBvbmVudHMgYnVuZGxlci4nXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXNvbHZlZE1vZHVsZURhdGEuYXN5bmNcbiAgICAgICAgPyBbcmVzb2x2ZWRNb2R1bGVEYXRhLmlkLCByZXNvbHZlZE1vZHVsZURhdGEuY2h1bmtzLCBuYW1lLCAxXVxuICAgICAgICA6IFtyZXNvbHZlZE1vZHVsZURhdGEuaWQsIHJlc29sdmVkTW9kdWxlRGF0YS5jaHVua3MsIG5hbWVdO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZXF1aXJlQXN5bmNNb2R1bGUoaWQpIHtcbiAgICAgIHZhciBwcm9taXNlID0gZ2xvYmFsVGhpcy5fX25leHRfcmVxdWlyZV9fKGlkKTtcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBwcm9taXNlLnRoZW4gfHwgXCJmdWxmaWxsZWRcIiA9PT0gcHJvbWlzZS5zdGF0dXMpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgcHJvbWlzZS50aGVuKFxuICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBwcm9taXNlLnN0YXR1cyA9IFwiZnVsZmlsbGVkXCI7XG4gICAgICAgICAgcHJvbWlzZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgcHJvbWlzZS5zdGF0dXMgPSBcInJlamVjdGVkXCI7XG4gICAgICAgICAgcHJvbWlzZS5yZWFzb24gPSByZWFzb247XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaWdub3JlUmVqZWN0KCkge31cbiAgICBmdW5jdGlvbiBwcmVsb2FkTW9kdWxlKG1ldGFkYXRhKSB7XG4gICAgICBmb3IgKFxuICAgICAgICB2YXIgY2h1bmtzID0gbWV0YWRhdGFbMV0sIHByb21pc2VzID0gW10sIGkgPSAwO1xuICAgICAgICBpIDwgY2h1bmtzLmxlbmd0aDtcblxuICAgICAgKSB7XG4gICAgICAgIHZhciBjaHVua0lkID0gY2h1bmtzW2krK107XG4gICAgICAgIGNodW5rc1tpKytdO1xuICAgICAgICB2YXIgZW50cnkgPSBjaHVua0NhY2hlLmdldChjaHVua0lkKTtcbiAgICAgICAgaWYgKHZvaWQgMCA9PT0gZW50cnkpIHtcbiAgICAgICAgICBlbnRyeSA9IF9fd2VicGFja19jaHVua19sb2FkX18oY2h1bmtJZCk7XG4gICAgICAgICAgcHJvbWlzZXMucHVzaChlbnRyeSk7XG4gICAgICAgICAgdmFyIHJlc29sdmUgPSBjaHVua0NhY2hlLnNldC5iaW5kKGNodW5rQ2FjaGUsIGNodW5rSWQsIG51bGwpO1xuICAgICAgICAgIGVudHJ5LnRoZW4ocmVzb2x2ZSwgaWdub3JlUmVqZWN0KTtcbiAgICAgICAgICBjaHVua0NhY2hlLnNldChjaHVua0lkLCBlbnRyeSk7XG4gICAgICAgIH0gZWxzZSBudWxsICE9PSBlbnRyeSAmJiBwcm9taXNlcy5wdXNoKGVudHJ5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiA0ID09PSBtZXRhZGF0YS5sZW5ndGhcbiAgICAgICAgPyAwID09PSBwcm9taXNlcy5sZW5ndGhcbiAgICAgICAgICA/IHJlcXVpcmVBc3luY01vZHVsZShtZXRhZGF0YVswXSlcbiAgICAgICAgICA6IFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlcXVpcmVBc3luY01vZHVsZShtZXRhZGF0YVswXSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICA6IDAgPCBwcm9taXNlcy5sZW5ndGhcbiAgICAgICAgICA/IFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgICAgIDogbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVxdWlyZU1vZHVsZShtZXRhZGF0YSkge1xuICAgICAgdmFyIG1vZHVsZUV4cG9ydHMgPSBnbG9iYWxUaGlzLl9fbmV4dF9yZXF1aXJlX18obWV0YWRhdGFbMF0pO1xuICAgICAgaWYgKDQgPT09IG1ldGFkYXRhLmxlbmd0aCAmJiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBtb2R1bGVFeHBvcnRzLnRoZW4pXG4gICAgICAgIGlmIChcImZ1bGZpbGxlZFwiID09PSBtb2R1bGVFeHBvcnRzLnN0YXR1cylcbiAgICAgICAgICBtb2R1bGVFeHBvcnRzID0gbW9kdWxlRXhwb3J0cy52YWx1ZTtcbiAgICAgICAgZWxzZSB0aHJvdyBtb2R1bGVFeHBvcnRzLnJlYXNvbjtcbiAgICAgIHJldHVybiBcIipcIiA9PT0gbWV0YWRhdGFbMl1cbiAgICAgICAgPyBtb2R1bGVFeHBvcnRzXG4gICAgICAgIDogXCJcIiA9PT0gbWV0YWRhdGFbMl1cbiAgICAgICAgICA/IG1vZHVsZUV4cG9ydHMuX19lc01vZHVsZVxuICAgICAgICAgICAgPyBtb2R1bGVFeHBvcnRzLmRlZmF1bHRcbiAgICAgICAgICAgIDogbW9kdWxlRXhwb3J0c1xuICAgICAgICAgIDogbW9kdWxlRXhwb3J0c1ttZXRhZGF0YVsyXV07XG4gICAgfVxuICAgIGZ1bmN0aW9uIENodW5rKHN0YXR1cywgdmFsdWUsIHJlYXNvbiwgcmVzcG9uc2UpIHtcbiAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgdGhpcy5yZWFzb24gPSByZWFzb247XG4gICAgICB0aGlzLl9yZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVQZW5kaW5nQ2h1bmsocmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiBuZXcgQ2h1bmsoXCJwZW5kaW5nXCIsIG51bGwsIG51bGwsIHJlc3BvbnNlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gd2FrZUNodW5rKGxpc3RlbmVycywgdmFsdWUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSAoMCwgbGlzdGVuZXJzW2ldKSh2YWx1ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyaWdnZXJFcnJvck9uQ2h1bmsoY2h1bmssIGVycm9yKSB7XG4gICAgICBpZiAoXCJwZW5kaW5nXCIgIT09IGNodW5rLnN0YXR1cyAmJiBcImJsb2NrZWRcIiAhPT0gY2h1bmsuc3RhdHVzKVxuICAgICAgICBjaHVuay5yZWFzb24uZXJyb3IoZXJyb3IpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSBjaHVuay5yZWFzb247XG4gICAgICAgIGNodW5rLnN0YXR1cyA9IFwicmVqZWN0ZWRcIjtcbiAgICAgICAgY2h1bmsucmVhc29uID0gZXJyb3I7XG4gICAgICAgIG51bGwgIT09IGxpc3RlbmVycyAmJiB3YWtlQ2h1bmsobGlzdGVuZXJzLCBlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc29sdmVNb2RlbENodW5rKGNodW5rLCB2YWx1ZSwgaWQpIHtcbiAgICAgIGlmIChcInBlbmRpbmdcIiAhPT0gY2h1bmsuc3RhdHVzKVxuICAgICAgICAoY2h1bmsgPSBjaHVuay5yZWFzb24pLFxuICAgICAgICAgIFwiQ1wiID09PSB2YWx1ZVswXVxuICAgICAgICAgICAgPyBjaHVuay5jbG9zZShcIkNcIiA9PT0gdmFsdWUgPyAnXCIkdW5kZWZpbmVkXCInIDogdmFsdWUuc2xpY2UoMSkpXG4gICAgICAgICAgICA6IGNodW5rLmVucXVldWVNb2RlbCh2YWx1ZSk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFyIHJlc29sdmVMaXN0ZW5lcnMgPSBjaHVuay52YWx1ZSxcbiAgICAgICAgICByZWplY3RMaXN0ZW5lcnMgPSBjaHVuay5yZWFzb247XG4gICAgICAgIGNodW5rLnN0YXR1cyA9IFwicmVzb2x2ZWRfbW9kZWxcIjtcbiAgICAgICAgY2h1bmsudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgY2h1bmsucmVhc29uID0gaWQ7XG4gICAgICAgIGlmIChudWxsICE9PSByZXNvbHZlTGlzdGVuZXJzKVxuICAgICAgICAgIHN3aXRjaCAoKGluaXRpYWxpemVNb2RlbENodW5rKGNodW5rKSwgY2h1bmsuc3RhdHVzKSkge1xuICAgICAgICAgICAgY2FzZSBcImZ1bGZpbGxlZFwiOlxuICAgICAgICAgICAgICB3YWtlQ2h1bmsocmVzb2x2ZUxpc3RlbmVycywgY2h1bmsudmFsdWUpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJwZW5kaW5nXCI6XG4gICAgICAgICAgICBjYXNlIFwiYmxvY2tlZFwiOlxuICAgICAgICAgICAgY2FzZSBcImN5Y2xpY1wiOlxuICAgICAgICAgICAgICBpZiAoY2h1bmsudmFsdWUpXG4gICAgICAgICAgICAgICAgZm9yICh2YWx1ZSA9IDA7IHZhbHVlIDwgcmVzb2x2ZUxpc3RlbmVycy5sZW5ndGg7IHZhbHVlKyspXG4gICAgICAgICAgICAgICAgICBjaHVuay52YWx1ZS5wdXNoKHJlc29sdmVMaXN0ZW5lcnNbdmFsdWVdKTtcbiAgICAgICAgICAgICAgZWxzZSBjaHVuay52YWx1ZSA9IHJlc29sdmVMaXN0ZW5lcnM7XG4gICAgICAgICAgICAgIGlmIChjaHVuay5yZWFzb24pIHtcbiAgICAgICAgICAgICAgICBpZiAocmVqZWN0TGlzdGVuZXJzKVxuICAgICAgICAgICAgICAgICAgZm9yICh2YWx1ZSA9IDA7IHZhbHVlIDwgcmVqZWN0TGlzdGVuZXJzLmxlbmd0aDsgdmFsdWUrKylcbiAgICAgICAgICAgICAgICAgICAgY2h1bmsucmVhc29uLnB1c2gocmVqZWN0TGlzdGVuZXJzW3ZhbHVlXSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBjaHVuay5yZWFzb24gPSByZWplY3RMaXN0ZW5lcnM7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInJlamVjdGVkXCI6XG4gICAgICAgICAgICAgIHJlamVjdExpc3RlbmVycyAmJiB3YWtlQ2h1bmsocmVqZWN0TGlzdGVuZXJzLCBjaHVuay5yZWFzb24pO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlUmVzb2x2ZWRJdGVyYXRvclJlc3VsdENodW5rKHJlc3BvbnNlLCB2YWx1ZSwgZG9uZSkge1xuICAgICAgcmV0dXJuIG5ldyBDaHVuayhcbiAgICAgICAgXCJyZXNvbHZlZF9tb2RlbFwiLFxuICAgICAgICAoZG9uZSA/ICd7XCJkb25lXCI6dHJ1ZSxcInZhbHVlXCI6JyA6ICd7XCJkb25lXCI6ZmFsc2UsXCJ2YWx1ZVwiOicpICtcbiAgICAgICAgICB2YWx1ZSArXG4gICAgICAgICAgXCJ9XCIsXG4gICAgICAgIC0xLFxuICAgICAgICByZXNwb25zZVxuICAgICAgKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVzb2x2ZUl0ZXJhdG9yUmVzdWx0Q2h1bmsoY2h1bmssIHZhbHVlLCBkb25lKSB7XG4gICAgICByZXNvbHZlTW9kZWxDaHVuayhcbiAgICAgICAgY2h1bmssXG4gICAgICAgIChkb25lID8gJ3tcImRvbmVcIjp0cnVlLFwidmFsdWVcIjonIDogJ3tcImRvbmVcIjpmYWxzZSxcInZhbHVlXCI6JykgK1xuICAgICAgICAgIHZhbHVlICtcbiAgICAgICAgICBcIn1cIixcbiAgICAgICAgLTFcbiAgICAgICk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxvYWRTZXJ2ZXJSZWZlcmVuY2UkMShcbiAgICAgIHJlc3BvbnNlLFxuICAgICAgaWQsXG4gICAgICBib3VuZCxcbiAgICAgIHBhcmVudENodW5rLFxuICAgICAgcGFyZW50T2JqZWN0LFxuICAgICAga2V5XG4gICAgKSB7XG4gICAgICB2YXIgc2VydmVyUmVmZXJlbmNlID0gcmVzb2x2ZVNlcnZlclJlZmVyZW5jZShyZXNwb25zZS5fYnVuZGxlckNvbmZpZywgaWQpO1xuICAgICAgaWQgPSBwcmVsb2FkTW9kdWxlKHNlcnZlclJlZmVyZW5jZSk7XG4gICAgICBpZiAoYm91bmQpXG4gICAgICAgIGJvdW5kID0gUHJvbWlzZS5hbGwoW2JvdW5kLCBpZF0pLnRoZW4oZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICBfcmVmID0gX3JlZlswXTtcbiAgICAgICAgICB2YXIgZm4gPSByZXF1aXJlTW9kdWxlKHNlcnZlclJlZmVyZW5jZSk7XG4gICAgICAgICAgcmV0dXJuIGZuLmJpbmQuYXBwbHkoZm4sIFtudWxsXS5jb25jYXQoX3JlZikpO1xuICAgICAgICB9KTtcbiAgICAgIGVsc2UgaWYgKGlkKVxuICAgICAgICBib3VuZCA9IFByb21pc2UucmVzb2x2ZShpZCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcXVpcmVNb2R1bGUoc2VydmVyUmVmZXJlbmNlKTtcbiAgICAgICAgfSk7XG4gICAgICBlbHNlIHJldHVybiByZXF1aXJlTW9kdWxlKHNlcnZlclJlZmVyZW5jZSk7XG4gICAgICBib3VuZC50aGVuKFxuICAgICAgICBjcmVhdGVNb2RlbFJlc29sdmVyKFxuICAgICAgICAgIHBhcmVudENodW5rLFxuICAgICAgICAgIHBhcmVudE9iamVjdCxcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgITEsXG4gICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgY3JlYXRlTW9kZWwsXG4gICAgICAgICAgW11cbiAgICAgICAgKSxcbiAgICAgICAgY3JlYXRlTW9kZWxSZWplY3QocGFyZW50Q2h1bmspXG4gICAgICApO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJldml2ZU1vZGVsKHJlc3BvbnNlLCBwYXJlbnRPYmosIHBhcmVudEtleSwgdmFsdWUsIHJlZmVyZW5jZSkge1xuICAgICAgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiB2YWx1ZSlcbiAgICAgICAgcmV0dXJuIHBhcnNlTW9kZWxTdHJpbmcoXG4gICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgcGFyZW50T2JqLFxuICAgICAgICAgIHBhcmVudEtleSxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICByZWZlcmVuY2VcbiAgICAgICAgKTtcbiAgICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgdmFsdWUgJiYgbnVsbCAhPT0gdmFsdWUpXG4gICAgICAgIGlmIChcbiAgICAgICAgICAodm9pZCAwICE9PSByZWZlcmVuY2UgJiZcbiAgICAgICAgICAgIHZvaWQgMCAhPT0gcmVzcG9uc2UuX3RlbXBvcmFyeVJlZmVyZW5jZXMgJiZcbiAgICAgICAgICAgIHJlc3BvbnNlLl90ZW1wb3JhcnlSZWZlcmVuY2VzLnNldCh2YWx1ZSwgcmVmZXJlbmNlKSxcbiAgICAgICAgICBBcnJheS5pc0FycmF5KHZhbHVlKSlcbiAgICAgICAgKVxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICB2YWx1ZVtpXSA9IHJldml2ZU1vZGVsKFxuICAgICAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgIFwiXCIgKyBpLFxuICAgICAgICAgICAgICB2YWx1ZVtpXSxcbiAgICAgICAgICAgICAgdm9pZCAwICE9PSByZWZlcmVuY2UgPyByZWZlcmVuY2UgKyBcIjpcIiArIGkgOiB2b2lkIDBcbiAgICAgICAgICAgICk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBmb3IgKGkgaW4gdmFsdWUpXG4gICAgICAgICAgICBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBpKSAmJlxuICAgICAgICAgICAgICAoKHBhcmVudE9iaiA9XG4gICAgICAgICAgICAgICAgdm9pZCAwICE9PSByZWZlcmVuY2UgJiYgLTEgPT09IGkuaW5kZXhPZihcIjpcIilcbiAgICAgICAgICAgICAgICAgID8gcmVmZXJlbmNlICsgXCI6XCIgKyBpXG4gICAgICAgICAgICAgICAgICA6IHZvaWQgMCksXG4gICAgICAgICAgICAgIChwYXJlbnRPYmogPSByZXZpdmVNb2RlbChcbiAgICAgICAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIHZhbHVlW2ldLFxuICAgICAgICAgICAgICAgIHBhcmVudE9ialxuICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgdm9pZCAwICE9PSBwYXJlbnRPYmogPyAodmFsdWVbaV0gPSBwYXJlbnRPYmopIDogZGVsZXRlIHZhbHVlW2ldKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZU1vZGVsQ2h1bmsoY2h1bmspIHtcbiAgICAgIHZhciBwcmV2Q2h1bmsgPSBpbml0aWFsaXppbmdDaHVuayxcbiAgICAgICAgcHJldkJsb2NrZWQgPSBpbml0aWFsaXppbmdDaHVua0Jsb2NrZWRNb2RlbDtcbiAgICAgIGluaXRpYWxpemluZ0NodW5rID0gY2h1bms7XG4gICAgICBpbml0aWFsaXppbmdDaHVua0Jsb2NrZWRNb2RlbCA9IG51bGw7XG4gICAgICB2YXIgcm9vdFJlZmVyZW5jZSA9XG4gICAgICAgICAgLTEgPT09IGNodW5rLnJlYXNvbiA/IHZvaWQgMCA6IGNodW5rLnJlYXNvbi50b1N0cmluZygxNiksXG4gICAgICAgIHJlc29sdmVkTW9kZWwgPSBjaHVuay52YWx1ZTtcbiAgICAgIGNodW5rLnN0YXR1cyA9IFwiY3ljbGljXCI7XG4gICAgICBjaHVuay52YWx1ZSA9IG51bGw7XG4gICAgICBjaHVuay5yZWFzb24gPSBudWxsO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHJhd01vZGVsID0gSlNPTi5wYXJzZShyZXNvbHZlZE1vZGVsKSxcbiAgICAgICAgICB2YWx1ZSA9IHJldml2ZU1vZGVsKFxuICAgICAgICAgICAgY2h1bmsuX3Jlc3BvbnNlLFxuICAgICAgICAgICAgeyBcIlwiOiByYXdNb2RlbCB9LFxuICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIHJhd01vZGVsLFxuICAgICAgICAgICAgcm9vdFJlZmVyZW5jZVxuICAgICAgICAgICk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBudWxsICE9PSBpbml0aWFsaXppbmdDaHVua0Jsb2NrZWRNb2RlbCAmJlxuICAgICAgICAgIDAgPCBpbml0aWFsaXppbmdDaHVua0Jsb2NrZWRNb2RlbC5kZXBzXG4gICAgICAgIClcbiAgICAgICAgICAoaW5pdGlhbGl6aW5nQ2h1bmtCbG9ja2VkTW9kZWwudmFsdWUgPSB2YWx1ZSksXG4gICAgICAgICAgICAoY2h1bmsuc3RhdHVzID0gXCJibG9ja2VkXCIpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgcmVzb2x2ZUxpc3RlbmVycyA9IGNodW5rLnZhbHVlO1xuICAgICAgICAgIGNodW5rLnN0YXR1cyA9IFwiZnVsZmlsbGVkXCI7XG4gICAgICAgICAgY2h1bmsudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICBudWxsICE9PSByZXNvbHZlTGlzdGVuZXJzICYmIHdha2VDaHVuayhyZXNvbHZlTGlzdGVuZXJzLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIChjaHVuay5zdGF0dXMgPSBcInJlamVjdGVkXCIpLCAoY2h1bmsucmVhc29uID0gZXJyb3IpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgKGluaXRpYWxpemluZ0NodW5rID0gcHJldkNodW5rKSxcbiAgICAgICAgICAoaW5pdGlhbGl6aW5nQ2h1bmtCbG9ja2VkTW9kZWwgPSBwcmV2QmxvY2tlZCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlcG9ydEdsb2JhbEVycm9yKHJlc3BvbnNlLCBlcnJvcikge1xuICAgICAgcmVzcG9uc2UuX2Nsb3NlZCA9ICEwO1xuICAgICAgcmVzcG9uc2UuX2Nsb3NlZFJlYXNvbiA9IGVycm9yO1xuICAgICAgcmVzcG9uc2UuX2NodW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgICBcInBlbmRpbmdcIiA9PT0gY2h1bmsuc3RhdHVzICYmIHRyaWdnZXJFcnJvck9uQ2h1bmsoY2h1bmssIGVycm9yKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRDaHVuayhyZXNwb25zZSwgaWQpIHtcbiAgICAgIHZhciBjaHVua3MgPSByZXNwb25zZS5fY2h1bmtzLFxuICAgICAgICBjaHVuayA9IGNodW5rcy5nZXQoaWQpO1xuICAgICAgY2h1bmsgfHxcbiAgICAgICAgKChjaHVuayA9IHJlc3BvbnNlLl9mb3JtRGF0YS5nZXQocmVzcG9uc2UuX3ByZWZpeCArIGlkKSksXG4gICAgICAgIChjaHVuayA9XG4gICAgICAgICAgbnVsbCAhPSBjaHVua1xuICAgICAgICAgICAgPyBuZXcgQ2h1bmsoXCJyZXNvbHZlZF9tb2RlbFwiLCBjaHVuaywgaWQsIHJlc3BvbnNlKVxuICAgICAgICAgICAgOiByZXNwb25zZS5fY2xvc2VkXG4gICAgICAgICAgICAgID8gbmV3IENodW5rKFwicmVqZWN0ZWRcIiwgbnVsbCwgcmVzcG9uc2UuX2Nsb3NlZFJlYXNvbiwgcmVzcG9uc2UpXG4gICAgICAgICAgICAgIDogY3JlYXRlUGVuZGluZ0NodW5rKHJlc3BvbnNlKSksXG4gICAgICAgIGNodW5rcy5zZXQoaWQsIGNodW5rKSk7XG4gICAgICByZXR1cm4gY2h1bms7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZU1vZGVsUmVzb2x2ZXIoXG4gICAgICBjaHVuayxcbiAgICAgIHBhcmVudE9iamVjdCxcbiAgICAgIGtleSxcbiAgICAgIGN5Y2xpYyxcbiAgICAgIHJlc3BvbnNlLFxuICAgICAgbWFwLFxuICAgICAgcGF0aFxuICAgICkge1xuICAgICAgaWYgKGluaXRpYWxpemluZ0NodW5rQmxvY2tlZE1vZGVsKSB7XG4gICAgICAgIHZhciBibG9ja2VkID0gaW5pdGlhbGl6aW5nQ2h1bmtCbG9ja2VkTW9kZWw7XG4gICAgICAgIGN5Y2xpYyB8fCBibG9ja2VkLmRlcHMrKztcbiAgICAgIH0gZWxzZVxuICAgICAgICBibG9ja2VkID0gaW5pdGlhbGl6aW5nQ2h1bmtCbG9ja2VkTW9kZWwgPSB7XG4gICAgICAgICAgZGVwczogY3ljbGljID8gMCA6IDEsXG4gICAgICAgICAgdmFsdWU6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB2YWx1ZSA9IHZhbHVlW3BhdGhbaV1dO1xuICAgICAgICBwYXJlbnRPYmplY3Rba2V5XSA9IG1hcChyZXNwb25zZSwgdmFsdWUpO1xuICAgICAgICBcIlwiID09PSBrZXkgJiZcbiAgICAgICAgICBudWxsID09PSBibG9ja2VkLnZhbHVlICYmXG4gICAgICAgICAgKGJsb2NrZWQudmFsdWUgPSBwYXJlbnRPYmplY3Rba2V5XSk7XG4gICAgICAgIGJsb2NrZWQuZGVwcy0tO1xuICAgICAgICAwID09PSBibG9ja2VkLmRlcHMgJiZcbiAgICAgICAgICBcImJsb2NrZWRcIiA9PT0gY2h1bmsuc3RhdHVzICYmXG4gICAgICAgICAgKCh2YWx1ZSA9IGNodW5rLnZhbHVlKSxcbiAgICAgICAgICAoY2h1bmsuc3RhdHVzID0gXCJmdWxmaWxsZWRcIiksXG4gICAgICAgICAgKGNodW5rLnZhbHVlID0gYmxvY2tlZC52YWx1ZSksXG4gICAgICAgICAgbnVsbCAhPT0gdmFsdWUgJiYgd2FrZUNodW5rKHZhbHVlLCBibG9ja2VkLnZhbHVlKSk7XG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVNb2RlbFJlamVjdChjaHVuaykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICByZXR1cm4gdHJpZ2dlckVycm9yT25DaHVuayhjaHVuaywgZXJyb3IpO1xuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0T3V0bGluZWRNb2RlbChyZXNwb25zZSwgcmVmZXJlbmNlLCBwYXJlbnRPYmplY3QsIGtleSwgbWFwKSB7XG4gICAgICByZWZlcmVuY2UgPSByZWZlcmVuY2Uuc3BsaXQoXCI6XCIpO1xuICAgICAgdmFyIGlkID0gcGFyc2VJbnQocmVmZXJlbmNlWzBdLCAxNik7XG4gICAgICBpZCA9IGdldENodW5rKHJlc3BvbnNlLCBpZCk7XG4gICAgICBzd2l0Y2ggKGlkLnN0YXR1cykge1xuICAgICAgICBjYXNlIFwicmVzb2x2ZWRfbW9kZWxcIjpcbiAgICAgICAgICBpbml0aWFsaXplTW9kZWxDaHVuayhpZCk7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGlkLnN0YXR1cykge1xuICAgICAgICBjYXNlIFwiZnVsZmlsbGVkXCI6XG4gICAgICAgICAgcGFyZW50T2JqZWN0ID0gaWQudmFsdWU7XG4gICAgICAgICAgZm9yIChrZXkgPSAxOyBrZXkgPCByZWZlcmVuY2UubGVuZ3RoOyBrZXkrKylcbiAgICAgICAgICAgIHBhcmVudE9iamVjdCA9IHBhcmVudE9iamVjdFtyZWZlcmVuY2Vba2V5XV07XG4gICAgICAgICAgcmV0dXJuIG1hcChyZXNwb25zZSwgcGFyZW50T2JqZWN0KTtcbiAgICAgICAgY2FzZSBcInBlbmRpbmdcIjpcbiAgICAgICAgY2FzZSBcImJsb2NrZWRcIjpcbiAgICAgICAgY2FzZSBcImN5Y2xpY1wiOlxuICAgICAgICAgIHZhciBwYXJlbnRDaHVuayA9IGluaXRpYWxpemluZ0NodW5rO1xuICAgICAgICAgIGlkLnRoZW4oXG4gICAgICAgICAgICBjcmVhdGVNb2RlbFJlc29sdmVyKFxuICAgICAgICAgICAgICBwYXJlbnRDaHVuayxcbiAgICAgICAgICAgICAgcGFyZW50T2JqZWN0LFxuICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgIFwiY3ljbGljXCIgPT09IGlkLnN0YXR1cyxcbiAgICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICAgIG1hcCxcbiAgICAgICAgICAgICAgcmVmZXJlbmNlXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgY3JlYXRlTW9kZWxSZWplY3QocGFyZW50Q2h1bmspXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBpZC5yZWFzb247XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZU1hcChyZXNwb25zZSwgbW9kZWwpIHtcbiAgICAgIHJldHVybiBuZXcgTWFwKG1vZGVsKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlU2V0KHJlc3BvbnNlLCBtb2RlbCkge1xuICAgICAgcmV0dXJuIG5ldyBTZXQobW9kZWwpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBleHRyYWN0SXRlcmF0b3IocmVzcG9uc2UsIG1vZGVsKSB7XG4gICAgICByZXR1cm4gbW9kZWxbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVNb2RlbChyZXNwb25zZSwgbW9kZWwpIHtcbiAgICAgIHJldHVybiBtb2RlbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGFyc2VUeXBlZEFycmF5KFxuICAgICAgcmVzcG9uc2UsXG4gICAgICByZWZlcmVuY2UsXG4gICAgICBjb25zdHJ1Y3RvcixcbiAgICAgIGJ5dGVzUGVyRWxlbWVudCxcbiAgICAgIHBhcmVudE9iamVjdCxcbiAgICAgIHBhcmVudEtleVxuICAgICkge1xuICAgICAgcmVmZXJlbmNlID0gcGFyc2VJbnQocmVmZXJlbmNlLnNsaWNlKDIpLCAxNik7XG4gICAgICByZWZlcmVuY2UgPSByZXNwb25zZS5fZm9ybURhdGEuZ2V0KHJlc3BvbnNlLl9wcmVmaXggKyByZWZlcmVuY2UpO1xuICAgICAgcmVmZXJlbmNlID1cbiAgICAgICAgY29uc3RydWN0b3IgPT09IEFycmF5QnVmZmVyXG4gICAgICAgICAgPyByZWZlcmVuY2UuYXJyYXlCdWZmZXIoKVxuICAgICAgICAgIDogcmVmZXJlbmNlLmFycmF5QnVmZmVyKCkudGhlbihmdW5jdGlvbiAoYnVmZmVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgY29uc3RydWN0b3IoYnVmZmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgYnl0ZXNQZXJFbGVtZW50ID0gaW5pdGlhbGl6aW5nQ2h1bms7XG4gICAgICByZWZlcmVuY2UudGhlbihcbiAgICAgICAgY3JlYXRlTW9kZWxSZXNvbHZlcihcbiAgICAgICAgICBieXRlc1BlckVsZW1lbnQsXG4gICAgICAgICAgcGFyZW50T2JqZWN0LFxuICAgICAgICAgIHBhcmVudEtleSxcbiAgICAgICAgICAhMSxcbiAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICBjcmVhdGVNb2RlbCxcbiAgICAgICAgICBbXVxuICAgICAgICApLFxuICAgICAgICBjcmVhdGVNb2RlbFJlamVjdChieXRlc1BlckVsZW1lbnQpXG4gICAgICApO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc29sdmVTdHJlYW0ocmVzcG9uc2UsIGlkLCBzdHJlYW0sIGNvbnRyb2xsZXIpIHtcbiAgICAgIHZhciBjaHVua3MgPSByZXNwb25zZS5fY2h1bmtzO1xuICAgICAgc3RyZWFtID0gbmV3IENodW5rKFwiZnVsZmlsbGVkXCIsIHN0cmVhbSwgY29udHJvbGxlciwgcmVzcG9uc2UpO1xuICAgICAgY2h1bmtzLnNldChpZCwgc3RyZWFtKTtcbiAgICAgIHJlc3BvbnNlID0gcmVzcG9uc2UuX2Zvcm1EYXRhLmdldEFsbChyZXNwb25zZS5fcHJlZml4ICsgaWQpO1xuICAgICAgZm9yIChpZCA9IDA7IGlkIDwgcmVzcG9uc2UubGVuZ3RoOyBpZCsrKVxuICAgICAgICAoY2h1bmtzID0gcmVzcG9uc2VbaWRdKSxcbiAgICAgICAgICBcIkNcIiA9PT0gY2h1bmtzWzBdXG4gICAgICAgICAgICA/IGNvbnRyb2xsZXIuY2xvc2UoXG4gICAgICAgICAgICAgICAgXCJDXCIgPT09IGNodW5rcyA/ICdcIiR1bmRlZmluZWRcIicgOiBjaHVua3Muc2xpY2UoMSlcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgOiBjb250cm9sbGVyLmVucXVldWVNb2RlbChjaHVua3MpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwYXJzZVJlYWRhYmxlU3RyZWFtKHJlc3BvbnNlLCByZWZlcmVuY2UsIHR5cGUpIHtcbiAgICAgIHJlZmVyZW5jZSA9IHBhcnNlSW50KHJlZmVyZW5jZS5zbGljZSgyKSwgMTYpO1xuICAgICAgdmFyIGNvbnRyb2xsZXIgPSBudWxsO1xuICAgICAgdHlwZSA9IG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbiAoYykge1xuICAgICAgICAgIGNvbnRyb2xsZXIgPSBjO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHZhciBwcmV2aW91c0Jsb2NrZWRDaHVuayA9IG51bGw7XG4gICAgICByZXNvbHZlU3RyZWFtKHJlc3BvbnNlLCByZWZlcmVuY2UsIHR5cGUsIHtcbiAgICAgICAgZW5xdWV1ZU1vZGVsOiBmdW5jdGlvbiAoanNvbikge1xuICAgICAgICAgIGlmIChudWxsID09PSBwcmV2aW91c0Jsb2NrZWRDaHVuaykge1xuICAgICAgICAgICAgdmFyIGNodW5rID0gbmV3IENodW5rKFwicmVzb2x2ZWRfbW9kZWxcIiwganNvbiwgLTEsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIGluaXRpYWxpemVNb2RlbENodW5rKGNodW5rKTtcbiAgICAgICAgICAgIFwiZnVsZmlsbGVkXCIgPT09IGNodW5rLnN0YXR1c1xuICAgICAgICAgICAgICA/IGNvbnRyb2xsZXIuZW5xdWV1ZShjaHVuay52YWx1ZSlcbiAgICAgICAgICAgICAgOiAoY2h1bmsudGhlbihcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250cm9sbGVyLmVucXVldWUodik7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRyb2xsZXIuZXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAocHJldmlvdXNCbG9ja2VkQ2h1bmsgPSBjaHVuaykpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaHVuayA9IHByZXZpb3VzQmxvY2tlZENodW5rO1xuICAgICAgICAgICAgdmFyIF9jaHVuayA9IGNyZWF0ZVBlbmRpbmdDaHVuayhyZXNwb25zZSk7XG4gICAgICAgICAgICBfY2h1bmsudGhlbihcbiAgICAgICAgICAgICAgZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udHJvbGxlci5lbnF1ZXVlKHYpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250cm9sbGVyLmVycm9yKGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcHJldmlvdXNCbG9ja2VkQ2h1bmsgPSBfY2h1bms7XG4gICAgICAgICAgICBjaHVuay50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcHJldmlvdXNCbG9ja2VkQ2h1bmsgPT09IF9jaHVuayAmJiAocHJldmlvdXNCbG9ja2VkQ2h1bmsgPSBudWxsKTtcbiAgICAgICAgICAgICAgcmVzb2x2ZU1vZGVsQ2h1bmsoX2NodW5rLCBqc29uLCAtMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKG51bGwgPT09IHByZXZpb3VzQmxvY2tlZENodW5rKSBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgYmxvY2tlZENodW5rID0gcHJldmlvdXNCbG9ja2VkQ2h1bms7XG4gICAgICAgICAgICBwcmV2aW91c0Jsb2NrZWRDaHVuayA9IG51bGw7XG4gICAgICAgICAgICBibG9ja2VkQ2h1bmsudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICBpZiAobnVsbCA9PT0gcHJldmlvdXNCbG9ja2VkQ2h1bmspIGNvbnRyb2xsZXIuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGJsb2NrZWRDaHVuayA9IHByZXZpb3VzQmxvY2tlZENodW5rO1xuICAgICAgICAgICAgcHJldmlvdXNCbG9ja2VkQ2h1bmsgPSBudWxsO1xuICAgICAgICAgICAgYmxvY2tlZENodW5rLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gY29udHJvbGxlci5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFzeW5jSXRlcmF0b3IoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlSXRlcmF0b3IobmV4dCkge1xuICAgICAgbmV4dCA9IHsgbmV4dDogbmV4dCB9O1xuICAgICAgbmV4dFtBU1lOQ19JVEVSQVRPUl0gPSBhc3luY0l0ZXJhdG9yO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlQXN5bmNJdGVyYWJsZShyZXNwb25zZSwgcmVmZXJlbmNlLCBpdGVyYXRvcikge1xuICAgICAgcmVmZXJlbmNlID0gcGFyc2VJbnQocmVmZXJlbmNlLnNsaWNlKDIpLCAxNik7XG4gICAgICB2YXIgYnVmZmVyID0gW10sXG4gICAgICAgIGNsb3NlZCA9ICExLFxuICAgICAgICBuZXh0V3JpdGVJbmRleCA9IDAsXG4gICAgICAgIGl0ZXJhYmxlID0gX2RlZmluZVByb3BlcnR5KHt9LCBBU1lOQ19JVEVSQVRPUiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBuZXh0UmVhZEluZGV4ID0gMDtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlSXRlcmF0b3IoZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gYXJnKVxuICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgICAgICAgICBcIlZhbHVlcyBjYW5ub3QgYmUgcGFzc2VkIHRvIG5leHQoKSBvZiBBc3luY0l0ZXJhYmxlcyBwYXNzZWQgdG8gQ2xpZW50IENvbXBvbmVudHMuXCJcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChuZXh0UmVhZEluZGV4ID09PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGlmIChjbG9zZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDaHVuayhcbiAgICAgICAgICAgICAgICAgIFwiZnVsZmlsbGVkXCIsXG4gICAgICAgICAgICAgICAgICB7IGRvbmU6ICEwLCB2YWx1ZTogdm9pZCAwIH0sXG4gICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgcmVzcG9uc2VcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBidWZmZXJbbmV4dFJlYWRJbmRleF0gPSBjcmVhdGVQZW5kaW5nQ2h1bmsocmVzcG9uc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcltuZXh0UmVhZEluZGV4KytdO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIGl0ZXJhdG9yID0gaXRlcmF0b3IgPyBpdGVyYWJsZVtBU1lOQ19JVEVSQVRPUl0oKSA6IGl0ZXJhYmxlO1xuICAgICAgcmVzb2x2ZVN0cmVhbShyZXNwb25zZSwgcmVmZXJlbmNlLCBpdGVyYXRvciwge1xuICAgICAgICBlbnF1ZXVlTW9kZWw6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIG5leHRXcml0ZUluZGV4ID09PSBidWZmZXIubGVuZ3RoXG4gICAgICAgICAgICA/IChidWZmZXJbbmV4dFdyaXRlSW5kZXhdID0gY3JlYXRlUmVzb2x2ZWRJdGVyYXRvclJlc3VsdENodW5rKFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLFxuICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICExXG4gICAgICAgICAgICAgICkpXG4gICAgICAgICAgICA6IHJlc29sdmVJdGVyYXRvclJlc3VsdENodW5rKGJ1ZmZlcltuZXh0V3JpdGVJbmRleF0sIHZhbHVlLCAhMSk7XG4gICAgICAgICAgbmV4dFdyaXRlSW5kZXgrKztcbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2U6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGNsb3NlZCA9ICEwO1xuICAgICAgICAgIG5leHRXcml0ZUluZGV4ID09PSBidWZmZXIubGVuZ3RoXG4gICAgICAgICAgICA/IChidWZmZXJbbmV4dFdyaXRlSW5kZXhdID0gY3JlYXRlUmVzb2x2ZWRJdGVyYXRvclJlc3VsdENodW5rKFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLFxuICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICEwXG4gICAgICAgICAgICAgICkpXG4gICAgICAgICAgICA6IHJlc29sdmVJdGVyYXRvclJlc3VsdENodW5rKGJ1ZmZlcltuZXh0V3JpdGVJbmRleF0sIHZhbHVlLCAhMCk7XG4gICAgICAgICAgZm9yIChuZXh0V3JpdGVJbmRleCsrOyBuZXh0V3JpdGVJbmRleCA8IGJ1ZmZlci5sZW5ndGg7IClcbiAgICAgICAgICAgIHJlc29sdmVJdGVyYXRvclJlc3VsdENodW5rKFxuICAgICAgICAgICAgICBidWZmZXJbbmV4dFdyaXRlSW5kZXgrK10sXG4gICAgICAgICAgICAgICdcIiR1bmRlZmluZWRcIicsXG4gICAgICAgICAgICAgICEwXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgY2xvc2VkID0gITA7XG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIG5leHRXcml0ZUluZGV4ID09PSBidWZmZXIubGVuZ3RoICYmXG4gICAgICAgICAgICAoYnVmZmVyW25leHRXcml0ZUluZGV4XSA9IGNyZWF0ZVBlbmRpbmdDaHVuayhyZXNwb25zZSkpO1xuICAgICAgICAgICAgbmV4dFdyaXRlSW5kZXggPCBidWZmZXIubGVuZ3RoO1xuXG4gICAgICAgICAgKVxuICAgICAgICAgICAgdHJpZ2dlckVycm9yT25DaHVuayhidWZmZXJbbmV4dFdyaXRlSW5kZXgrK10sIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlTW9kZWxTdHJpbmcocmVzcG9uc2UsIG9iaiwga2V5LCB2YWx1ZSwgcmVmZXJlbmNlKSB7XG4gICAgICBpZiAoXCIkXCIgPT09IHZhbHVlWzBdKSB7XG4gICAgICAgIHN3aXRjaCAodmFsdWVbMV0pIHtcbiAgICAgICAgICBjYXNlIFwiJFwiOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnNsaWNlKDEpO1xuICAgICAgICAgIGNhc2UgXCJAXCI6XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAob2JqID0gcGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIDE2KSksIGdldENodW5rKHJlc3BvbnNlLCBvYmopXG4gICAgICAgICAgICApO1xuICAgICAgICAgIGNhc2UgXCJGXCI6XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAodmFsdWUgPSB2YWx1ZS5zbGljZSgyKSksXG4gICAgICAgICAgICAgICh2YWx1ZSA9IGdldE91dGxpbmVkTW9kZWwoXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgb2JqLFxuICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICBjcmVhdGVNb2RlbFxuICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgbG9hZFNlcnZlclJlZmVyZW5jZSQxKFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLFxuICAgICAgICAgICAgICAgIHZhbHVlLmlkLFxuICAgICAgICAgICAgICAgIHZhbHVlLmJvdW5kLFxuICAgICAgICAgICAgICAgIGluaXRpYWxpemluZ0NodW5rLFxuICAgICAgICAgICAgICAgIG9iaixcbiAgICAgICAgICAgICAgICBrZXlcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICBjYXNlIFwiVFwiOlxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICB2b2lkIDAgPT09IHJlZmVyZW5jZSB8fFxuICAgICAgICAgICAgICB2b2lkIDAgPT09IHJlc3BvbnNlLl90ZW1wb3JhcnlSZWZlcmVuY2VzXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgICAgIFwiQ291bGQgbm90IHJlZmVyZW5jZSBhbiBvcGFxdWUgdGVtcG9yYXJ5IHJlZmVyZW5jZS4gVGhpcyBpcyBsaWtlbHkgZHVlIHRvIG1pc2NvbmZpZ3VyaW5nIHRoZSB0ZW1wb3JhcnlSZWZlcmVuY2VzIG9wdGlvbnMgb24gdGhlIHNlcnZlci5cIlxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVRlbXBvcmFyeVJlZmVyZW5jZShcbiAgICAgICAgICAgICAgcmVzcG9uc2UuX3RlbXBvcmFyeVJlZmVyZW5jZXMsXG4gICAgICAgICAgICAgIHJlZmVyZW5jZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICBjYXNlIFwiUVwiOlxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgKHZhbHVlID0gdmFsdWUuc2xpY2UoMikpLFxuICAgICAgICAgICAgICBnZXRPdXRsaW5lZE1vZGVsKHJlc3BvbnNlLCB2YWx1ZSwgb2JqLCBrZXksIGNyZWF0ZU1hcClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgY2FzZSBcIldcIjpcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICh2YWx1ZSA9IHZhbHVlLnNsaWNlKDIpKSxcbiAgICAgICAgICAgICAgZ2V0T3V0bGluZWRNb2RlbChyZXNwb25zZSwgdmFsdWUsIG9iaiwga2V5LCBjcmVhdGVTZXQpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIGNhc2UgXCJLXCI6XG4gICAgICAgICAgICBvYmogPSB2YWx1ZS5zbGljZSgyKTtcbiAgICAgICAgICAgIHZhciBmb3JtUHJlZml4ID0gcmVzcG9uc2UuX3ByZWZpeCArIG9iaiArIFwiX1wiLFxuICAgICAgICAgICAgICBkYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgICAgICByZXNwb25zZS5fZm9ybURhdGEuZm9yRWFjaChmdW5jdGlvbiAoZW50cnksIGVudHJ5S2V5KSB7XG4gICAgICAgICAgICAgIGVudHJ5S2V5LnN0YXJ0c1dpdGgoZm9ybVByZWZpeCkgJiZcbiAgICAgICAgICAgICAgICBkYXRhLmFwcGVuZChlbnRyeUtleS5zbGljZShmb3JtUHJlZml4Lmxlbmd0aCksIGVudHJ5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgY2FzZSBcImlcIjpcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICh2YWx1ZSA9IHZhbHVlLnNsaWNlKDIpKSxcbiAgICAgICAgICAgICAgZ2V0T3V0bGluZWRNb2RlbChyZXNwb25zZSwgdmFsdWUsIG9iaiwga2V5LCBleHRyYWN0SXRlcmF0b3IpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIGNhc2UgXCJJXCI6XG4gICAgICAgICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgICAgICAgY2FzZSBcIi1cIjpcbiAgICAgICAgICAgIHJldHVybiBcIiQtMFwiID09PSB2YWx1ZSA/IC0wIDogLUluZmluaXR5O1xuICAgICAgICAgIGNhc2UgXCJOXCI6XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICAgIGNhc2UgXCJ1XCI6XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgY2FzZSBcIkRcIjpcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShEYXRlLnBhcnNlKHZhbHVlLnNsaWNlKDIpKSk7XG4gICAgICAgICAgY2FzZSBcIm5cIjpcbiAgICAgICAgICAgIHJldHVybiBCaWdJbnQodmFsdWUuc2xpY2UoMikpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodmFsdWVbMV0pIHtcbiAgICAgICAgICBjYXNlIFwiQVwiOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlVHlwZWRBcnJheShyZXNwb25zZSwgdmFsdWUsIEFycmF5QnVmZmVyLCAxLCBvYmosIGtleSk7XG4gICAgICAgICAgY2FzZSBcIk9cIjpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZVR5cGVkQXJyYXkocmVzcG9uc2UsIHZhbHVlLCBJbnQ4QXJyYXksIDEsIG9iaiwga2V5KTtcbiAgICAgICAgICBjYXNlIFwib1wiOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlVHlwZWRBcnJheShyZXNwb25zZSwgdmFsdWUsIFVpbnQ4QXJyYXksIDEsIG9iaiwga2V5KTtcbiAgICAgICAgICBjYXNlIFwiVVwiOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlVHlwZWRBcnJheShcbiAgICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICBVaW50OENsYW1wZWRBcnJheSxcbiAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgb2JqLFxuICAgICAgICAgICAgICBrZXlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgY2FzZSBcIlNcIjpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZVR5cGVkQXJyYXkocmVzcG9uc2UsIHZhbHVlLCBJbnQxNkFycmF5LCAyLCBvYmosIGtleSk7XG4gICAgICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZVR5cGVkQXJyYXkocmVzcG9uc2UsIHZhbHVlLCBVaW50MTZBcnJheSwgMiwgb2JqLCBrZXkpO1xuICAgICAgICAgIGNhc2UgXCJMXCI6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VUeXBlZEFycmF5KHJlc3BvbnNlLCB2YWx1ZSwgSW50MzJBcnJheSwgNCwgb2JqLCBrZXkpO1xuICAgICAgICAgIGNhc2UgXCJsXCI6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VUeXBlZEFycmF5KHJlc3BvbnNlLCB2YWx1ZSwgVWludDMyQXJyYXksIDQsIG9iaiwga2V5KTtcbiAgICAgICAgICBjYXNlIFwiR1wiOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlVHlwZWRBcnJheShyZXNwb25zZSwgdmFsdWUsIEZsb2F0MzJBcnJheSwgNCwgb2JqLCBrZXkpO1xuICAgICAgICAgIGNhc2UgXCJnXCI6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VUeXBlZEFycmF5KHJlc3BvbnNlLCB2YWx1ZSwgRmxvYXQ2NEFycmF5LCA4LCBvYmosIGtleSk7XG4gICAgICAgICAgY2FzZSBcIk1cIjpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZVR5cGVkQXJyYXkocmVzcG9uc2UsIHZhbHVlLCBCaWdJbnQ2NEFycmF5LCA4LCBvYmosIGtleSk7XG4gICAgICAgICAgY2FzZSBcIm1cIjpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZVR5cGVkQXJyYXkoXG4gICAgICAgICAgICAgIHJlc3BvbnNlLFxuICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgQmlnVWludDY0QXJyYXksXG4gICAgICAgICAgICAgIDgsXG4gICAgICAgICAgICAgIG9iaixcbiAgICAgICAgICAgICAga2V5XG4gICAgICAgICAgICApO1xuICAgICAgICAgIGNhc2UgXCJWXCI6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VUeXBlZEFycmF5KHJlc3BvbnNlLCB2YWx1ZSwgRGF0YVZpZXcsIDEsIG9iaiwga2V5KTtcbiAgICAgICAgICBjYXNlIFwiQlwiOlxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgKG9iaiA9IHBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCAxNikpLFxuICAgICAgICAgICAgICByZXNwb25zZS5fZm9ybURhdGEuZ2V0KHJlc3BvbnNlLl9wcmVmaXggKyBvYmopXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodmFsdWVbMV0pIHtcbiAgICAgICAgICBjYXNlIFwiUlwiOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlUmVhZGFibGVTdHJlYW0ocmVzcG9uc2UsIHZhbHVlLCB2b2lkIDApO1xuICAgICAgICAgIGNhc2UgXCJyXCI6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VSZWFkYWJsZVN0cmVhbShyZXNwb25zZSwgdmFsdWUsIFwiYnl0ZXNcIik7XG4gICAgICAgICAgY2FzZSBcIlhcIjpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUFzeW5jSXRlcmFibGUocmVzcG9uc2UsIHZhbHVlLCAhMSk7XG4gICAgICAgICAgY2FzZSBcInhcIjpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUFzeW5jSXRlcmFibGUocmVzcG9uc2UsIHZhbHVlLCAhMCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgxKTtcbiAgICAgICAgcmV0dXJuIGdldE91dGxpbmVkTW9kZWwocmVzcG9uc2UsIHZhbHVlLCBvYmosIGtleSwgY3JlYXRlTW9kZWwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVSZXNwb25zZShcbiAgICAgIGJ1bmRsZXJDb25maWcsXG4gICAgICBmb3JtRmllbGRQcmVmaXgsXG4gICAgICB0ZW1wb3JhcnlSZWZlcmVuY2VzXG4gICAgKSB7XG4gICAgICB2YXIgYmFja2luZ0Zvcm1EYXRhID1cbiAgICAgICAgICAzIDwgYXJndW1lbnRzLmxlbmd0aCAmJiB2b2lkIDAgIT09IGFyZ3VtZW50c1szXVxuICAgICAgICAgICAgPyBhcmd1bWVudHNbM11cbiAgICAgICAgICAgIDogbmV3IEZvcm1EYXRhKCksXG4gICAgICAgIGNodW5rcyA9IG5ldyBNYXAoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIF9idW5kbGVyQ29uZmlnOiBidW5kbGVyQ29uZmlnLFxuICAgICAgICBfcHJlZml4OiBmb3JtRmllbGRQcmVmaXgsXG4gICAgICAgIF9mb3JtRGF0YTogYmFja2luZ0Zvcm1EYXRhLFxuICAgICAgICBfY2h1bmtzOiBjaHVua3MsXG4gICAgICAgIF9jbG9zZWQ6ICExLFxuICAgICAgICBfY2xvc2VkUmVhc29uOiBudWxsLFxuICAgICAgICBfdGVtcG9yYXJ5UmVmZXJlbmNlczogdGVtcG9yYXJ5UmVmZXJlbmNlc1xuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2xvc2UocmVzcG9uc2UpIHtcbiAgICAgIHJlcG9ydEdsb2JhbEVycm9yKHJlc3BvbnNlLCBFcnJvcihcIkNvbm5lY3Rpb24gY2xvc2VkLlwiKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxvYWRTZXJ2ZXJSZWZlcmVuY2UoYnVuZGxlckNvbmZpZywgaWQsIGJvdW5kKSB7XG4gICAgICB2YXIgc2VydmVyUmVmZXJlbmNlID0gcmVzb2x2ZVNlcnZlclJlZmVyZW5jZShidW5kbGVyQ29uZmlnLCBpZCk7XG4gICAgICBidW5kbGVyQ29uZmlnID0gcHJlbG9hZE1vZHVsZShzZXJ2ZXJSZWZlcmVuY2UpO1xuICAgICAgcmV0dXJuIGJvdW5kXG4gICAgICAgID8gUHJvbWlzZS5hbGwoW2JvdW5kLCBidW5kbGVyQ29uZmlnXSkudGhlbihmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgICAgX3JlZiA9IF9yZWZbMF07XG4gICAgICAgICAgICB2YXIgZm4gPSByZXF1aXJlTW9kdWxlKHNlcnZlclJlZmVyZW5jZSk7XG4gICAgICAgICAgICByZXR1cm4gZm4uYmluZC5hcHBseShmbiwgW251bGxdLmNvbmNhdChfcmVmKSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgOiBidW5kbGVyQ29uZmlnXG4gICAgICAgICAgPyBQcm9taXNlLnJlc29sdmUoYnVuZGxlckNvbmZpZykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXF1aXJlTW9kdWxlKHNlcnZlclJlZmVyZW5jZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIDogUHJvbWlzZS5yZXNvbHZlKHJlcXVpcmVNb2R1bGUoc2VydmVyUmVmZXJlbmNlKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlY29kZUJvdW5kQWN0aW9uTWV0YURhdGEoYm9keSwgc2VydmVyTWFuaWZlc3QsIGZvcm1GaWVsZFByZWZpeCkge1xuICAgICAgYm9keSA9IGNyZWF0ZVJlc3BvbnNlKHNlcnZlck1hbmlmZXN0LCBmb3JtRmllbGRQcmVmaXgsIHZvaWQgMCwgYm9keSk7XG4gICAgICBjbG9zZShib2R5KTtcbiAgICAgIGJvZHkgPSBnZXRDaHVuayhib2R5LCAwKTtcbiAgICAgIGJvZHkudGhlbihmdW5jdGlvbiAoKSB7fSk7XG4gICAgICBpZiAoXCJmdWxmaWxsZWRcIiAhPT0gYm9keS5zdGF0dXMpIHRocm93IGJvZHkucmVhc29uO1xuICAgICAgcmV0dXJuIGJvZHkudmFsdWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0YXJ0UmVhZGluZ0Zyb21EZWJ1Z0NoYW5uZWxSZWFkYWJsZVN0cmVhbShcbiAgICAgIHJlcXVlc3QkanNjb21wJDAsXG4gICAgICBzdHJlYW1cbiAgICApIHtcbiAgICAgIGZ1bmN0aW9uIHByb2dyZXNzKF9yZWYpIHtcbiAgICAgICAgdmFyIGRvbmUgPSBfcmVmLmRvbmUsXG4gICAgICAgICAgYnVmZmVyID0gX3JlZi52YWx1ZTtcbiAgICAgICAgX3JlZiA9IHN0cmluZ0J1ZmZlcjtcbiAgICAgICAgZG9uZVxuICAgICAgICAgID8gKChidWZmZXIgPSBuZXcgVWludDhBcnJheSgwKSksXG4gICAgICAgICAgICAoYnVmZmVyID0gc3RyaW5nRGVjb2Rlci5kZWNvZGUoYnVmZmVyKSkpXG4gICAgICAgICAgOiAoYnVmZmVyID0gc3RyaW5nRGVjb2Rlci5kZWNvZGUoYnVmZmVyLCBkZWNvZGVyT3B0aW9ucykpO1xuICAgICAgICBzdHJpbmdCdWZmZXIgPSBfcmVmICsgYnVmZmVyO1xuICAgICAgICBfcmVmID0gc3RyaW5nQnVmZmVyLnNwbGl0KFwiXFxuXCIpO1xuICAgICAgICBmb3IgKGJ1ZmZlciA9IDA7IGJ1ZmZlciA8IF9yZWYubGVuZ3RoIC0gMTsgYnVmZmVyKyspIHtcbiAgICAgICAgICB2YXIgcmVxdWVzdCA9IHJlcXVlc3QkanNjb21wJDAsXG4gICAgICAgICAgICBtZXNzYWdlID0gX3JlZltidWZmZXJdLFxuICAgICAgICAgICAgZGVmZXJyZWREZWJ1Z09iamVjdHMgPSByZXF1ZXN0LmRlZmVycmVkRGVidWdPYmplY3RzO1xuICAgICAgICAgIGlmIChudWxsID09PSBkZWZlcnJlZERlYnVnT2JqZWN0cylcbiAgICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgICBcInJlc29sdmVEZWJ1Z01lc3NhZ2UvY2xvc2VEZWJ1Z0NoYW5uZWwgc2hvdWxkIG5vdCBiZSBjYWxsZWQgZm9yIGEgUmVxdWVzdCB0aGF0IHdhc24ndCBrZXB0IGFsaXZlLiBUaGlzIGlzIGEgYnVnIGluIFJlYWN0LlwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgIGlmIChcIlwiID09PSBtZXNzYWdlKSBjbG9zZURlYnVnQ2hhbm5lbChyZXF1ZXN0KTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjb21tYW5kID0gbWVzc2FnZS5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2Uuc2xpY2UoMikuc3BsaXQoXCIsXCIpLm1hcChmcm9tSGV4KTtcbiAgICAgICAgICAgIHN3aXRjaCAoY29tbWFuZCkge1xuICAgICAgICAgICAgICBjYXNlIDgyOlxuICAgICAgICAgICAgICAgIGZvciAoY29tbWFuZCA9IDA7IGNvbW1hbmQgPCBtZXNzYWdlLmxlbmd0aDsgY29tbWFuZCsrKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaWQgPSBtZXNzYWdlW2NvbW1hbmRdLFxuICAgICAgICAgICAgICAgICAgICByZXRhaW5lZFZhbHVlID0gZGVmZXJyZWREZWJ1Z09iamVjdHMucmV0YWluZWQuZ2V0KGlkKTtcbiAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gcmV0YWluZWRWYWx1ZSAmJlxuICAgICAgICAgICAgICAgICAgICAocmVxdWVzdC5wZW5kaW5nRGVidWdDaHVua3MtLSxcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWREZWJ1Z09iamVjdHMucmV0YWluZWQuZGVsZXRlKGlkKSxcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWREZWJ1Z09iamVjdHMuZXhpc3RpbmcuZGVsZXRlKHJldGFpbmVkVmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICBlbnF1ZXVlRmx1c2gocmVxdWVzdCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSA4MTpcbiAgICAgICAgICAgICAgICBmb3IgKGNvbW1hbmQgPSAwOyBjb21tYW5kIDwgbWVzc2FnZS5sZW5ndGg7IGNvbW1hbmQrKylcbiAgICAgICAgICAgICAgICAgIChpZCA9IG1lc3NhZ2VbY29tbWFuZF0pLFxuICAgICAgICAgICAgICAgICAgICAocmV0YWluZWRWYWx1ZSA9IGRlZmVycmVkRGVidWdPYmplY3RzLnJldGFpbmVkLmdldChpZCkpLFxuICAgICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IHJldGFpbmVkVmFsdWUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAoZGVmZXJyZWREZWJ1Z09iamVjdHMucmV0YWluZWQuZGVsZXRlKGlkKSxcbiAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZERlYnVnT2JqZWN0cy5leGlzdGluZy5kZWxldGUocmV0YWluZWRWYWx1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgZW1pdE91dGxpbmVkRGVidWdNb2RlbENodW5rKFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBvYmplY3RMaW1pdDogMTAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldGFpbmVkVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgIGVucXVldWVGbHVzaChyZXF1ZXN0KSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgODA6XG4gICAgICAgICAgICAgICAgZm9yIChjb21tYW5kID0gMDsgY29tbWFuZCA8IG1lc3NhZ2UubGVuZ3RoOyBjb21tYW5kKyspXG4gICAgICAgICAgICAgICAgICAoaWQgPSBtZXNzYWdlW2NvbW1hbmRdKSxcbiAgICAgICAgICAgICAgICAgICAgKHJldGFpbmVkVmFsdWUgPSBkZWZlcnJlZERlYnVnT2JqZWN0cy5yZXRhaW5lZC5nZXQoaWQpKSxcbiAgICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSByZXRhaW5lZFZhbHVlICYmXG4gICAgICAgICAgICAgICAgICAgICAgKGRlZmVycmVkRGVidWdPYmplY3RzLnJldGFpbmVkLmRlbGV0ZShpZCksXG4gICAgICAgICAgICAgICAgICAgICAgZW1pdFJlcXVlc3RlZERlYnVnVGhlbmFibGUoXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IG9iamVjdExpbWl0OiAxMCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0YWluZWRWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgICAgICAgXCJVbmtub3duIGNvbW1hbmQuIFRoZSBkZWJ1Z0NoYW5uZWwgd2FzIG5vdCB3aXJlZCB1cCBwcm9wZXJseS5cIlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN0cmluZ0J1ZmZlciA9IF9yZWZbX3JlZi5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKGRvbmUpIGNsb3NlRGVidWdDaGFubmVsKHJlcXVlc3QkanNjb21wJDApO1xuICAgICAgICBlbHNlIHJldHVybiByZWFkZXIucmVhZCgpLnRoZW4ocHJvZ3Jlc3MpLmNhdGNoKGVycm9yKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGVycm9yKGUpIHtcbiAgICAgICAgYWJvcnQoXG4gICAgICAgICAgcmVxdWVzdCRqc2NvbXAkMCxcbiAgICAgICAgICBFcnJvcihcIkxvc3QgY29ubmVjdGlvbiB0byB0aGUgRGVidWcgQ2hhbm5lbC5cIiwgeyBjYXVzZTogZSB9KVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdmFyIHJlYWRlciA9IHN0cmVhbS5nZXRSZWFkZXIoKSxcbiAgICAgICAgc3RyaW5nRGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpLFxuICAgICAgICBzdHJpbmdCdWZmZXIgPSBcIlwiO1xuICAgICAgcmVhZGVyLnJlYWQoKS50aGVuKHByb2dyZXNzKS5jYXRjaChlcnJvcik7XG4gICAgfVxuICAgIHZhciBSZWFjdERPTSA9IHJlcXVpcmUoXCJyZWFjdC1kb21cIiksXG4gICAgICBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKSxcbiAgICAgIFJFQUNUX0xFR0FDWV9FTEVNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxcbiAgICAgIFJFQUNUX0VMRU1FTlRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC50cmFuc2l0aW9uYWwuZWxlbWVudFwiKSxcbiAgICAgIFJFQUNUX0ZSQUdNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksXG4gICAgICBSRUFDVF9DT05URVhUX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxcbiAgICAgIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksXG4gICAgICBSRUFDVF9TVVNQRU5TRV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLFxuICAgICAgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIiksXG4gICAgICBSRUFDVF9NRU1PX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxcbiAgICAgIFJFQUNUX0xBWllfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLFxuICAgICAgUkVBQ1RfTUVNT19DQUNIRV9TRU5USU5FTCA9IFN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vX2NhY2hlX3NlbnRpbmVsXCIpO1xuICAgIFN5bWJvbC5mb3IoXCJyZWFjdC5wb3N0cG9uZVwiKTtcbiAgICB2YXIgTUFZQkVfSVRFUkFUT1JfU1lNQk9MID0gU3ltYm9sLml0ZXJhdG9yLFxuICAgICAgQVNZTkNfSVRFUkFUT1IgPSBTeW1ib2wuYXN5bmNJdGVyYXRvcixcbiAgICAgIExvY2FsUHJvbWlzZSA9IFByb21pc2UsXG4gICAgICBzY2hlZHVsZU1pY3JvdGFzayA9XG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHF1ZXVlTWljcm90YXNrXG4gICAgICAgICAgPyBxdWV1ZU1pY3JvdGFza1xuICAgICAgICAgIDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgIExvY2FsUHJvbWlzZS5yZXNvbHZlKG51bGwpXG4gICAgICAgICAgICAgICAgLnRoZW4oY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgLmNhdGNoKGhhbmRsZUVycm9ySW5OZXh0VGljayk7XG4gICAgICAgICAgICB9LFxuICAgICAgY3VycmVudFZpZXcgPSBudWxsLFxuICAgICAgd3JpdHRlbkJ5dGVzID0gMCxcbiAgICAgIHRleHRFbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCksXG4gICAgICBDTElFTlRfUkVGRVJFTkNFX1RBRyQxID0gU3ltYm9sLmZvcihcInJlYWN0LmNsaWVudC5yZWZlcmVuY2VcIiksXG4gICAgICBTRVJWRVJfUkVGRVJFTkNFX1RBRyA9IFN5bWJvbC5mb3IoXCJyZWFjdC5zZXJ2ZXIucmVmZXJlbmNlXCIpLFxuICAgICAgRnVuY3Rpb25CaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQsXG4gICAgICBBcnJheVNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLFxuICAgICAgUFJPTUlTRV9QUk9UT1RZUEUgPSBQcm9taXNlLnByb3RvdHlwZSxcbiAgICAgIGRlZXBQcm94eUhhbmRsZXJzID0ge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUpIHtcbiAgICAgICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCIkJHR5cGVvZlwiOlxuICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0LiQkdHlwZW9mO1xuICAgICAgICAgICAgY2FzZSBcIiQkaWRcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC4kJGlkO1xuICAgICAgICAgICAgY2FzZSBcIiQkYXN5bmNcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC4kJGFzeW5jO1xuICAgICAgICAgICAgY2FzZSBcIm5hbWVcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5uYW1lO1xuICAgICAgICAgICAgY2FzZSBcImRpc3BsYXlOYW1lXCI6XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgXCJkZWZhdWx0UHJvcHNcIjpcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSBcIl9kZWJ1Z0luZm9cIjpcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSBcInRvSlNPTlwiOlxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlIFN5bWJvbC50b1ByaW1pdGl2ZTpcbiAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGVbU3ltYm9sLnRvUHJpbWl0aXZlXTtcbiAgICAgICAgICAgIGNhc2UgU3ltYm9sLnRvU3RyaW5nVGFnOlxuICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZVtTeW1ib2wudG9TdHJpbmdUYWddO1xuICAgICAgICAgICAgY2FzZSBcIlByb3ZpZGVyXCI6XG4gICAgICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgICAgIFwiQ2Fubm90IHJlbmRlciBhIENsaWVudCBDb250ZXh0IFByb3ZpZGVyIG9uIHRoZSBTZXJ2ZXIuIEluc3RlYWQsIHlvdSBjYW4gZXhwb3J0IGEgQ2xpZW50IENvbXBvbmVudCB3cmFwcGVyIHRoYXQgaXRzZWxmIHJlbmRlcnMgYSBDbGllbnQgQ29udGV4dCBQcm92aWRlci5cIlxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgY2FzZSBcInRoZW5cIjpcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgICAgICAgXCJDYW5ub3QgYXdhaXQgb3IgcmV0dXJuIGZyb20gYSB0aGVuYWJsZS4gWW91IGNhbm5vdCBhd2FpdCBhIGNsaWVudCBtb2R1bGUgZnJvbSBhIHNlcnZlciBjb21wb25lbnQuXCJcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgICBcIkNhbm5vdCBhY2Nlc3MgXCIgK1xuICAgICAgICAgICAgICAoU3RyaW5nKHRhcmdldC5uYW1lKSArIFwiLlwiICsgU3RyaW5nKG5hbWUpKSArXG4gICAgICAgICAgICAgIFwiIG9uIHRoZSBzZXJ2ZXIuIFlvdSBjYW5ub3QgZG90IGludG8gYSBjbGllbnQgbW9kdWxlIGZyb20gYSBzZXJ2ZXIgY29tcG9uZW50LiBZb3UgY2FuIG9ubHkgcGFzcyB0aGUgaW1wb3J0ZWQgbmFtZSB0aHJvdWdoLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhyb3cgRXJyb3IoXCJDYW5ub3QgYXNzaWduIHRvIGEgY2xpZW50IG1vZHVsZSBmcm9tIGEgc2VydmVyIG1vZHVsZS5cIik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwcm94eUhhbmRsZXJzJDEgPSB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKHRhcmdldCwgbmFtZSkge1xuICAgICAgICAgIHJldHVybiBnZXRSZWZlcmVuY2UodGFyZ2V0LCBuYW1lKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiAodGFyZ2V0LCBuYW1lKSB7XG4gICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgbmFtZSk7XG4gICAgICAgICAgZGVzY3JpcHRvciB8fFxuICAgICAgICAgICAgKChkZXNjcmlwdG9yID0ge1xuICAgICAgICAgICAgICB2YWx1ZTogZ2V0UmVmZXJlbmNlKHRhcmdldCwgbmFtZSksXG4gICAgICAgICAgICAgIHdyaXRhYmxlOiAhMSxcbiAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiAhMSxcbiAgICAgICAgICAgICAgZW51bWVyYWJsZTogITFcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwgZGVzY3JpcHRvcikpO1xuICAgICAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICAgICAgICB9LFxuICAgICAgICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBQUk9NSVNFX1BST1RPVFlQRTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhyb3cgRXJyb3IoXCJDYW5ub3QgYXNzaWduIHRvIGEgY2xpZW50IG1vZHVsZSBmcm9tIGEgc2VydmVyIG1vZHVsZS5cIik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBSZWFjdERPTVNoYXJlZEludGVybmFscyA9XG4gICAgICAgIFJlYWN0RE9NLl9fRE9NX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1dBUk5fVVNFUlNfVEhFWV9DQU5OT1RfVVBHUkFERSxcbiAgICAgIHByZXZpb3VzRGlzcGF0Y2hlciA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLmQ7XG4gICAgUmVhY3RET01TaGFyZWRJbnRlcm5hbHMuZCA9IHtcbiAgICAgIGY6IHByZXZpb3VzRGlzcGF0Y2hlci5mLFxuICAgICAgcjogcHJldmlvdXNEaXNwYXRjaGVyLnIsXG4gICAgICBEOiBmdW5jdGlvbiAoaHJlZikge1xuICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYgJiYgaHJlZikge1xuICAgICAgICAgIHZhciByZXF1ZXN0ID0gcmVzb2x2ZVJlcXVlc3QoKTtcbiAgICAgICAgICBpZiAocmVxdWVzdCkge1xuICAgICAgICAgICAgdmFyIGhpbnRzID0gcmVxdWVzdC5oaW50cyxcbiAgICAgICAgICAgICAga2V5ID0gXCJEfFwiICsgaHJlZjtcbiAgICAgICAgICAgIGhpbnRzLmhhcyhrZXkpIHx8IChoaW50cy5hZGQoa2V5KSwgZW1pdEhpbnQocmVxdWVzdCwgXCJEXCIsIGhyZWYpKTtcbiAgICAgICAgICB9IGVsc2UgcHJldmlvdXNEaXNwYXRjaGVyLkQoaHJlZik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBDOiBmdW5jdGlvbiAoaHJlZiwgY3Jvc3NPcmlnaW4pIHtcbiAgICAgICAgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBocmVmKSB7XG4gICAgICAgICAgdmFyIHJlcXVlc3QgPSByZXNvbHZlUmVxdWVzdCgpO1xuICAgICAgICAgIGlmIChyZXF1ZXN0KSB7XG4gICAgICAgICAgICB2YXIgaGludHMgPSByZXF1ZXN0LmhpbnRzLFxuICAgICAgICAgICAgICBrZXkgPVxuICAgICAgICAgICAgICAgIFwiQ3xcIiArXG4gICAgICAgICAgICAgICAgKG51bGwgPT0gY3Jvc3NPcmlnaW4gPyBcIm51bGxcIiA6IGNyb3NzT3JpZ2luKSArXG4gICAgICAgICAgICAgICAgXCJ8XCIgK1xuICAgICAgICAgICAgICAgIGhyZWY7XG4gICAgICAgICAgICBoaW50cy5oYXMoa2V5KSB8fFxuICAgICAgICAgICAgICAoaGludHMuYWRkKGtleSksXG4gICAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBjcm9zc09yaWdpblxuICAgICAgICAgICAgICAgID8gZW1pdEhpbnQocmVxdWVzdCwgXCJDXCIsIFtocmVmLCBjcm9zc09yaWdpbl0pXG4gICAgICAgICAgICAgICAgOiBlbWl0SGludChyZXF1ZXN0LCBcIkNcIiwgaHJlZikpO1xuICAgICAgICAgIH0gZWxzZSBwcmV2aW91c0Rpc3BhdGNoZXIuQyhocmVmLCBjcm9zc09yaWdpbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBMOiBmdW5jdGlvbiAoaHJlZiwgYXMsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBocmVmKSB7XG4gICAgICAgICAgdmFyIHJlcXVlc3QgPSByZXNvbHZlUmVxdWVzdCgpO1xuICAgICAgICAgIGlmIChyZXF1ZXN0KSB7XG4gICAgICAgICAgICB2YXIgaGludHMgPSByZXF1ZXN0LmhpbnRzLFxuICAgICAgICAgICAgICBrZXkgPSBcIkxcIjtcbiAgICAgICAgICAgIGlmIChcImltYWdlXCIgPT09IGFzICYmIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgdmFyIGltYWdlU3JjU2V0ID0gb3B0aW9ucy5pbWFnZVNyY1NldCxcbiAgICAgICAgICAgICAgICBpbWFnZVNpemVzID0gb3B0aW9ucy5pbWFnZVNpemVzLFxuICAgICAgICAgICAgICAgIHVuaXF1ZVBhcnQgPSBcIlwiO1xuICAgICAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgaW1hZ2VTcmNTZXQgJiYgXCJcIiAhPT0gaW1hZ2VTcmNTZXRcbiAgICAgICAgICAgICAgICA/ICgodW5pcXVlUGFydCArPSBcIltcIiArIGltYWdlU3JjU2V0ICsgXCJdXCIpLFxuICAgICAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGltYWdlU2l6ZXMgJiZcbiAgICAgICAgICAgICAgICAgICAgKHVuaXF1ZVBhcnQgKz0gXCJbXCIgKyBpbWFnZVNpemVzICsgXCJdXCIpKVxuICAgICAgICAgICAgICAgIDogKHVuaXF1ZVBhcnQgKz0gXCJbXVtdXCIgKyBocmVmKTtcbiAgICAgICAgICAgICAga2V5ICs9IFwiW2ltYWdlXVwiICsgdW5pcXVlUGFydDtcbiAgICAgICAgICAgIH0gZWxzZSBrZXkgKz0gXCJbXCIgKyBhcyArIFwiXVwiICsgaHJlZjtcbiAgICAgICAgICAgIGhpbnRzLmhhcyhrZXkpIHx8XG4gICAgICAgICAgICAgIChoaW50cy5hZGQoa2V5KSxcbiAgICAgICAgICAgICAgKG9wdGlvbnMgPSB0cmltT3B0aW9ucyhvcHRpb25zKSlcbiAgICAgICAgICAgICAgICA/IGVtaXRIaW50KHJlcXVlc3QsIFwiTFwiLCBbaHJlZiwgYXMsIG9wdGlvbnNdKVxuICAgICAgICAgICAgICAgIDogZW1pdEhpbnQocmVxdWVzdCwgXCJMXCIsIFtocmVmLCBhc10pKTtcbiAgICAgICAgICB9IGVsc2UgcHJldmlvdXNEaXNwYXRjaGVyLkwoaHJlZiwgYXMsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgbTogZnVuY3Rpb24gKGhyZWYsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBocmVmKSB7XG4gICAgICAgICAgdmFyIHJlcXVlc3QgPSByZXNvbHZlUmVxdWVzdCgpO1xuICAgICAgICAgIGlmIChyZXF1ZXN0KSB7XG4gICAgICAgICAgICB2YXIgaGludHMgPSByZXF1ZXN0LmhpbnRzLFxuICAgICAgICAgICAgICBrZXkgPSBcIm18XCIgKyBocmVmO1xuICAgICAgICAgICAgaWYgKGhpbnRzLmhhcyhrZXkpKSByZXR1cm47XG4gICAgICAgICAgICBoaW50cy5hZGQoa2V5KTtcbiAgICAgICAgICAgIHJldHVybiAob3B0aW9ucyA9IHRyaW1PcHRpb25zKG9wdGlvbnMpKVxuICAgICAgICAgICAgICA/IGVtaXRIaW50KHJlcXVlc3QsIFwibVwiLCBbaHJlZiwgb3B0aW9uc10pXG4gICAgICAgICAgICAgIDogZW1pdEhpbnQocmVxdWVzdCwgXCJtXCIsIGhyZWYpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwcmV2aW91c0Rpc3BhdGNoZXIubShocmVmLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFg6IGZ1bmN0aW9uIChzcmMsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBzcmMpIHtcbiAgICAgICAgICB2YXIgcmVxdWVzdCA9IHJlc29sdmVSZXF1ZXN0KCk7XG4gICAgICAgICAgaWYgKHJlcXVlc3QpIHtcbiAgICAgICAgICAgIHZhciBoaW50cyA9IHJlcXVlc3QuaGludHMsXG4gICAgICAgICAgICAgIGtleSA9IFwiWHxcIiArIHNyYztcbiAgICAgICAgICAgIGlmIChoaW50cy5oYXMoa2V5KSkgcmV0dXJuO1xuICAgICAgICAgICAgaGludHMuYWRkKGtleSk7XG4gICAgICAgICAgICByZXR1cm4gKG9wdGlvbnMgPSB0cmltT3B0aW9ucyhvcHRpb25zKSlcbiAgICAgICAgICAgICAgPyBlbWl0SGludChyZXF1ZXN0LCBcIlhcIiwgW3NyYywgb3B0aW9uc10pXG4gICAgICAgICAgICAgIDogZW1pdEhpbnQocmVxdWVzdCwgXCJYXCIsIHNyYyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByZXZpb3VzRGlzcGF0Y2hlci5YKHNyYywgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBTOiBmdW5jdGlvbiAoaHJlZiwgcHJlY2VkZW5jZSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYpIHtcbiAgICAgICAgICB2YXIgcmVxdWVzdCA9IHJlc29sdmVSZXF1ZXN0KCk7XG4gICAgICAgICAgaWYgKHJlcXVlc3QpIHtcbiAgICAgICAgICAgIHZhciBoaW50cyA9IHJlcXVlc3QuaGludHMsXG4gICAgICAgICAgICAgIGtleSA9IFwiU3xcIiArIGhyZWY7XG4gICAgICAgICAgICBpZiAoaGludHMuaGFzKGtleSkpIHJldHVybjtcbiAgICAgICAgICAgIGhpbnRzLmFkZChrZXkpO1xuICAgICAgICAgICAgcmV0dXJuIChvcHRpb25zID0gdHJpbU9wdGlvbnMob3B0aW9ucykpXG4gICAgICAgICAgICAgID8gZW1pdEhpbnQocmVxdWVzdCwgXCJTXCIsIFtcbiAgICAgICAgICAgICAgICAgIGhyZWYsXG4gICAgICAgICAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcHJlY2VkZW5jZSA/IHByZWNlZGVuY2UgOiAwLFxuICAgICAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgIDogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHByZWNlZGVuY2VcbiAgICAgICAgICAgICAgICA/IGVtaXRIaW50KHJlcXVlc3QsIFwiU1wiLCBbaHJlZiwgcHJlY2VkZW5jZV0pXG4gICAgICAgICAgICAgICAgOiBlbWl0SGludChyZXF1ZXN0LCBcIlNcIiwgaHJlZik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByZXZpb3VzRGlzcGF0Y2hlci5TKGhyZWYsIHByZWNlZGVuY2UsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgTTogZnVuY3Rpb24gKHNyYywgb3B0aW9ucykge1xuICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHNyYykge1xuICAgICAgICAgIHZhciByZXF1ZXN0ID0gcmVzb2x2ZVJlcXVlc3QoKTtcbiAgICAgICAgICBpZiAocmVxdWVzdCkge1xuICAgICAgICAgICAgdmFyIGhpbnRzID0gcmVxdWVzdC5oaW50cyxcbiAgICAgICAgICAgICAga2V5ID0gXCJNfFwiICsgc3JjO1xuICAgICAgICAgICAgaWYgKGhpbnRzLmhhcyhrZXkpKSByZXR1cm47XG4gICAgICAgICAgICBoaW50cy5hZGQoa2V5KTtcbiAgICAgICAgICAgIHJldHVybiAob3B0aW9ucyA9IHRyaW1PcHRpb25zKG9wdGlvbnMpKVxuICAgICAgICAgICAgICA/IGVtaXRIaW50KHJlcXVlc3QsIFwiTVwiLCBbc3JjLCBvcHRpb25zXSlcbiAgICAgICAgICAgICAgOiBlbWl0SGludChyZXF1ZXN0LCBcIk1cIiwgc3JjKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHJldmlvdXNEaXNwYXRjaGVyLk0oc3JjLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgdmFyIGZyYW1lc1RvU2tpcCA9IDAsXG4gICAgICBjb2xsZWN0ZWRTdGFja1RyYWNlID0gbnVsbCxcbiAgICAgIGlkZW50aWZpZXJSZWdFeHAgPSAvXlthLXpBLVpfJF1bMC05YS16QS1aXyRdKiQvLFxuICAgICAgZnJhbWVSZWdFeHAgPVxuICAgICAgICAvXiB7M30gYXQgKD86KC4rKSBcXCgoPzooLispOihcXGQrKTooXFxkKyl8PGFub255bW91cz4pXFwpfCg/OmFzeW5jICk/KC4rKTooXFxkKyk6KFxcZCspfDxhbm9ueW1vdXM+KSQvLFxuICAgICAgc3RhY2tUcmFjZUNhY2hlID0gbmV3IFdlYWtNYXAoKSxcbiAgICAgIHN1cHBvcnRzUmVxdWVzdFN0b3JhZ2UgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBBc3luY0xvY2FsU3RvcmFnZSxcbiAgICAgIHJlcXVlc3RTdG9yYWdlID0gc3VwcG9ydHNSZXF1ZXN0U3RvcmFnZSA/IG5ldyBBc3luY0xvY2FsU3RvcmFnZSgpIDogbnVsbCxcbiAgICAgIHN1cHBvcnRzQ29tcG9uZW50U3RvcmFnZSA9IHN1cHBvcnRzUmVxdWVzdFN0b3JhZ2UsXG4gICAgICBjb21wb25lbnRTdG9yYWdlID0gc3VwcG9ydHNDb21wb25lbnRTdG9yYWdlXG4gICAgICAgID8gbmV3IEFzeW5jTG9jYWxTdG9yYWdlKClcbiAgICAgICAgOiBudWxsLFxuICAgICAgVEVNUE9SQVJZX1JFRkVSRU5DRV9UQUcgPSBTeW1ib2wuZm9yKFwicmVhY3QudGVtcG9yYXJ5LnJlZmVyZW5jZVwiKSxcbiAgICAgIHByb3h5SGFuZGxlcnMgPSB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKHRhcmdldCwgbmFtZSkge1xuICAgICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgICAgY2FzZSBcIiQkdHlwZW9mXCI6XG4gICAgICAgICAgICAgIHJldHVybiB0YXJnZXQuJCR0eXBlb2Y7XG4gICAgICAgICAgICBjYXNlIFwibmFtZVwiOlxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlIFwiZGlzcGxheU5hbWVcIjpcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRQcm9wc1wiOlxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlIFwiX2RlYnVnSW5mb1wiOlxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlIFwidG9KU09OXCI6XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgU3ltYm9sLnRvUHJpbWl0aXZlOlxuICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZVtTeW1ib2wudG9QcmltaXRpdmVdO1xuICAgICAgICAgICAgY2FzZSBTeW1ib2wudG9TdHJpbmdUYWc6XG4gICAgICAgICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlW1N5bWJvbC50b1N0cmluZ1RhZ107XG4gICAgICAgICAgICBjYXNlIFwiUHJvdmlkZXJcIjpcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgICAgICAgXCJDYW5ub3QgcmVuZGVyIGEgQ2xpZW50IENvbnRleHQgUHJvdmlkZXIgb24gdGhlIFNlcnZlci4gSW5zdGVhZCwgeW91IGNhbiBleHBvcnQgYSBDbGllbnQgQ29tcG9uZW50IHdyYXBwZXIgdGhhdCBpdHNlbGYgcmVuZGVycyBhIENsaWVudCBDb250ZXh0IFByb3ZpZGVyLlwiXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjYXNlIFwidGhlblwiOlxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgXCJDYW5ub3QgYWNjZXNzIFwiICtcbiAgICAgICAgICAgICAgU3RyaW5nKG5hbWUpICtcbiAgICAgICAgICAgICAgXCIgb24gdGhlIHNlcnZlci4gWW91IGNhbm5vdCBkb3QgaW50byBhIHRlbXBvcmFyeSBjbGllbnQgcmVmZXJlbmNlIGZyb20gYSBzZXJ2ZXIgY29tcG9uZW50LiBZb3UgY2FuIG9ubHkgcGFzcyB0aGUgdmFsdWUgdGhyb3VnaCB0byB0aGUgY2xpZW50LlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgICBcIkNhbm5vdCBhc3NpZ24gdG8gYSB0ZW1wb3JhcnkgY2xpZW50IHJlZmVyZW5jZSBmcm9tIGEgc2VydmVyIG1vZHVsZS5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBTdXNwZW5zZUV4Y2VwdGlvbiA9IEVycm9yKFxuICAgICAgICBcIlN1c3BlbnNlIEV4Y2VwdGlvbjogVGhpcyBpcyBub3QgYSByZWFsIGVycm9yISBJdCdzIGFuIGltcGxlbWVudGF0aW9uIGRldGFpbCBvZiBgdXNlYCB0byBpbnRlcnJ1cHQgdGhlIGN1cnJlbnQgcmVuZGVyLiBZb3UgbXVzdCBlaXRoZXIgcmV0aHJvdyBpdCBpbW1lZGlhdGVseSwgb3IgbW92ZSB0aGUgYHVzZWAgY2FsbCBvdXRzaWRlIG9mIHRoZSBgdHJ5L2NhdGNoYCBibG9jay4gQ2FwdHVyaW5nIHdpdGhvdXQgcmV0aHJvd2luZyB3aWxsIGxlYWQgdG8gdW5leHBlY3RlZCBiZWhhdmlvci5cXG5cXG5UbyBoYW5kbGUgYXN5bmMgZXJyb3JzLCB3cmFwIHlvdXIgY29tcG9uZW50IGluIGFuIGVycm9yIGJvdW5kYXJ5LCBvciBjYWxsIHRoZSBwcm9taXNlJ3MgYC5jYXRjaGAgbWV0aG9kIGFuZCBwYXNzIHRoZSByZXN1bHQgdG8gYHVzZWAuXCJcbiAgICAgICksXG4gICAgICBzdXNwZW5kZWRUaGVuYWJsZSA9IG51bGwsXG4gICAgICBjdXJyZW50UmVxdWVzdCQxID0gbnVsbCxcbiAgICAgIHRoZW5hYmxlSW5kZXhDb3VudGVyID0gMCxcbiAgICAgIHRoZW5hYmxlU3RhdGUgPSBudWxsLFxuICAgICAgY3VycmVudENvbXBvbmVudERlYnVnSW5mbyA9IG51bGwsXG4gICAgICBIb29rc0Rpc3BhdGNoZXIgPSB7XG4gICAgICAgIHJlYWRDb250ZXh0OiB1bnN1cHBvcnRlZENvbnRleHQsXG4gICAgICAgIHVzZTogZnVuY3Rpb24gKHVzYWJsZSkge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIChudWxsICE9PSB1c2FibGUgJiYgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHVzYWJsZSkgfHxcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHVzYWJsZVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHVzYWJsZS50aGVuKSB7XG4gICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoZW5hYmxlSW5kZXhDb3VudGVyO1xuICAgICAgICAgICAgICB0aGVuYWJsZUluZGV4Q291bnRlciArPSAxO1xuICAgICAgICAgICAgICBudWxsID09PSB0aGVuYWJsZVN0YXRlICYmICh0aGVuYWJsZVN0YXRlID0gW10pO1xuICAgICAgICAgICAgICByZXR1cm4gdHJhY2tVc2VkVGhlbmFibGUodGhlbmFibGVTdGF0ZSwgdXNhYmxlLCBpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1c2FibGUuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSAmJiB1bnN1cHBvcnRlZENvbnRleHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzQ2xpZW50UmVmZXJlbmNlKHVzYWJsZSkpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgbnVsbCAhPSB1c2FibGUudmFsdWUgJiZcbiAgICAgICAgICAgICAgdXNhYmxlLnZhbHVlLiQkdHlwZW9mID09PSBSRUFDVF9DT05URVhUX1RZUEVcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgICAgICAgXCJDYW5ub3QgcmVhZCBhIENsaWVudCBDb250ZXh0IGZyb20gYSBTZXJ2ZXIgQ29tcG9uZW50LlwiXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIkNhbm5vdCB1c2UoKSBhbiBhbHJlYWR5IHJlc29sdmVkIENsaWVudCBSZWZlcmVuY2UuXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgICAgIFwiQW4gdW5zdXBwb3J0ZWQgdHlwZSB3YXMgcGFzc2VkIHRvIHVzZSgpOiBcIiArIFN0cmluZyh1c2FibGUpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgdXNlQ2FsbGJhY2s6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjaztcbiAgICAgICAgfSxcbiAgICAgICAgdXNlQ29udGV4dDogdW5zdXBwb3J0ZWRDb250ZXh0LFxuICAgICAgICB1c2VFZmZlY3Q6IHVuc3VwcG9ydGVkSG9vayxcbiAgICAgICAgdXNlSW1wZXJhdGl2ZUhhbmRsZTogdW5zdXBwb3J0ZWRIb29rLFxuICAgICAgICB1c2VMYXlvdXRFZmZlY3Q6IHVuc3VwcG9ydGVkSG9vayxcbiAgICAgICAgdXNlSW5zZXJ0aW9uRWZmZWN0OiB1bnN1cHBvcnRlZEhvb2ssXG4gICAgICAgIHVzZU1lbW86IGZ1bmN0aW9uIChuZXh0Q3JlYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIG5leHRDcmVhdGUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgdXNlUmVkdWNlcjogdW5zdXBwb3J0ZWRIb29rLFxuICAgICAgICB1c2VSZWY6IHVuc3VwcG9ydGVkSG9vayxcbiAgICAgICAgdXNlU3RhdGU6IHVuc3VwcG9ydGVkSG9vayxcbiAgICAgICAgdXNlRGVidWdWYWx1ZTogZnVuY3Rpb24gKCkge30sXG4gICAgICAgIHVzZURlZmVycmVkVmFsdWU6IHVuc3VwcG9ydGVkSG9vayxcbiAgICAgICAgdXNlVHJhbnNpdGlvbjogdW5zdXBwb3J0ZWRIb29rLFxuICAgICAgICB1c2VTeW5jRXh0ZXJuYWxTdG9yZTogdW5zdXBwb3J0ZWRIb29rLFxuICAgICAgICB1c2VJZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChudWxsID09PSBjdXJyZW50UmVxdWVzdCQxKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJ1c2VJZCBjYW4gb25seSBiZSB1c2VkIHdoaWxlIFJlYWN0IGlzIHJlbmRlcmluZ1wiKTtcbiAgICAgICAgICB2YXIgaWQgPSBjdXJyZW50UmVxdWVzdCQxLmlkZW50aWZpZXJDb3VudCsrO1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBcIl9cIiArXG4gICAgICAgICAgICBjdXJyZW50UmVxdWVzdCQxLmlkZW50aWZpZXJQcmVmaXggK1xuICAgICAgICAgICAgXCJTX1wiICtcbiAgICAgICAgICAgIGlkLnRvU3RyaW5nKDMyKSArXG4gICAgICAgICAgICBcIl9cIlxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIHVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzOiB1bnN1cHBvcnRlZEhvb2ssXG4gICAgICAgIHVzZUZvcm1TdGF0ZTogdW5zdXBwb3J0ZWRIb29rLFxuICAgICAgICB1c2VBY3Rpb25TdGF0ZTogdW5zdXBwb3J0ZWRIb29rLFxuICAgICAgICB1c2VPcHRpbWlzdGljOiB1bnN1cHBvcnRlZEhvb2ssXG4gICAgICAgIHVzZU1lbW9DYWNoZTogZnVuY3Rpb24gKHNpemUpIHtcbiAgICAgICAgICBmb3IgKHZhciBkYXRhID0gQXJyYXkoc2l6ZSksIGkgPSAwOyBpIDwgc2l6ZTsgaSsrKVxuICAgICAgICAgICAgZGF0YVtpXSA9IFJFQUNUX01FTU9fQ0FDSEVfU0VOVElORUw7XG4gICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH0sXG4gICAgICAgIHVzZUNhY2hlUmVmcmVzaDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB1bnN1cHBvcnRlZFJlZnJlc2g7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjdXJyZW50T3duZXIgPSBudWxsLFxuICAgICAgRGVmYXVsdEFzeW5jRGlzcGF0Y2hlciA9IHtcbiAgICAgICAgZ2V0Q2FjaGVGb3JUeXBlOiBmdW5jdGlvbiAocmVzb3VyY2VUeXBlKSB7XG4gICAgICAgICAgdmFyIGNhY2hlID0gKGNhY2hlID0gcmVzb2x2ZVJlcXVlc3QoKSkgPyBjYWNoZS5jYWNoZSA6IG5ldyBNYXAoKTtcbiAgICAgICAgICB2YXIgZW50cnkgPSBjYWNoZS5nZXQocmVzb3VyY2VUeXBlKTtcbiAgICAgICAgICB2b2lkIDAgPT09IGVudHJ5ICYmXG4gICAgICAgICAgICAoKGVudHJ5ID0gcmVzb3VyY2VUeXBlKCkpLCBjYWNoZS5zZXQocmVzb3VyY2VUeXBlLCBlbnRyeSkpO1xuICAgICAgICAgIHJldHVybiBlbnRyeTtcbiAgICAgICAgfSxcbiAgICAgICAgY2FjaGVTaWduYWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgcmVxdWVzdCA9IHJlc29sdmVSZXF1ZXN0KCk7XG4gICAgICAgICAgcmV0dXJuIHJlcXVlc3QgPyByZXF1ZXN0LmNhY2hlQ29udHJvbGxlci5zaWduYWwgOiBudWxsO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIERlZmF1bHRBc3luY0Rpc3BhdGNoZXIuZ2V0T3duZXIgPSByZXNvbHZlT3duZXI7XG4gICAgdmFyIFJlYWN0U2hhcmVkSW50ZXJuYWxzU2VydmVyID1cbiAgICAgIFJlYWN0Ll9fU0VSVkVSX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1dBUk5fVVNFUlNfVEhFWV9DQU5OT1RfVVBHUkFERTtcbiAgICBpZiAoIVJlYWN0U2hhcmVkSW50ZXJuYWxzU2VydmVyKVxuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICdUaGUgXCJyZWFjdFwiIHBhY2thZ2UgaW4gdGhpcyBlbnZpcm9ubWVudCBpcyBub3QgY29uZmlndXJlZCBjb3JyZWN0bHkuIFRoZSBcInJlYWN0LXNlcnZlclwiIGNvbmRpdGlvbiBtdXN0IGJlIGVuYWJsZWQgaW4gYW55IGVudmlyb25tZW50IHRoYXQgcnVucyBSZWFjdCBTZXJ2ZXIgQ29tcG9uZW50cy4nXG4gICAgICApO1xuICAgIHZhciBwcmVmaXgsIHN1ZmZpeDtcbiAgICBuZXcgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIFdlYWtNYXAgPyBXZWFrTWFwIDogTWFwKSgpO1xuICAgIHZhciBsYXN0UmVzZXRUaW1lID0gMDtcbiAgICBpZiAoXG4gICAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgcGVyZm9ybWFuY2UgJiZcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHBlcmZvcm1hbmNlLm5vd1xuICAgICkge1xuICAgICAgdmFyIGxvY2FsUGVyZm9ybWFuY2UgPSBwZXJmb3JtYW5jZTtcbiAgICAgIHZhciBnZXRDdXJyZW50VGltZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsUGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYWxEYXRlID0gRGF0ZTtcbiAgICAgIGdldEN1cnJlbnRUaW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbG9jYWxEYXRlLm5vdygpO1xuICAgICAgfTtcbiAgICB9XG4gICAgdmFyIGNhbGxDb21wb25lbnQgPSB7XG4gICAgICAgIHJlYWN0X3N0YWNrX2JvdHRvbV9mcmFtZTogZnVuY3Rpb24gKFxuICAgICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICBjb21wb25lbnREZWJ1Z0luZm9cbiAgICAgICAgKSB7XG4gICAgICAgICAgY3VycmVudE93bmVyID0gY29tcG9uZW50RGVidWdJbmZvO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gQ29tcG9uZW50KHByb3BzLCB2b2lkIDApO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBjdXJyZW50T3duZXIgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNhbGxDb21wb25lbnRJbkRFViA9XG4gICAgICAgIGNhbGxDb21wb25lbnQucmVhY3Rfc3RhY2tfYm90dG9tX2ZyYW1lLmJpbmQoY2FsbENvbXBvbmVudCksXG4gICAgICBjYWxsTGF6eUluaXQgPSB7XG4gICAgICAgIHJlYWN0X3N0YWNrX2JvdHRvbV9mcmFtZTogZnVuY3Rpb24gKGxhenkpIHtcbiAgICAgICAgICB2YXIgaW5pdCA9IGxhenkuX2luaXQ7XG4gICAgICAgICAgcmV0dXJuIGluaXQobGF6eS5fcGF5bG9hZCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjYWxsTGF6eUluaXRJbkRFViA9XG4gICAgICAgIGNhbGxMYXp5SW5pdC5yZWFjdF9zdGFja19ib3R0b21fZnJhbWUuYmluZChjYWxsTGF6eUluaXQpLFxuICAgICAgY2FsbEl0ZXJhdG9yID0ge1xuICAgICAgICByZWFjdF9zdGFja19ib3R0b21fZnJhbWU6IGZ1bmN0aW9uIChpdGVyYXRvciwgcHJvZ3Jlc3MsIGVycm9yKSB7XG4gICAgICAgICAgaXRlcmF0b3IubmV4dCgpLnRoZW4ocHJvZ3Jlc3MsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNhbGxJdGVyYXRvckluREVWID1cbiAgICAgICAgY2FsbEl0ZXJhdG9yLnJlYWN0X3N0YWNrX2JvdHRvbV9mcmFtZS5iaW5kKGNhbGxJdGVyYXRvciksXG4gICAgICBpc0FycmF5SW1wbCA9IEFycmF5LmlzQXJyYXksXG4gICAgICBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgICAgIGpzeFByb3BzUGFyZW50cyA9IG5ldyBXZWFrTWFwKCksXG4gICAgICBqc3hDaGlsZHJlblBhcmVudHMgPSBuZXcgV2Vha01hcCgpLFxuICAgICAgQ0xJRU5UX1JFRkVSRU5DRV9UQUcgPSBTeW1ib2wuZm9yKFwicmVhY3QuY2xpZW50LnJlZmVyZW5jZVwiKSxcbiAgICAgIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxcbiAgICAgIGRvTm90TGltaXQgPSBuZXcgV2Vha1NldCgpO1xuICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBjb25zb2xlICYmXG4gICAgICBudWxsICE9PSBjb25zb2xlICYmXG4gICAgICAocGF0Y2hDb25zb2xlKGNvbnNvbGUsIFwiYXNzZXJ0XCIpLFxuICAgICAgcGF0Y2hDb25zb2xlKGNvbnNvbGUsIFwiZGVidWdcIiksXG4gICAgICBwYXRjaENvbnNvbGUoY29uc29sZSwgXCJkaXJcIiksXG4gICAgICBwYXRjaENvbnNvbGUoY29uc29sZSwgXCJkaXJ4bWxcIiksXG4gICAgICBwYXRjaENvbnNvbGUoY29uc29sZSwgXCJlcnJvclwiKSxcbiAgICAgIHBhdGNoQ29uc29sZShjb25zb2xlLCBcImdyb3VwXCIpLFxuICAgICAgcGF0Y2hDb25zb2xlKGNvbnNvbGUsIFwiZ3JvdXBDb2xsYXBzZWRcIiksXG4gICAgICBwYXRjaENvbnNvbGUoY29uc29sZSwgXCJncm91cEVuZFwiKSxcbiAgICAgIHBhdGNoQ29uc29sZShjb25zb2xlLCBcImluZm9cIiksXG4gICAgICBwYXRjaENvbnNvbGUoY29uc29sZSwgXCJsb2dcIiksXG4gICAgICBwYXRjaENvbnNvbGUoY29uc29sZSwgXCJ0YWJsZVwiKSxcbiAgICAgIHBhdGNoQ29uc29sZShjb25zb2xlLCBcInRyYWNlXCIpLFxuICAgICAgcGF0Y2hDb25zb2xlKGNvbnNvbGUsIFwid2FyblwiKSk7XG4gICAgdmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGUsXG4gICAgICBzdHJpbmdpZnkgPSBKU09OLnN0cmluZ2lmeSxcbiAgICAgIEFCT1JUSU5HID0gMTIsXG4gICAgICBDTE9TRUQgPSAxNCxcbiAgICAgIGRlZmF1bHRQb3N0cG9uZUhhbmRsZXIgPSBub29wLFxuICAgICAgY3VycmVudFJlcXVlc3QgPSBudWxsLFxuICAgICAgY2FuRW1pdERlYnVnSW5mbyA9ICExLFxuICAgICAgc2VyaWFsaXplZFNpemUgPSAwLFxuICAgICAgTUFYX1JPV19TSVpFID0gMzIwMCxcbiAgICAgIG1vZGVsUm9vdCA9ICExLFxuICAgICAgQ09OU1RSVUNUT1JfTUFSS0VSID0gU3ltYm9sKCksXG4gICAgICBkZWJ1Z01vZGVsUm9vdCA9IG51bGwsXG4gICAgICBkZWJ1Z05vT3V0bGluZSA9IG51bGwsXG4gICAgICBlbXB0eVJvb3QgPSB7fSxcbiAgICAgIGRlY29kZXJPcHRpb25zID0geyBzdHJlYW06ICEwIH0sXG4gICAgICBjaHVua0NhY2hlID0gbmV3IE1hcCgpO1xuICAgIENodW5rLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUHJvbWlzZS5wcm90b3R5cGUpO1xuICAgIENodW5rLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgc3dpdGNoICh0aGlzLnN0YXR1cykge1xuICAgICAgICBjYXNlIFwicmVzb2x2ZWRfbW9kZWxcIjpcbiAgICAgICAgICBpbml0aWFsaXplTW9kZWxDaHVuayh0aGlzKTtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAodGhpcy5zdGF0dXMpIHtcbiAgICAgICAgY2FzZSBcImZ1bGZpbGxlZFwiOlxuICAgICAgICAgIHJlc29sdmUodGhpcy52YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJwZW5kaW5nXCI6XG4gICAgICAgIGNhc2UgXCJibG9ja2VkXCI6XG4gICAgICAgIGNhc2UgXCJjeWNsaWNcIjpcbiAgICAgICAgICByZXNvbHZlICYmXG4gICAgICAgICAgICAobnVsbCA9PT0gdGhpcy52YWx1ZSAmJiAodGhpcy52YWx1ZSA9IFtdKSxcbiAgICAgICAgICAgIHRoaXMudmFsdWUucHVzaChyZXNvbHZlKSk7XG4gICAgICAgICAgcmVqZWN0ICYmXG4gICAgICAgICAgICAobnVsbCA9PT0gdGhpcy5yZWFzb24gJiYgKHRoaXMucmVhc29uID0gW10pLFxuICAgICAgICAgICAgdGhpcy5yZWFzb24ucHVzaChyZWplY3QpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZWplY3QodGhpcy5yZWFzb24pO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIGluaXRpYWxpemluZ0NodW5rID0gbnVsbCxcbiAgICAgIGluaXRpYWxpemluZ0NodW5rQmxvY2tlZE1vZGVsID0gbnVsbDtcbiAgICBleHBvcnRzLmNyZWF0ZUNsaWVudE1vZHVsZVByb3h5ID0gZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG4gICAgICBtb2R1bGVJZCA9IHJlZ2lzdGVyQ2xpZW50UmVmZXJlbmNlSW1wbCh7fSwgbW9kdWxlSWQsICExKTtcbiAgICAgIHJldHVybiBuZXcgUHJveHkobW9kdWxlSWQsIHByb3h5SGFuZGxlcnMkMSk7XG4gICAgfTtcbiAgICBleHBvcnRzLmNyZWF0ZVRlbXBvcmFyeVJlZmVyZW5jZVNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBuZXcgV2Vha01hcCgpO1xuICAgIH07XG4gICAgZXhwb3J0cy5kZWNvZGVBY3Rpb24gPSBmdW5jdGlvbiAoYm9keSwgc2VydmVyTWFuaWZlc3QpIHtcbiAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpLFxuICAgICAgICBhY3Rpb24gPSBudWxsO1xuICAgICAgYm9keS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgIGtleS5zdGFydHNXaXRoKFwiJEFDVElPTl9cIilcbiAgICAgICAgICA/IGtleS5zdGFydHNXaXRoKFwiJEFDVElPTl9SRUZfXCIpXG4gICAgICAgICAgICA/ICgodmFsdWUgPSBcIiRBQ1RJT05fXCIgKyBrZXkuc2xpY2UoMTIpICsgXCI6XCIpLFxuICAgICAgICAgICAgICAodmFsdWUgPSBkZWNvZGVCb3VuZEFjdGlvbk1ldGFEYXRhKGJvZHksIHNlcnZlck1hbmlmZXN0LCB2YWx1ZSkpLFxuICAgICAgICAgICAgICAoYWN0aW9uID0gbG9hZFNlcnZlclJlZmVyZW5jZShcbiAgICAgICAgICAgICAgICBzZXJ2ZXJNYW5pZmVzdCxcbiAgICAgICAgICAgICAgICB2YWx1ZS5pZCxcbiAgICAgICAgICAgICAgICB2YWx1ZS5ib3VuZFxuICAgICAgICAgICAgICApKSlcbiAgICAgICAgICAgIDoga2V5LnN0YXJ0c1dpdGgoXCIkQUNUSU9OX0lEX1wiKSAmJlxuICAgICAgICAgICAgICAoKHZhbHVlID0ga2V5LnNsaWNlKDExKSksXG4gICAgICAgICAgICAgIChhY3Rpb24gPSBsb2FkU2VydmVyUmVmZXJlbmNlKHNlcnZlck1hbmlmZXN0LCB2YWx1ZSwgbnVsbCkpKVxuICAgICAgICAgIDogZm9ybURhdGEuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbnVsbCA9PT0gYWN0aW9uXG4gICAgICAgID8gbnVsbFxuICAgICAgICA6IGFjdGlvbi50aGVuKGZ1bmN0aW9uIChmbikge1xuICAgICAgICAgICAgcmV0dXJuIGZuLmJpbmQobnVsbCwgZm9ybURhdGEpO1xuICAgICAgICAgIH0pO1xuICAgIH07XG4gICAgZXhwb3J0cy5kZWNvZGVGb3JtU3RhdGUgPSBmdW5jdGlvbiAoYWN0aW9uUmVzdWx0LCBib2R5LCBzZXJ2ZXJNYW5pZmVzdCkge1xuICAgICAgdmFyIGtleVBhdGggPSBib2R5LmdldChcIiRBQ1RJT05fS0VZXCIpO1xuICAgICAgaWYgKFwic3RyaW5nXCIgIT09IHR5cGVvZiBrZXlQYXRoKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgICAgdmFyIG1ldGFEYXRhID0gbnVsbDtcbiAgICAgIGJvZHkuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICBrZXkuc3RhcnRzV2l0aChcIiRBQ1RJT05fUkVGX1wiKSAmJlxuICAgICAgICAgICgodmFsdWUgPSBcIiRBQ1RJT05fXCIgKyBrZXkuc2xpY2UoMTIpICsgXCI6XCIpLFxuICAgICAgICAgIChtZXRhRGF0YSA9IGRlY29kZUJvdW5kQWN0aW9uTWV0YURhdGEoYm9keSwgc2VydmVyTWFuaWZlc3QsIHZhbHVlKSkpO1xuICAgICAgfSk7XG4gICAgICBpZiAobnVsbCA9PT0gbWV0YURhdGEpIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgICB2YXIgcmVmZXJlbmNlSWQgPSBtZXRhRGF0YS5pZDtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobWV0YURhdGEuYm91bmQpLnRoZW4oZnVuY3Rpb24gKGJvdW5kKSB7XG4gICAgICAgIHJldHVybiBudWxsID09PSBib3VuZFxuICAgICAgICAgID8gbnVsbFxuICAgICAgICAgIDogW2FjdGlvblJlc3VsdCwga2V5UGF0aCwgcmVmZXJlbmNlSWQsIGJvdW5kLmxlbmd0aCAtIDFdO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBleHBvcnRzLmRlY29kZVJlcGx5ID0gZnVuY3Rpb24gKGJvZHksIHdlYnBhY2tNYXAsIG9wdGlvbnMpIHtcbiAgICAgIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgYm9keSkge1xuICAgICAgICB2YXIgZm9ybSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgICBmb3JtLmFwcGVuZChcIjBcIiwgYm9keSk7XG4gICAgICAgIGJvZHkgPSBmb3JtO1xuICAgICAgfVxuICAgICAgYm9keSA9IGNyZWF0ZVJlc3BvbnNlKFxuICAgICAgICB3ZWJwYWNrTWFwLFxuICAgICAgICBcIlwiLFxuICAgICAgICBvcHRpb25zID8gb3B0aW9ucy50ZW1wb3JhcnlSZWZlcmVuY2VzIDogdm9pZCAwLFxuICAgICAgICBib2R5XG4gICAgICApO1xuICAgICAgd2VicGFja01hcCA9IGdldENodW5rKGJvZHksIDApO1xuICAgICAgY2xvc2UoYm9keSk7XG4gICAgICByZXR1cm4gd2VicGFja01hcDtcbiAgICB9O1xuICAgIGV4cG9ydHMuZGVjb2RlUmVwbHlGcm9tQXN5bmNJdGVyYWJsZSA9IGZ1bmN0aW9uIChcbiAgICAgIGl0ZXJhYmxlLFxuICAgICAgd2VicGFja01hcCxcbiAgICAgIG9wdGlvbnNcbiAgICApIHtcbiAgICAgIGZ1bmN0aW9uIHByb2dyZXNzKGVudHJ5KSB7XG4gICAgICAgIGlmIChlbnRyeS5kb25lKSBjbG9zZShyZXNwb25zZSRqc2NvbXAkMCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGVudHJ5ID0gZW50cnkudmFsdWU7XG4gICAgICAgICAgdmFyIG5hbWUgPSBlbnRyeVswXTtcbiAgICAgICAgICBlbnRyeSA9IGVudHJ5WzFdO1xuICAgICAgICAgIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgZW50cnkpIHtcbiAgICAgICAgICAgIHZhciByZXNwb25zZSA9IHJlc3BvbnNlJGpzY29tcCQwO1xuICAgICAgICAgICAgcmVzcG9uc2UuX2Zvcm1EYXRhLmFwcGVuZChuYW1lLCBlbnRyeSk7XG4gICAgICAgICAgICB2YXIgcHJlZml4ID0gcmVzcG9uc2UuX3ByZWZpeDtcbiAgICAgICAgICAgIG5hbWUuc3RhcnRzV2l0aChwcmVmaXgpICYmXG4gICAgICAgICAgICAgICgocmVzcG9uc2UgPSByZXNwb25zZS5fY2h1bmtzKSxcbiAgICAgICAgICAgICAgKG5hbWUgPSArbmFtZS5zbGljZShwcmVmaXgubGVuZ3RoKSksXG4gICAgICAgICAgICAgIChwcmVmaXggPSByZXNwb25zZS5nZXQobmFtZSkpICYmXG4gICAgICAgICAgICAgICAgcmVzb2x2ZU1vZGVsQ2h1bmsocHJlZml4LCBlbnRyeSwgbmFtZSkpO1xuICAgICAgICAgIH0gZWxzZSByZXNwb25zZSRqc2NvbXAkMC5fZm9ybURhdGEuYXBwZW5kKG5hbWUsIGVudHJ5KTtcbiAgICAgICAgICBpdGVyYXRvci5uZXh0KCkudGhlbihwcm9ncmVzcywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBlcnJvcihyZWFzb24pIHtcbiAgICAgICAgcmVwb3J0R2xvYmFsRXJyb3IocmVzcG9uc2UkanNjb21wJDAsIHJlYXNvbik7XG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGl0ZXJhdG9yLnRocm93ICYmXG4gICAgICAgICAgaXRlcmF0b3IudGhyb3cocmVhc29uKS50aGVuKGVycm9yLCBlcnJvcik7XG4gICAgICB9XG4gICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYWJsZVtBU1lOQ19JVEVSQVRPUl0oKSxcbiAgICAgICAgcmVzcG9uc2UkanNjb21wJDAgPSBjcmVhdGVSZXNwb25zZShcbiAgICAgICAgICB3ZWJwYWNrTWFwLFxuICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgb3B0aW9ucyA/IG9wdGlvbnMudGVtcG9yYXJ5UmVmZXJlbmNlcyA6IHZvaWQgMFxuICAgICAgICApO1xuICAgICAgaXRlcmF0b3IubmV4dCgpLnRoZW4ocHJvZ3Jlc3MsIGVycm9yKTtcbiAgICAgIHJldHVybiBnZXRDaHVuayhyZXNwb25zZSRqc2NvbXAkMCwgMCk7XG4gICAgfTtcbiAgICBleHBvcnRzLnJlZ2lzdGVyQ2xpZW50UmVmZXJlbmNlID0gZnVuY3Rpb24gKFxuICAgICAgcHJveHlJbXBsZW1lbnRhdGlvbixcbiAgICAgIGlkLFxuICAgICAgZXhwb3J0TmFtZVxuICAgICkge1xuICAgICAgcmV0dXJuIHJlZ2lzdGVyQ2xpZW50UmVmZXJlbmNlSW1wbChcbiAgICAgICAgcHJveHlJbXBsZW1lbnRhdGlvbixcbiAgICAgICAgaWQgKyBcIiNcIiArIGV4cG9ydE5hbWUsXG4gICAgICAgICExXG4gICAgICApO1xuICAgIH07XG4gICAgZXhwb3J0cy5yZWdpc3RlclNlcnZlclJlZmVyZW5jZSA9IGZ1bmN0aW9uIChyZWZlcmVuY2UsIGlkLCBleHBvcnROYW1lKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMocmVmZXJlbmNlLCB7XG4gICAgICAgICQkdHlwZW9mOiB7IHZhbHVlOiBTRVJWRVJfUkVGRVJFTkNFX1RBRyB9LFxuICAgICAgICAkJGlkOiB7XG4gICAgICAgICAgdmFsdWU6IG51bGwgPT09IGV4cG9ydE5hbWUgPyBpZCA6IGlkICsgXCIjXCIgKyBleHBvcnROYW1lLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICAgICAgfSxcbiAgICAgICAgJCRib3VuZDogeyB2YWx1ZTogbnVsbCwgY29uZmlndXJhYmxlOiAhMCB9LFxuICAgICAgICAkJGxvY2F0aW9uOiB7IHZhbHVlOiBFcnJvcihcInJlYWN0LXN0YWNrLXRvcC1mcmFtZVwiKSwgY29uZmlndXJhYmxlOiAhMCB9LFxuICAgICAgICBiaW5kOiB7IHZhbHVlOiBiaW5kLCBjb25maWd1cmFibGU6ICEwIH1cbiAgICAgIH0pO1xuICAgIH07XG4gICAgZXhwb3J0cy5yZW5kZXJUb1JlYWRhYmxlU3RyZWFtID0gZnVuY3Rpb24gKG1vZGVsLCB3ZWJwYWNrTWFwLCBvcHRpb25zKSB7XG4gICAgICB2YXIgZGVidWdDaGFubmVsUmVhZGFibGUgPVxuICAgICAgICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5kZWJ1Z0NoYW5uZWxcbiAgICAgICAgICAgID8gb3B0aW9ucy5kZWJ1Z0NoYW5uZWwucmVhZGFibGVcbiAgICAgICAgICAgIDogdm9pZCAwLFxuICAgICAgICBkZWJ1Z0NoYW5uZWxXcml0YWJsZSA9XG4gICAgICAgICAgb3B0aW9ucyAmJiBvcHRpb25zLmRlYnVnQ2hhbm5lbFxuICAgICAgICAgICAgPyBvcHRpb25zLmRlYnVnQ2hhbm5lbC53cml0YWJsZVxuICAgICAgICAgICAgOiB2b2lkIDAsXG4gICAgICAgIHJlcXVlc3QgPSBjcmVhdGVSZXF1ZXN0KFxuICAgICAgICAgIG1vZGVsLFxuICAgICAgICAgIHdlYnBhY2tNYXAsXG4gICAgICAgICAgb3B0aW9ucyA/IG9wdGlvbnMub25FcnJvciA6IHZvaWQgMCxcbiAgICAgICAgICBvcHRpb25zID8gb3B0aW9ucy5pZGVudGlmaWVyUHJlZml4IDogdm9pZCAwLFxuICAgICAgICAgIG9wdGlvbnMgPyBvcHRpb25zLm9uUG9zdHBvbmUgOiB2b2lkIDAsXG4gICAgICAgICAgb3B0aW9ucyA/IG9wdGlvbnMudGVtcG9yYXJ5UmVmZXJlbmNlcyA6IHZvaWQgMCxcbiAgICAgICAgICBvcHRpb25zID8gb3B0aW9ucy5lbnZpcm9ubWVudE5hbWUgOiB2b2lkIDAsXG4gICAgICAgICAgb3B0aW9ucyA/IG9wdGlvbnMuZmlsdGVyU3RhY2tGcmFtZSA6IHZvaWQgMCxcbiAgICAgICAgICB2b2lkIDAgIT09IGRlYnVnQ2hhbm5lbFJlYWRhYmxlXG4gICAgICAgICk7XG4gICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnNpZ25hbCkge1xuICAgICAgICB2YXIgc2lnbmFsID0gb3B0aW9ucy5zaWduYWw7XG4gICAgICAgIGlmIChzaWduYWwuYWJvcnRlZCkgYWJvcnQocmVxdWVzdCwgc2lnbmFsLnJlYXNvbik7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGFib3J0KHJlcXVlc3QsIHNpZ25hbC5yZWFzb24pO1xuICAgICAgICAgICAgc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBsaXN0ZW5lcik7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdm9pZCAwICE9PSBkZWJ1Z0NoYW5uZWxXcml0YWJsZSAmJlxuICAgICAgICBuZXcgUmVhZGFibGVTdHJlYW0oXG4gICAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgcHVsbDogZnVuY3Rpb24gKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgaWYgKDEzID09PSByZXF1ZXN0LnN0YXR1cylcbiAgICAgICAgICAgICAgICAocmVxdWVzdC5zdGF0dXMgPSBDTE9TRUQpLFxuICAgICAgICAgICAgICAgICAgY2xvc2VXaXRoRXJyb3IoY29udHJvbGxlciwgcmVxdWVzdC5mYXRhbEVycm9yKTtcbiAgICAgICAgICAgICAgZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5zdGF0dXMgIT09IENMT1NFRCAmJlxuICAgICAgICAgICAgICAgIG51bGwgPT09IHJlcXVlc3QuZGVidWdEZXN0aW5hdGlvblxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LmRlYnVnRGVzdGluYXRpb24gPSBjb250cm9sbGVyO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICBmbHVzaENvbXBsZXRlZENodW5rcyhyZXF1ZXN0KTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgbG9nUmVjb3ZlcmFibGVFcnJvcihyZXF1ZXN0LCBlcnJvciwgbnVsbCksXG4gICAgICAgICAgICAgICAgICAgIGZhdGFsRXJyb3IocmVxdWVzdCwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgeyBoaWdoV2F0ZXJNYXJrOiAwIH1cbiAgICAgICAgKS5waXBlVG8oZGVidWdDaGFubmVsV3JpdGFibGUpO1xuICAgICAgdm9pZCAwICE9PSBkZWJ1Z0NoYW5uZWxSZWFkYWJsZSAmJlxuICAgICAgICBzdGFydFJlYWRpbmdGcm9tRGVidWdDaGFubmVsUmVhZGFibGVTdHJlYW0oXG4gICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICBkZWJ1Z0NoYW5uZWxSZWFkYWJsZVxuICAgICAgICApO1xuICAgICAgcmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbShcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICBzdGFydDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3RhcnRXb3JrKHJlcXVlc3QpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcHVsbDogZnVuY3Rpb24gKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIHN0YXJ0Rmxvd2luZyhyZXF1ZXN0LCBjb250cm9sbGVyKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNhbmNlbDogZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgcmVxdWVzdC5kZXN0aW5hdGlvbiA9IG51bGw7XG4gICAgICAgICAgICBhYm9ydChyZXF1ZXN0LCByZWFzb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgeyBoaWdoV2F0ZXJNYXJrOiAwIH1cbiAgICAgICk7XG4gICAgfTtcbiAgICBleHBvcnRzLnVuc3RhYmxlX3ByZXJlbmRlciA9IGZ1bmN0aW9uIChtb2RlbCwgd2VicGFja01hcCwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIHJlcXVlc3QgPSBjcmVhdGVQcmVyZW5kZXJSZXF1ZXN0KFxuICAgICAgICAgIG1vZGVsLFxuICAgICAgICAgIHdlYnBhY2tNYXAsXG4gICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHN0cmVhbSA9IG5ldyBSZWFkYWJsZVN0cmVhbShcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBwdWxsOiBmdW5jdGlvbiAoY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgICAgc3RhcnRGbG93aW5nKHJlcXVlc3QsIGNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2FuY2VsOiBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICByZXF1ZXN0LmRlc3RpbmF0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIGFib3J0KHJlcXVlc3QsIHJlYXNvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7IGhpZ2hXYXRlck1hcms6IDAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJlc29sdmUoeyBwcmVsdWRlOiBzdHJlYW0gfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZWplY3QsXG4gICAgICAgICAgb3B0aW9ucyA/IG9wdGlvbnMub25FcnJvciA6IHZvaWQgMCxcbiAgICAgICAgICBvcHRpb25zID8gb3B0aW9ucy5pZGVudGlmaWVyUHJlZml4IDogdm9pZCAwLFxuICAgICAgICAgIG9wdGlvbnMgPyBvcHRpb25zLm9uUG9zdHBvbmUgOiB2b2lkIDAsXG4gICAgICAgICAgb3B0aW9ucyA/IG9wdGlvbnMudGVtcG9yYXJ5UmVmZXJlbmNlcyA6IHZvaWQgMCxcbiAgICAgICAgICBvcHRpb25zID8gb3B0aW9ucy5lbnZpcm9ubWVudE5hbWUgOiB2b2lkIDAsXG4gICAgICAgICAgb3B0aW9ucyA/IG9wdGlvbnMuZmlsdGVyU3RhY2tGcmFtZSA6IHZvaWQgMCxcbiAgICAgICAgICAhMVxuICAgICAgICApO1xuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnNpZ25hbCkge1xuICAgICAgICAgIHZhciBzaWduYWwgPSBvcHRpb25zLnNpZ25hbDtcbiAgICAgICAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIGFib3J0KHJlcXVlc3QsIHNpZ25hbC5yZWFzb24pO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBhYm9ydChyZXF1ZXN0LCBzaWduYWwucmVhc29uKTtcbiAgICAgICAgICAgICAgc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBsaXN0ZW5lcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN0YXJ0V29yayhyZXF1ZXN0KTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0pKCk7XG4iXSwibmFtZXMiOlsidm9pZEhhbmRsZXIiLCJnZXRJdGVyYXRvckZuIiwibWF5YmVJdGVyYWJsZSIsIk1BWUJFX0lURVJBVE9SX1NZTUJPTCIsIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsInZhbHVlIiwiYSIsImUiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsImNhbGwiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImhhbmRsZUVycm9ySW5OZXh0VGljayIsImVycm9yIiwic2V0VGltZW91dCIsIndyaXRlQ2h1bmtBbmRSZXR1cm4iLCJkZXN0aW5hdGlvbiIsImNodW5rIiwiYnl0ZUxlbmd0aCIsIndyaXR0ZW5CeXRlcyIsImVucXVldWUiLCJVaW50OEFycmF5IiwiY3VycmVudFZpZXciLCJidWZmZXIiLCJhbGxvd2FibGVCeXRlcyIsImxlbmd0aCIsInNldCIsInN1YmFycmF5IiwiY29tcGxldGVXcml0aW5nIiwic3RyaW5nVG9DaHVuayIsImNvbnRlbnQiLCJ0ZXh0RW5jb2RlciIsImVuY29kZSIsImJ5dGVMZW5ndGhPZkNodW5rIiwiY2xvc2VXaXRoRXJyb3IiLCJjbG9zZSIsImlzQ2xpZW50UmVmZXJlbmNlIiwicmVmZXJlbmNlIiwiJCR0eXBlb2YiLCJDTElFTlRfUkVGRVJFTkNFX1RBRyQxIiwicmVnaXN0ZXJDbGllbnRSZWZlcmVuY2VJbXBsIiwicHJveHlJbXBsZW1lbnRhdGlvbiIsImlkIiwiYXN5bmMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiJCRpZCIsIiQkYXN5bmMiLCJiaW5kIiwibmV3Rm4iLCJGdW5jdGlvbkJpbmQiLCJhcHBseSIsImFyZ3VtZW50cyIsIlNFUlZFUl9SRUZFUkVOQ0VfVEFHIiwiY29uc29sZSIsImFyZ3MiLCJBcnJheVNsaWNlIiwiJCRib3VuZCIsImNvbmNhdCIsIiQkbG9jYXRpb24iLCJnZXRSZWZlcmVuY2UiLCJ0YXJnZXQiLCJuYW1lIiwicHJvdG90eXBlIiwidG9TdHJpbmdUYWciLCJtb2R1bGVJZCIsImRlZmF1bHQiLCJFcnJvciIsInRoZW4iLCJjbGllbnRSZWZlcmVuY2UiLCJwcm94eSIsIlByb3h5IiwicHJveHlIYW5kbGVycyQxIiwic3RhdHVzIiwicmVzb2x2ZSIsIlByb21pc2UiLCJkZWVwUHJveHlIYW5kbGVycyIsInJlc29sdmVDbGllbnRSZWZlcmVuY2VNZXRhZGF0YSIsImNvbmZpZyIsIm1vZHVsZVBhdGgiLCJyZXNvbHZlZE1vZHVsZURhdGEiLCJpZHgiLCJsYXN0SW5kZXhPZiIsInNsaWNlIiwiY2h1bmtzIiwidHJpbU9wdGlvbnMiLCJvcHRpb25zIiwiaGFzUHJvcGVydGllcyIsInRyaW1tZWQiLCJjb2xsZWN0U3RhY2tUcmFjZVByaXZhdGUiLCJzdHJ1Y3R1cmVkU3RhY2tUcmFjZSIsImkiLCJmcmFtZXNUb1NraXAiLCJjYWxsU2l0ZSIsImdldEZ1bmN0aW9uTmFtZSIsImluY2x1ZGVzIiwiaXNOYXRpdmUiLCJpc0FzeW5jIiwicHVzaCIsImlzQ29uc3RydWN0b3IiLCJpc1RvcGxldmVsIiwiY2FsbFNpdGUkanNjb21wJDAiLCJnZXRUeXBlTmFtZSIsIm1ldGhvZE5hbWUiLCJnZXRNZXRob2ROYW1lIiwicmVzdWx0IiwiaWRlbnRpZmllclJlZ0V4cCIsInRlc3QiLCJlbmRzV2l0aCIsImdldFNjcmlwdE5hbWVPclNvdXJjZVVSTCIsImlzRXZhbCIsImdldEV2YWxPcmlnaW4iLCJ0b1N0cmluZyIsImdldExpbmVOdW1iZXIiLCJnZXRDb2x1bW5OdW1iZXIiLCJlbmNsb3NpbmdMaW5lIiwiZ2V0RW5jbG9zaW5nTGluZU51bWJlciIsImVuY2xvc2luZ0NvbCIsImdldEVuY2xvc2luZ0NvbHVtbk51bWJlciIsImNvbGxlY3RlZFN0YWNrVHJhY2UiLCJjb2xsZWN0U3RhY2tUcmFjZSIsIm1lc3NhZ2UiLCJwYXJzZVN0YWNrVHJhY2UiLCJza2lwRnJhbWVzIiwiZXhpc3RpbmciLCJzdGFja1RyYWNlQ2FjaGUiLCJnZXQiLCJwcmVwYXJlU3RhY2tUcmFjZSIsInN0YWNrIiwic3RhcnRzV2l0aCIsImluZGV4T2YiLCJzcGxpdCIsInBhcnNlZCIsImZyYW1lUmVnRXhwIiwiZXhlYyIsImZpbGVuYW1lIiwiY3JlYXRlVGVtcG9yYXJ5UmVmZXJlbmNlIiwidGVtcG9yYXJ5UmVmZXJlbmNlcyIsIlRFTVBPUkFSWV9SRUZFUkVOQ0VfVEFHIiwicHJveHlIYW5kbGVycyIsIm5vb3AiLCJ0cmFja1VzZWRUaGVuYWJsZSIsInRoZW5hYmxlU3RhdGUiLCJ0aGVuYWJsZSIsImluZGV4IiwiX3N0YWNrcyIsInJlYXNvbiIsImZ1bGZpbGxlZFZhbHVlIiwiZnVsZmlsbGVkVGhlbmFibGUiLCJyZWplY3RlZFRoZW5hYmxlIiwic3VzcGVuZGVkVGhlbmFibGUiLCJTdXNwZW5zZUV4Y2VwdGlvbiIsImdldFN1c3BlbmRlZFRoZW5hYmxlIiwiZ2V0VGhlbmFibGVTdGF0ZUFmdGVyU3VzcGVuZGluZyIsInN0YXRlIiwiX2NvbXBvbmVudERlYnVnSW5mbyIsImN1cnJlbnRDb21wb25lbnREZWJ1Z0luZm8iLCJ1bnN1cHBvcnRlZEhvb2siLCJ1bnN1cHBvcnRlZFJlZnJlc2giLCJ1bnN1cHBvcnRlZENvbnRleHQiLCJyZXNvbHZlT3duZXIiLCJjdXJyZW50T3duZXIiLCJzdXBwb3J0c0NvbXBvbmVudFN0b3JhZ2UiLCJvd25lciIsImNvbXBvbmVudFN0b3JhZ2UiLCJnZXRTdG9yZSIsInJlc2V0T3duZXJTdGFja0xpbWl0Iiwibm93IiwiZ2V0Q3VycmVudFRpbWUiLCJsYXN0UmVzZXRUaW1lIiwiUmVhY3RTaGFyZWRJbnRlcm5hbHNTZXJ2ZXIiLCJyZWNlbnRseUNyZWF0ZWRPd25lclN0YWNrcyIsImlzT2JqZWN0UHJvdG90eXBlIiwib2JqZWN0IiwiT2JqZWN0UHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiaXNHZXR0ZXIiLCJkZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiaXNTaW1wbGVPYmplY3QiLCJuYW1lcyIsIm9iamVjdE5hbWUiLCJkZXNjcmliZUtleUZvckVycm9yTWVzc2FnZSIsImVuY29kZWRLZXkiLCJKU09OIiwic3RyaW5naWZ5IiwiZGVzY3JpYmVWYWx1ZUZvckVycm9yTWVzc2FnZSIsImlzQXJyYXlJbXBsIiwiQ0xJRU5UX1JFRkVSRU5DRV9UQUciLCJkaXNwbGF5TmFtZSIsImRlc2NyaWJlRWxlbWVudFR5cGUiLCJ0eXBlIiwiUkVBQ1RfU1VTUEVOU0VfVFlQRSIsIlJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSIsIlJFQUNUX0ZPUldBUkRfUkVGX1RZUEUiLCJyZW5kZXIiLCJSRUFDVF9NRU1PX1RZUEUiLCJSRUFDVF9MQVpZX1RZUEUiLCJwYXlsb2FkIiwiX3BheWxvYWQiLCJfaW5pdCIsIngiLCJkZXNjcmliZU9iamVjdEZvckVycm9yTWVzc2FnZSIsIm9iamVjdE9yQXJyYXkiLCJleHBhbmRlZE5hbWUiLCJvYmpLaW5kIiwic3RhcnQiLCJqc3hDaGlsZHJlblBhcmVudHMiLCJoYXMiLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJqc3hQcm9wc1BhcmVudHMiLCJrZXlzIiwiX3ZhbHVlMiIsIl9zdWJzdHIyIiwicmVwZWF0IiwiZGVmYXVsdEZpbHRlclN0YWNrRnJhbWUiLCJmaWx0ZXJTdGFja1RyYWNlIiwicmVxdWVzdCIsImZpbHRlclN0YWNrRnJhbWUiLCJmaWx0ZXJlZFN0YWNrIiwiY2FsbHNpdGUiLCJmdW5jdGlvbk5hbWUiLCJ1cmwiLCJlbnZJZHgiLCJzdWZmaXhJZHgiLCJkZWNvZGVVUkkiLCJwYXRjaENvbnNvbGUiLCJjb25zb2xlSW5zdCIsIm9yaWdpbmFsTWV0aG9kIiwid3JhcHBlck1ldGhvZCIsInJlc29sdmVSZXF1ZXN0IiwicHJldmlvdXNQcmVwYXJlIiwiSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0IiwicGVuZGluZ0RlYnVnQ2h1bmtzIiwiQXJyYXkiLCJmcm9tIiwiZW52IiwiZm9ybWF0Iiwic3R5bGUiLCJiYWRnZSIsInNwbGljZSIsImVudmlyb25tZW50TmFtZSIsIm91dGxpbmVDb21wb25lbnRJbmZvIiwic2VyaWFsaXplRGVidWdNb2RlbCIsImRlZmVycmVkRGVidWdPYmplY3RzIiwiY29tcGxldGVkRGVidWdDaHVua3MiLCJnZXRDdXJyZW50U3RhY2tJbkRFViIsImluZm8iLCJvd25lclN0YWNrIiwiZGVidWdTdGFjayIsIkpTQ29tcGlsZXJfdGVtcF9jb25zdCIsInByZXZQcmVwYXJlU3RhY2tUcmFjZSIsIkpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCIsInByZWZpeCIsInRyaW0iLCJtYXRjaCIsInN1ZmZpeCIsImRlZmF1bHRFcnJvckhhbmRsZXIiLCJSZXF1ZXN0SW5zdGFuY2UiLCJtb2RlbCIsImJ1bmRsZXJDb25maWciLCJvbkVycm9yIiwib25Qb3N0cG9uZSIsIm9uQWxsUmVhZHkiLCJvbkZhdGFsRXJyb3IiLCJpZGVudGlmaWVyUHJlZml4Iiwia2VlcERlYnVnQWxpdmUiLCJBIiwiRGVmYXVsdEFzeW5jRGlzcGF0Y2hlciIsImdldEN1cnJlbnRTdGFjayIsImFib3J0U2V0IiwiU2V0IiwicGluZ2VkVGFza3MiLCJoaW50cyIsImZsdXNoU2NoZWR1bGVkIiwiZmF0YWxFcnJvciIsImNhY2hlIiwiTWFwIiwiY2FjaGVDb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwicGVuZGluZ0NodW5rcyIsIm5leHRDaHVua0lkIiwiYWJvcnRhYmxlVGFza3MiLCJjb21wbGV0ZWRJbXBvcnRDaHVua3MiLCJjb21wbGV0ZWRIaW50Q2h1bmtzIiwiY29tcGxldGVkUmVndWxhckNodW5rcyIsImNvbXBsZXRlZEVycm9yQ2h1bmtzIiwid3JpdHRlblN5bWJvbHMiLCJ3cml0dGVuQ2xpZW50UmVmZXJlbmNlcyIsIndyaXR0ZW5TZXJ2ZXJSZWZlcmVuY2VzIiwid3JpdHRlbk9iamVjdHMiLCJXZWFrTWFwIiwiaWRlbnRpZmllckNvdW50IiwidGFpbnRDbGVhbnVwUXVldWUiLCJkZWZhdWx0UG9zdHBvbmVIYW5kbGVyIiwiZGVidWdEZXN0aW5hdGlvbiIsImRpZFdhcm5Gb3JLZXkiLCJ3cml0dGVuRGVidWdPYmplY3RzIiwicmV0YWluZWQiLCJ0aW1lT3JpZ2luIiwicGVyZm9ybWFuY2UiLCJlbWl0VGltZU9yaWdpbkNodW5rIiwiYWJvcnRUaW1lIiwiY3JlYXRlVGFzayIsImNyZWF0ZVJlcXVlc3QiLCJjcmVhdGVQcmVyZW5kZXJSZXF1ZXN0IiwiY3VycmVudFJlcXVlc3QiLCJzdXBwb3J0c1JlcXVlc3RTdG9yYWdlIiwic3RvcmUiLCJyZXF1ZXN0U3RvcmFnZSIsInNlcmlhbGl6ZURlYnVnVGhlbmFibGUiLCJjb3VudGVyIiwicmVmIiwiZW1pdE91dGxpbmVkRGVidWdNb2RlbENodW5rIiwiZW1pdEVycm9yQ2h1bmsiLCJBQk9SVElORyIsImVtaXREZWJ1Z0hhbHRDaHVuayIsImNhbmNlbGxlZCIsImVucXVldWVGbHVzaCIsImVtaXRSZXF1ZXN0ZWREZWJ1Z1RoZW5hYmxlIiwic2VyaWFsaXplVGhlbmFibGUiLCJ0YXNrIiwibmV3VGFzayIsImtleVBhdGgiLCJpbXBsaWNpdFNsb3QiLCJ0aW1lIiwiZGVidWdPd25lciIsImRlYnVnVGFzayIsImZvcndhcmREZWJ1Z0luZm9Gcm9tVGhlbmFibGUiLCJwaW5nVGFzayIsImVycm9yZWRUYXNrIiwiZGVsZXRlIiwiYWJvcnRUYXNrIiwiZmluaXNoQWJvcnRlZFRhc2siLCJmb3J3YXJkRGVidWdJbmZvRnJvbUN1cnJlbnRDb250ZXh0IiwidGltZWQiLCJzZXJpYWxpemVSZWFkYWJsZVN0cmVhbSIsInN0cmVhbSIsInByb2dyZXNzIiwiZW50cnkiLCJzdHJlYW1UYXNrIiwiZG9uZSIsInNpZ25hbCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhYm9ydFN0cmVhbSIsImNhbGxPbkFsbFJlYWR5SWZSZWFkeSIsInRyeVN0cmVhbVRhc2siLCJyZWFkZXIiLCJyZWFkIiwieCQwIiwiY2FuY2VsIiwic3VwcG9ydHNCWU9CIiwiZ2V0UmVhZGVyIiwibW9kZSIsInJlbGVhc2VMb2NrIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNlcmlhbGl6ZUJ5VmFsdWVJRCIsInNlcmlhbGl6ZUFzeW5jSXRlcmFibGUiLCJpdGVyYWJsZSIsIml0ZXJhdG9yIiwiZW5kU3RyZWFtUm93IiwiY2h1bmtJZCIsIm91dGxpbmVNb2RlbCIsImFib3J0SXRlcmFibGUiLCJjYWxsSXRlcmF0b3JJbkRFViIsIngkMSIsInRocm93IiwiaXNJdGVyYXRvciIsIl9kZWJ1Z0luZm8iLCJmb3J3YXJkRGVidWdJbmZvIiwiZW1pdEhpbnQiLCJjb2RlIiwicmVhZFRoZW5hYmxlIiwiY3JlYXRlTGF6eVdyYXBwZXJBcm91bmRXYWtlYWJsZSIsIndha2VhYmxlIiwiY2FsbFdpdGhEZWJ1Z0NvbnRleHRJbkRFViIsImNhbGxiYWNrIiwiYXJnIiwiY29tcG9uZW50RGVidWdJbmZvIiwicnVuIiwicHJvY2Vzc1NlcnZlckNvbXBvbmVudFJldHVyblZhbHVlIiwiQ29tcG9uZW50IiwicmVzb2x2ZWRWYWx1ZSIsIl9zdG9yZSIsInZhbGlkYXRlZCIsIml0ZXJhdG9yRm4iLCJtdWx0aVNob3QiLCJBU1lOQ19JVEVSQVRPUiIsIlJlYWRhYmxlU3RyZWFtIiwicmVuZGVyRnVuY3Rpb25Db21wb25lbnQiLCJwcm9wcyIsInByZXZUaGVuYWJsZVN0YXRlIiwiY2FuRW1pdERlYnVnSW5mbyIsImNvbXBvbmVudERlYnVnSUQiLCJjb21wb25lbnRFbnYiLCJ0aW1lc3RhbXAiLCJlbWl0RGVidWdDaHVuayIsIndhcm5Gb3JNaXNzaW5nS2V5Iiwib3V0bGluZVRhc2siLCJ0aGVuYWJsZUluZGV4Q291bnRlciIsImNhbGxDb21wb25lbnRJbkRFViIsInJlbmRlck1vZGVsRGVzdHJ1Y3RpdmUiLCJlbXB0eVJvb3QiLCJsb2dLZXlFcnJvciIsIldlYWtTZXQiLCJhZGQiLCJyZW5kZXJGcmFnbWVudCIsImNoaWxkcmVuIiwiY2hpbGQiLCJSRUFDVF9GUkFHTUVOVF9UWVBFIiwicmVuZGVyQXN5bmNGcmFnbWVudCIsImdldEFzeW5jSXRlcmF0b3IiLCJkZWZlclRhc2siLCJzZXJpYWxpemVMYXp5SUQiLCJyZXRyeVRhc2siLCJyZW5kZXJFbGVtZW50IiwiY2FsbExhenlJbml0SW5ERVYiLCJvdXRsaW5lRGVidWdNb2RlbCIsIm9iamVjdExpbWl0Iiwic2NoZWR1bGVNaWNyb3Rhc2siLCJwZXJmb3JtV29yayIsImxhc3RUaW1lc3RhbXAiLCJwaW5nIiwidG9KU09OIiwicGFyZW50UHJvcGVydHlOYW1lIiwicGFyZW50Iiwib3JpZ2luYWxWYWx1ZSIsIkRhdGUiLCJyZW5kZXJNb2RlbCIsInNlcmlhbGl6ZURlZmVycmVkT2JqZWN0Iiwic2VyaWFsaXplTnVtYmVyIiwibnVtYmVyIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJJbmZpbml0eSIsImVuY29kZVJlZmVyZW5jZUNodW5rIiwic2VyaWFsaXplQ2xpZW50UmVmZXJlbmNlIiwiY2xpZW50UmVmZXJlbmNlS2V5IiwiZXhpc3RpbmdJZCIsImNsaWVudFJlZmVyZW5jZU1ldGFkYXRhIiwiaW1wb3J0SWQiLCJlbWl0SW1wb3J0Q2h1bmsiLCJsb2dSZWNvdmVyYWJsZUVycm9yIiwic2VyaWFsaXplRGVidWdDbGllbnRSZWZlcmVuY2UiLCJzZXJpYWxpemVTZXJ2ZXJSZWZlcmVuY2UiLCJzZXJ2ZXJSZWZlcmVuY2UiLCJsb2NhdGlvbiIsImJvdW5kIiwic2VyaWFsaXplTGFyZ2VUZXh0U3RyaW5nIiwidGV4dCIsInRleHRJZCIsImVtaXRUZXh0Q2h1bmsiLCJzZXJpYWxpemVNYXAiLCJtYXAiLCJzZXJpYWxpemVGb3JtRGF0YSIsImZvcm1EYXRhIiwiZW50cmllcyIsInNlcmlhbGl6ZVNldCIsInNlcmlhbGl6ZVR5cGVkQXJyYXkiLCJ0YWciLCJ0eXBlZEFycmF5IiwiYnVmZmVySWQiLCJlbWl0VHlwZWRBcnJheUNodW5rIiwic2VyaWFsaXplRGVidWdUeXBlZEFycmF5Iiwic2VyaWFsaXplRGVidWdCbG9iIiwiYmxvYiIsImNhdGNoIiwic2VyaWFsaXplQmxvYiIsImFib3J0QmxvYiIsInNlcmlhbGl6ZWRTaXplIiwicHJldktleVBhdGgiLCJwcmV2SW1wbGljaXRTbG90IiwidGhyb3duVmFsdWUiLCJlbGVtZW50UmVmZXJlbmNlIiwiX3dyaXR0ZW5PYmplY3RzIiwiX2V4aXN0aW5nUmVmZXJlbmNlIiwibW9kZWxSb290IiwiTUFYX1JPV19TSVpFIiwicmVmUHJvcCIsIl9vd25lciIsIl9kZWJ1Z1N0YWNrIiwiX2RlYnVnVGFzayIsIlJFQUNUX0xFR0FDWV9FTEVNRU5UX1RZUEUiLCJGb3JtRGF0YSIsInNlcmlhbGl6ZUVycm9yVmFsdWUiLCJBcnJheUJ1ZmZlciIsIkludDhBcnJheSIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiSW50MTZBcnJheSIsIlVpbnQxNkFycmF5IiwiSW50MzJBcnJheSIsIlVpbnQzMkFycmF5IiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiQmlnSW50NjRBcnJheSIsIkJpZ1VpbnQ2NEFycmF5IiwiRGF0YVZpZXciLCJCbG9iIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9scyIsImRlc2NyaXB0aW9uIiwiZm9yIiwiZW1pdFN5bWJvbENodW5rIiwicHJldlJlcXVlc3QiLCJlcnJvckRpZ2VzdCIsIkNMT1NFRCIsImFib3J0IiwiY2F1c2UiLCJlcnJvckVudiIsImRpZ2VzdCIsImRlYnVnIiwiZW1pdE1vZGVsQ2h1bmsiLCJqc29uIiwiZGVidWdJbmZvIiwiY29tcG9uZW50SW5mbyIsImJ5dGVPZmZzZXQiLCJiaW5hcnlMZW5ndGgiLCJyZW5kZXJEZWJ1Z01vZGVsIiwiQ09OU1RSVUNUT1JfTUFSS0VSIiwidGVtcFJlZiIsImV4aXN0aW5nRGVidWdSZWZlcmVuY2UiLCJkZWJ1Z01vZGVsUm9vdCIsImRvTm90TGltaXQiLCJwcm9wZXJ0eU5hbWUiLCJkZWJ1Z05vT3V0bGluZSIsImNyZWF0ZSIsImhhc093blByb3BlcnR5IiwiRnVuY3Rpb24iLCJyZXBsYWNlciIsInByZXZNb2RlbFJvb3QiLCJyZXF1ZXN0JGpzY29tcCQxIiwibWFya09wZXJhdGlvbkVuZFRpbWUiLCJhd2FpdGVkIiwiaW9JbmZvIiwiZW5kIiwiaW9JbmZvJGpzY29tcCQwIiwiaWQkanNjb21wJDAiLCJyZXF1ZXN0JGpzY29tcCQwIiwiaWQkanNjb21wJDEiLCJkZWJ1Z0lPSW5mbyIsImVtaXRDaHVuayIsInByZXZDYW5FbWl0RGVidWdJbmZvIiwicGFyZW50U2VyaWFsaXplZFNpemUiLCJyZXNvbHZlZE1vZGVsIiwiY3VycmVudEVudiIsImVycm9ySWQiLCJwcmV2RGlzcGF0Y2hlciIsIkgiLCJIb29rc0Rpc3BhdGNoZXIiLCJjdXJyZW50UmVxdWVzdCQxIiwiZmx1c2hDb21wbGV0ZWRDaHVua3MiLCJkZWJ1Z0NodW5rcyIsImltcG9ydHNDaHVua3MiLCJoaW50Q2h1bmtzIiwiX2RlYnVnQ2h1bmtzIiwicmVndWxhckNodW5rcyIsImVycm9yQ2h1bmtzIiwic3RhcnRXb3JrIiwic2l6ZSIsInN0YXJ0Rmxvd2luZyIsImZpbmlzaEFib3J0IiwiYWJvcnRlZFRhc2tzIiwiZm9yRWFjaCIsIl9lcnJvcklkMiIsImVycm9yJDIiLCJmcm9tSGV4Iiwic3RyIiwicGFyc2VJbnQiLCJjbG9zZURlYnVnQ2hhbm5lbCIsInJlc29sdmVTZXJ2ZXJSZWZlcmVuY2UiLCJyZXF1aXJlQXN5bmNNb2R1bGUiLCJwcm9taXNlIiwiZ2xvYmFsVGhpcyIsIl9fbmV4dF9yZXF1aXJlX18iLCJpZ25vcmVSZWplY3QiLCJwcmVsb2FkTW9kdWxlIiwibWV0YWRhdGEiLCJwcm9taXNlcyIsImNodW5rQ2FjaGUiLCJfX3dlYnBhY2tfY2h1bmtfbG9hZF9fIiwiYWxsIiwicmVxdWlyZU1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiQ2h1bmsiLCJyZXNwb25zZSIsIl9yZXNwb25zZSIsImNyZWF0ZVBlbmRpbmdDaHVuayIsIndha2VDaHVuayIsImxpc3RlbmVycyIsInRyaWdnZXJFcnJvck9uQ2h1bmsiLCJyZXNvbHZlTW9kZWxDaHVuayIsImVucXVldWVNb2RlbCIsInJlc29sdmVMaXN0ZW5lcnMiLCJyZWplY3RMaXN0ZW5lcnMiLCJpbml0aWFsaXplTW9kZWxDaHVuayIsImNyZWF0ZVJlc29sdmVkSXRlcmF0b3JSZXN1bHRDaHVuayIsInJlc29sdmVJdGVyYXRvclJlc3VsdENodW5rIiwibG9hZFNlcnZlclJlZmVyZW5jZSQxIiwicGFyZW50Q2h1bmsiLCJwYXJlbnRPYmplY3QiLCJfYnVuZGxlckNvbmZpZyIsIl9yZWYiLCJmbiIsImNyZWF0ZU1vZGVsUmVzb2x2ZXIiLCJjcmVhdGVNb2RlbCIsImNyZWF0ZU1vZGVsUmVqZWN0IiwicmV2aXZlTW9kZWwiLCJwYXJlbnRPYmoiLCJwYXJlbnRLZXkiLCJwYXJzZU1vZGVsU3RyaW5nIiwiX3RlbXBvcmFyeVJlZmVyZW5jZXMiLCJpc0FycmF5IiwicHJldkNodW5rIiwiaW5pdGlhbGl6aW5nQ2h1bmsiLCJwcmV2QmxvY2tlZCIsImluaXRpYWxpemluZ0NodW5rQmxvY2tlZE1vZGVsIiwicm9vdFJlZmVyZW5jZSIsInJhd01vZGVsIiwicGFyc2UiLCJkZXBzIiwicmVwb3J0R2xvYmFsRXJyb3IiLCJfY2xvc2VkIiwiX2Nsb3NlZFJlYXNvbiIsIl9jaHVua3MiLCJnZXRDaHVuayIsIl9mb3JtRGF0YSIsIl9wcmVmaXgiLCJjeWNsaWMiLCJwYXRoIiwiYmxvY2tlZCIsImdldE91dGxpbmVkTW9kZWwiLCJjcmVhdGVNYXAiLCJjcmVhdGVTZXQiLCJleHRyYWN0SXRlcmF0b3IiLCJwYXJzZVR5cGVkQXJyYXkiLCJjb25zdHJ1Y3RvciIsImJ5dGVzUGVyRWxlbWVudCIsImFycmF5QnVmZmVyIiwicmVzb2x2ZVN0cmVhbSIsImNvbnRyb2xsZXIiLCJnZXRBbGwiLCJwYXJzZVJlYWRhYmxlU3RyZWFtIiwiYyIsInByZXZpb3VzQmxvY2tlZENodW5rIiwidiIsIl9jaHVuayIsImJsb2NrZWRDaHVuayIsImFzeW5jSXRlcmF0b3IiLCJjcmVhdGVJdGVyYXRvciIsIm5leHQiLCJwYXJzZUFzeW5jSXRlcmFibGUiLCJjbG9zZWQiLCJuZXh0V3JpdGVJbmRleCIsIm5leHRSZWFkSW5kZXgiLCJmb3JtUHJlZml4IiwiZGF0YSIsImVudHJ5S2V5IiwiYXBwZW5kIiwiTmFOIiwiQmlnSW50IiwiY3JlYXRlUmVzcG9uc2UiLCJmb3JtRmllbGRQcmVmaXgiLCJiYWNraW5nRm9ybURhdGEiLCJsb2FkU2VydmVyUmVmZXJlbmNlIiwiZGVjb2RlQm91bmRBY3Rpb25NZXRhRGF0YSIsImJvZHkiLCJzZXJ2ZXJNYW5pZmVzdCIsInN0YXJ0UmVhZGluZ0Zyb21EZWJ1Z0NoYW5uZWxSZWFkYWJsZVN0cmVhbSIsInN0cmluZ0J1ZmZlciIsInN0cmluZ0RlY29kZXIiLCJkZWNvZGUiLCJkZWNvZGVyT3B0aW9ucyIsImNvbW1hbmQiLCJjaGFyQ29kZUF0IiwicmV0YWluZWRWYWx1ZSIsIlRleHREZWNvZGVyIiwiUmVhY3RET00iLCJyZXF1aXJlIiwiUmVhY3QiLCJSRUFDVF9DT05URVhUX1RZUEUiLCJSRUFDVF9NRU1PX0NBQ0hFX1NFTlRJTkVMIiwiTG9jYWxQcm9taXNlIiwicXVldWVNaWNyb3Rhc2siLCJUZXh0RW5jb2RlciIsIlBST01JU0VfUFJPVE9UWVBFIiwiUmVhY3RET01TaGFyZWRJbnRlcm5hbHMiLCJfX0RPTV9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREUiLCJwcmV2aW91c0Rpc3BhdGNoZXIiLCJkIiwiZiIsInIiLCJEIiwiaHJlZiIsIkMiLCJjcm9zc09yaWdpbiIsIkwiLCJhcyIsImltYWdlU3JjU2V0IiwiaW1hZ2VTaXplcyIsInVuaXF1ZVBhcnQiLCJtIiwiWCIsInNyYyIsIlMiLCJwcmVjZWRlbmNlIiwiTSIsIkFzeW5jTG9jYWxTdG9yYWdlIiwicmVhZENvbnRleHQiLCJ1c2UiLCJ1c2FibGUiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlSW5zZXJ0aW9uRWZmZWN0IiwidXNlTWVtbyIsIm5leHRDcmVhdGUiLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZUlkIiwidXNlSG9zdFRyYW5zaXRpb25TdGF0dXMiLCJ1c2VGb3JtU3RhdGUiLCJ1c2VBY3Rpb25TdGF0ZSIsInVzZU9wdGltaXN0aWMiLCJ1c2VNZW1vQ2FjaGUiLCJ1c2VDYWNoZVJlZnJlc2giLCJnZXRDYWNoZUZvclR5cGUiLCJyZXNvdXJjZVR5cGUiLCJjYWNoZVNpZ25hbCIsImdldE93bmVyIiwiX19TRVJWRVJfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfV0FSTl9VU0VSU19USEVZX0NBTk5PVF9VUEdSQURFIiwibG9jYWxQZXJmb3JtYW5jZSIsImxvY2FsRGF0ZSIsImNhbGxDb21wb25lbnQiLCJyZWFjdF9zdGFja19ib3R0b21fZnJhbWUiLCJjYWxsTGF6eUluaXQiLCJsYXp5IiwiaW5pdCIsImNhbGxJdGVyYXRvciIsInJlamVjdCIsImV4cG9ydHMiLCJjcmVhdGVDbGllbnRNb2R1bGVQcm94eSIsImNyZWF0ZVRlbXBvcmFyeVJlZmVyZW5jZVNldCIsImRlY29kZUFjdGlvbiIsImFjdGlvbiIsImRlY29kZUZvcm1TdGF0ZSIsImFjdGlvblJlc3VsdCIsIm1ldGFEYXRhIiwicmVmZXJlbmNlSWQiLCJkZWNvZGVSZXBseSIsIndlYnBhY2tNYXAiLCJmb3JtIiwiZGVjb2RlUmVwbHlGcm9tQXN5bmNJdGVyYWJsZSIsInJlc3BvbnNlJGpzY29tcCQwIiwicmVnaXN0ZXJDbGllbnRSZWZlcmVuY2UiLCJleHBvcnROYW1lIiwicmVnaXN0ZXJTZXJ2ZXJSZWZlcmVuY2UiLCJyZW5kZXJUb1JlYWRhYmxlU3RyZWFtIiwiZGVidWdDaGFubmVsUmVhZGFibGUiLCJkZWJ1Z0NoYW5uZWwiLCJyZWFkYWJsZSIsImRlYnVnQ2hhbm5lbFdyaXRhYmxlIiwiYWJvcnRlZCIsImxpc3RlbmVyIiwicHVsbCIsImhpZ2hXYXRlck1hcmsiLCJwaXBlVG8iLCJ1bnN0YWJsZV9wcmVyZW5kZXIiLCJwcmVsdWRlIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.edge.development.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/server.edge.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-server-dom-webpack/server.edge.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar s;\nif (false) {} else {\n  s = __webpack_require__(/*! ./cjs/react-server-dom-webpack-server.edge.development.js */ \"(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-server.edge.development.js\");\n}\n\nexports.renderToReadableStream = s.renderToReadableStream;\nexports.decodeReply = s.decodeReply;\nexports.decodeReplyFromAsyncIterable = s.decodeReplyFromAsyncIterable;\nexports.decodeAction = s.decodeAction;\nexports.decodeFormState = s.decodeFormState;\nexports.registerServerReference = s.registerServerReference;\nexports.registerClientReference = s.registerClientReference;\nexports.createClientModuleProxy = s.createClientModuleProxy;\nexports.createTemporaryReferenceSet = s.createTemporaryReferenceSet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC1zZXJ2ZXItZG9tLXdlYnBhY2svc2VydmVyLmVkZ2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQSxJQUFJLEtBQXFDLEVBQUUsRUFFMUMsQ0FBQztBQUNGLE1BQU0sbUJBQU8sQ0FBQyxrTUFBMkQ7QUFDekU7O0FBRUEsOEJBQThCO0FBQzlCLG1CQUFtQjtBQUNuQixvQ0FBb0M7QUFDcEMsb0JBQW9CO0FBQ3BCLHVCQUF1QjtBQUN2QiwrQkFBK0I7QUFDL0IsK0JBQStCO0FBQy9CLCtCQUErQjtBQUMvQixtQ0FBbUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSFBcXERlc2t0b3BcXEJleW9uZF9jaGF0XFxjbGllbnRcXG5vZGVfbW9kdWxlc1xcbmV4dFxcZGlzdFxcY29tcGlsZWRcXHJlYWN0LXNlcnZlci1kb20td2VicGFja1xcc2VydmVyLmVkZ2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcztcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1zZXJ2ZXItZG9tLXdlYnBhY2stc2VydmVyLmVkZ2UucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgcyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LXNlcnZlci1kb20td2VicGFjay1zZXJ2ZXIuZWRnZS5kZXZlbG9wbWVudC5qcycpO1xufVxuXG5leHBvcnRzLnJlbmRlclRvUmVhZGFibGVTdHJlYW0gPSBzLnJlbmRlclRvUmVhZGFibGVTdHJlYW07XG5leHBvcnRzLmRlY29kZVJlcGx5ID0gcy5kZWNvZGVSZXBseTtcbmV4cG9ydHMuZGVjb2RlUmVwbHlGcm9tQXN5bmNJdGVyYWJsZSA9IHMuZGVjb2RlUmVwbHlGcm9tQXN5bmNJdGVyYWJsZTtcbmV4cG9ydHMuZGVjb2RlQWN0aW9uID0gcy5kZWNvZGVBY3Rpb247XG5leHBvcnRzLmRlY29kZUZvcm1TdGF0ZSA9IHMuZGVjb2RlRm9ybVN0YXRlO1xuZXhwb3J0cy5yZWdpc3RlclNlcnZlclJlZmVyZW5jZSA9IHMucmVnaXN0ZXJTZXJ2ZXJSZWZlcmVuY2U7XG5leHBvcnRzLnJlZ2lzdGVyQ2xpZW50UmVmZXJlbmNlID0gcy5yZWdpc3RlckNsaWVudFJlZmVyZW5jZTtcbmV4cG9ydHMuY3JlYXRlQ2xpZW50TW9kdWxlUHJveHkgPSBzLmNyZWF0ZUNsaWVudE1vZHVsZVByb3h5O1xuZXhwb3J0cy5jcmVhdGVUZW1wb3JhcnlSZWZlcmVuY2VTZXQgPSBzLmNyZWF0ZVRlbXBvcmFyeVJlZmVyZW5jZVNldDtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/next/dist/compiled/react-server-dom-webpack/server.edge.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/next/dist/compiled/server-only/empty.js":
/*!**************************************************************!*\
  !*** ./node_modules/next/dist/compiled/server-only/empty.js ***!
  \**************************************************************/
/***/ (() => {



/***/ }),

/***/ "(middleware)/./src/middleware.js":
/*!***************************!*\
  !*** ./src/middleware.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _clerk_nextjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/nextjs */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/index.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_clerk_nextjs__WEBPACK_IMPORTED_MODULE_0__.authMiddleware)({\n    publicRoutes: [\n        \"/\",\n        \"/sign-in\",\n        \"/sign-up\"\n    ]\n}));\nconst config = {\n    matcher: [\n        \"/((?!.+\\\\.[\\\\w]+$|_next).*)\",\n        \"/\",\n        \"/(api|trpc)(.*)\"\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vc3JjL21pZGRsZXdhcmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQStDO0FBRS9DLGlFQUFlQSw2REFBY0EsQ0FBQztJQUM1QkMsY0FBYztRQUFDO1FBQUs7UUFBWTtLQUFXO0FBQzdDLEVBQUUsRUFBQztBQUVJLE1BQU1DLFNBQVM7SUFDcEJDLFNBQVM7UUFBQztRQUErQjtRQUFLO0tBQWtCO0FBQ2xFLEVBQUUiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSFBcXERlc2t0b3BcXEJleW9uZF9jaGF0XFxjbGllbnRcXHNyY1xcbWlkZGxld2FyZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhdXRoTWlkZGxld2FyZSB9IGZyb20gXCJAY2xlcmsvbmV4dGpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhdXRoTWlkZGxld2FyZSh7XHJcbiAgcHVibGljUm91dGVzOiBbXCIvXCIsIFwiL3NpZ24taW5cIiwgXCIvc2lnbi11cFwiXSxcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgY29uZmlnID0ge1xyXG4gIG1hdGNoZXI6IFtcIi8oKD8hLitcXFxcLltcXFxcd10rJHxfbmV4dCkuKilcIiwgXCIvXCIsIFwiLyhhcGl8dHJwYykoLiopXCJdLFxyXG59OyJdLCJuYW1lcyI6WyJhdXRoTWlkZGxld2FyZSIsInB1YmxpY1JvdXRlcyIsImNvbmZpZyIsIm1hdGNoZXIiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./src/middleware.js\n");

/***/ })

});